<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2134.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2117" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2117" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1237" width="0.2" height="15.0" fill="rgb(243,56,4)" rx="2" ry="2" />
<text  x="223.35" y="1247.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (47 samples, 0.25%)</title><rect x="168.5" y="1589" width="2.9" height="15.0" fill="rgb(237,4,4)" rx="2" ry="2" />
<text  x="171.55" y="1599.5" ></text>
</g>
<g >
<title>__libc_read (3 samples, 0.02%)</title><rect x="1111.1" y="2037" width="0.2" height="15.0" fill="rgb(212,227,12)" rx="2" ry="2" />
<text  x="1114.13" y="2047.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.03%)</title><rect x="133.8" y="1589" width="0.3" height="15.0" fill="rgb(247,167,6)" rx="2" ry="2" />
<text  x="136.83" y="1599.5" ></text>
</g>
<g >
<title>__asan_memmove (3 samples, 0.02%)</title><rect x="486.4" y="1925" width="0.2" height="15.0" fill="rgb(232,165,25)" rx="2" ry="2" />
<text  x="489.44" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::handle_value&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (2 samples, 0.01%)</title><rect x="124.4" y="1941" width="0.1" height="15.0" fill="rgb(213,81,7)" rx="2" ry="2" />
<text  x="127.39" y="1951.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (19 samples, 0.10%)</title><rect x="508.6" y="1861" width="1.2" height="15.0" fill="rgb(236,169,21)" rx="2" ry="2" />
<text  x="511.64" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (556 samples, 2.91%)</title><rect x="56.1" y="1797" width="34.3" height="15.0" fill="rgb(252,62,21)" rx="2" ry="2" />
<text  x="59.07" y="1807.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="485" width="0.3" height="15.0" fill="rgb(241,178,9)" rx="2" ry="2" />
<text  x="1190.04" y="495.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="573.3" y="1861" width="0.2" height="15.0" fill="rgb(208,113,52)" rx="2" ry="2" />
<text  x="576.33" y="1871.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (2 samples, 0.01%)</title><rect x="124.8" y="1909" width="0.1" height="15.0" fill="rgb(253,198,44)" rx="2" ry="2" />
<text  x="127.76" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (5 samples, 0.03%)</title><rect x="188.6" y="1861" width="0.3" height="15.0" fill="rgb(245,179,9)" rx="2" ry="2" />
<text  x="191.59" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="122.2" y="2037" width="0.2" height="15.0" fill="rgb(223,120,29)" rx="2" ry="2" />
<text  x="125.23" y="2047.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (23 samples, 0.12%)</title><rect x="1156.7" y="2037" width="1.4" height="15.0" fill="rgb(250,228,10)" rx="2" ry="2" />
<text  x="1159.70" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="572.5" y="1877" width="0.2" height="15.0" fill="rgb(205,224,12)" rx="2" ry="2" />
<text  x="575.47" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="87.0" y="1557" width="0.1" height="15.0" fill="rgb(232,9,11)" rx="2" ry="2" />
<text  x="90.02" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1029" width="0.1" height="15.0" fill="rgb(245,126,26)" rx="2" ry="2" />
<text  x="162.85" y="1039.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (2 samples, 0.01%)</title><rect x="90.9" y="1845" width="0.1" height="15.0" fill="rgb(249,11,53)" rx="2" ry="2" />
<text  x="93.91" y="1855.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10 samples, 0.05%)</title><rect x="646.9" y="1797" width="0.6" height="15.0" fill="rgb(221,21,20)" rx="2" ry="2" />
<text  x="649.90" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (77 samples, 0.40%)</title><rect x="191.7" y="1669" width="4.7" height="15.0" fill="rgb(240,8,4)" rx="2" ry="2" />
<text  x="194.67" y="1679.5" ></text>
</g>
<g >
<title>unmap_vmas (7 samples, 0.04%)</title><rect x="1103.0" y="1941" width="0.4" height="15.0" fill="rgb(236,182,37)" rx="2" ry="2" />
<text  x="1105.99" y="1951.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (9 samples, 0.05%)</title><rect x="520.0" y="1909" width="0.5" height="15.0" fill="rgb(244,111,30)" rx="2" ry="2" />
<text  x="522.99" y="1919.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (4 samples, 0.02%)</title><rect x="198.3" y="1589" width="0.2" height="15.0" fill="rgb(236,77,45)" rx="2" ry="2" />
<text  x="201.27" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1477" width="0.2" height="15.0" fill="rgb(220,126,17)" rx="2" ry="2" />
<text  x="223.04" y="1487.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.4" y="1957" width="0.4" height="15.0" fill="rgb(244,154,29)" rx="2" ry="2" />
<text  x="518.42" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1333" width="0.3" height="15.0" fill="rgb(234,99,9)" rx="2" ry="2" />
<text  x="1189.98" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (181 samples, 0.95%)</title><rect x="133.1" y="1765" width="11.1" height="15.0" fill="rgb(207,42,3)" rx="2" ry="2" />
<text  x="136.09" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="186.1" y="1653" width="0.1" height="15.0" fill="rgb(251,151,44)" rx="2" ry="2" />
<text  x="189.06" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.04%)</title><rect x="813.4" y="2021" width="0.5" height="15.0" fill="rgb(238,5,2)" rx="2" ry="2" />
<text  x="816.40" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (7 samples, 0.04%)</title><rect x="191.2" y="1701" width="0.5" height="15.0" fill="rgb(240,171,40)" rx="2" ry="2" />
<text  x="194.24" y="1711.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="165.9" y="1557" width="0.1" height="15.0" fill="rgb(211,102,54)" rx="2" ry="2" />
<text  x="168.89" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1525" width="0.1" height="15.0" fill="rgb(224,172,32)" rx="2" ry="2" />
<text  x="1190.72" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (106 samples, 0.55%)</title><rect x="206.9" y="1781" width="6.5" height="15.0" fill="rgb(205,184,2)" rx="2" ry="2" />
<text  x="209.90" y="1791.5" ></text>
</g>
<g >
<title>main (6,399 samples, 33.44%)</title><rect x="122.9" y="2021" width="394.6" height="15.0" fill="rgb(247,19,35)" rx="2" ry="2" />
<text  x="125.91" y="2031.5" >main</text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (37 samples, 0.19%)</title><rect x="970.2" y="2053" width="2.2" height="15.0" fill="rgb(229,94,18)" rx="2" ry="2" />
<text  x="973.16" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1205" width="0.2" height="15.0" fill="rgb(240,24,40)" rx="2" ry="2" />
<text  x="163.04" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="357" width="0.1" height="15.0" fill="rgb(246,33,21)" rx="2" ry="2" />
<text  x="1190.72" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (11 samples, 0.06%)</title><rect x="676.9" y="1829" width="0.6" height="15.0" fill="rgb(225,217,52)" rx="2" ry="2" />
<text  x="679.87" y="1839.5" ></text>
</g>
<g >
<title>get_user_pages_fast (2 samples, 0.01%)</title><rect x="29.4" y="1893" width="0.1" height="15.0" fill="rgb(235,41,37)" rx="2" ry="2" />
<text  x="32.36" y="1903.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="148.9" y="1637" width="0.3" height="15.0" fill="rgb(236,217,22)" rx="2" ry="2" />
<text  x="151.94" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1717" width="0.1" height="15.0" fill="rgb(219,81,53)" rx="2" ry="2" />
<text  x="162.85" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1525" width="0.1" height="15.0" fill="rgb(248,175,3)" rx="2" ry="2" />
<text  x="162.85" y="1535.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (32 samples, 0.17%)</title><rect x="814.4" y="2037" width="2.0" height="15.0" fill="rgb(253,224,44)" rx="2" ry="2" />
<text  x="817.45" y="2047.5" ></text>
</g>
<g >
<title>onmt::unicode::is_number (14 samples, 0.07%)</title><rect x="720.4" y="1877" width="0.9" height="15.0" fill="rgb(212,163,41)" rx="2" ry="2" />
<text  x="723.41" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1525" width="0.4" height="15.0" fill="rgb(225,46,9)" rx="2" ry="2" />
<text  x="1190.35" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="677" width="0.3" height="15.0" fill="rgb(212,157,4)" rx="2" ry="2" />
<text  x="1190.41" y="687.5" ></text>
</g>
<g >
<title>__madvise (3 samples, 0.02%)</title><rect x="96.1" y="2021" width="0.2" height="15.0" fill="rgb(222,69,53)" rx="2" ry="2" />
<text  x="99.09" y="2031.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="318.5" y="1957" width="0.1" height="15.0" fill="rgb(242,113,7)" rx="2" ry="2" />
<text  x="321.46" y="1967.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 0.03%)</title><rect x="763.9" y="2005" width="0.4" height="15.0" fill="rgb(209,27,29)" rx="2" ry="2" />
<text  x="766.94" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="159.8" y="1861" width="0.4" height="15.0" fill="rgb(241,103,38)" rx="2" ry="2" />
<text  x="162.79" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (80 samples, 0.42%)</title><rect x="149.4" y="1781" width="4.9" height="15.0" fill="rgb(229,153,20)" rx="2" ry="2" />
<text  x="152.37" y="1791.5" ></text>
</g>
<g >
<title>do_group_exit (7 samples, 0.04%)</title><rect x="1103.0" y="2005" width="0.4" height="15.0" fill="rgb(238,0,0)" rx="2" ry="2" />
<text  x="1105.99" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.86%)</title><rect x="56.1" y="997" width="22.0" height="15.0" fill="rgb(211,12,24)" rx="2" ry="2" />
<text  x="59.13" y="1007.5" >[..</text>
</g>
<g >
<title>tlb_flush_mmu_free (6 samples, 0.03%)</title><rect x="1103.0" y="1893" width="0.4" height="15.0" fill="rgb(216,108,43)" rx="2" ry="2" />
<text  x="1106.05" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (2 samples, 0.01%)</title><rect x="538.9" y="1957" width="0.1" height="15.0" fill="rgb(226,123,11)" rx="2" ry="2" />
<text  x="541.86" y="1967.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (3 samples, 0.02%)</title><rect x="586.8" y="1877" width="0.2" height="15.0" fill="rgb(213,34,45)" rx="2" ry="2" />
<text  x="589.77" y="1887.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.02%)</title><rect x="1189.4" y="1989" width="0.2" height="15.0" fill="rgb(234,226,16)" rx="2" ry="2" />
<text  x="1192.44" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="158.7" y="1813" width="0.2" height="15.0" fill="rgb(242,67,26)" rx="2" ry="2" />
<text  x="161.74" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (863 samples, 4.51%)</title><rect x="820.9" y="2005" width="53.2" height="15.0" fill="rgb(227,54,2)" rx="2" ry="2" />
<text  x="823.92" y="2015.5" >__san..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1589" width="0.1" height="15.0" fill="rgb(224,79,0)" rx="2" ry="2" />
<text  x="1190.72" y="1599.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="175.3" y="1589" width="0.1" height="15.0" fill="rgb(224,155,35)" rx="2" ry="2" />
<text  x="178.27" y="1599.5" ></text>
</g>
<g >
<title>_cond_resched (2 samples, 0.01%)</title><rect x="940.6" y="1989" width="0.1" height="15.0" fill="rgb(235,39,14)" rx="2" ry="2" />
<text  x="943.62" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="43.2" y="2021" width="0.1" height="15.0" fill="rgb(237,156,44)" rx="2" ry="2" />
<text  x="46.18" y="2031.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="681.3" y="1813" width="0.1" height="15.0" fill="rgb(223,228,17)" rx="2" ry="2" />
<text  x="684.31" y="1823.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (23 samples, 0.12%)</title><rect x="536.5" y="1909" width="1.4" height="15.0" fill="rgb(211,26,24)" rx="2" ry="2" />
<text  x="539.45" y="1919.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="813.2" y="2037" width="0.1" height="15.0" fill="rgb(233,76,7)" rx="2" ry="2" />
<text  x="816.21" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1173" width="0.1" height="15.0" fill="rgb(239,26,26)" rx="2" ry="2" />
<text  x="162.85" y="1183.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.86%)</title><rect x="56.1" y="1013" width="22.0" height="15.0" fill="rgb(250,123,0)" rx="2" ry="2" />
<text  x="59.13" y="1023.5" >[..</text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (64 samples, 0.33%)</title><rect x="177.9" y="1653" width="4.0" height="15.0" fill="rgb(207,213,37)" rx="2" ry="2" />
<text  x="180.92" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (5 samples, 0.03%)</title><rect x="159.0" y="1829" width="0.4" height="15.0" fill="rgb(227,188,21)" rx="2" ry="2" />
<text  x="162.05" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (10 samples, 0.05%)</title><rect x="535.2" y="1909" width="0.6" height="15.0" fill="rgb(205,116,46)" rx="2" ry="2" />
<text  x="538.22" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="213.5" y="1797" width="0.1" height="15.0" fill="rgb(224,113,28)" rx="2" ry="2" />
<text  x="216.50" y="1807.5" ></text>
</g>
<g >
<title>__lsan::MarkInvalidPCCb (4 samples, 0.02%)</title><rect x="518.9" y="2037" width="0.3" height="15.0" fill="rgb(222,32,32)" rx="2" ry="2" />
<text  x="521.94" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (47 samples, 0.25%)</title><rect x="163.0" y="1557" width="2.9" height="15.0" fill="rgb(251,143,16)" rx="2" ry="2" />
<text  x="166.00" y="1567.5" ></text>
</g>
<g >
<title>page_fault (97 samples, 0.51%)</title><rect x="22.5" y="2037" width="5.9" height="15.0" fill="rgb(248,220,49)" rx="2" ry="2" />
<text  x="25.46" y="2047.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (9 samples, 0.05%)</title><rect x="1001.2" y="2053" width="0.6" height="15.0" fill="rgb(233,216,41)" rx="2" ry="2" />
<text  x="1004.24" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (446 samples, 2.33%)</title><rect x="191.2" y="1893" width="27.5" height="15.0" fill="rgb(249,144,4)" rx="2" ry="2" />
<text  x="194.24" y="1903.5" >s..</text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="679.0" y="1861" width="0.1" height="15.0" fill="rgb(249,15,24)" rx="2" ry="2" />
<text  x="681.96" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (2 samples, 0.01%)</title><rect x="188.8" y="1829" width="0.1" height="15.0" fill="rgb(230,0,1)" rx="2" ry="2" />
<text  x="191.77" y="1839.5" ></text>
</g>
<g >
<title>RunFasttextClf (437 samples, 2.28%)</title><rect x="539.2" y="1957" width="27.0" height="15.0" fill="rgb(220,221,40)" rx="2" ry="2" />
<text  x="542.23" y="1967.5" >R..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1605" width="0.1" height="15.0" fill="rgb(226,225,51)" rx="2" ry="2" />
<text  x="1190.72" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="661" width="0.1" height="15.0" fill="rgb(243,126,41)" rx="2" ry="2" />
<text  x="162.85" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1413" width="0.3" height="15.0" fill="rgb(235,181,18)" rx="2" ry="2" />
<text  x="1190.41" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (341 samples, 1.78%)</title><rect x="56.1" y="389" width="21.1" height="15.0" fill="rgb(245,182,35)" rx="2" ry="2" />
<text  x="59.13" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1333" width="0.1" height="15.0" fill="rgb(247,132,0)" rx="2" ry="2" />
<text  x="1190.72" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="876.7" y="2021" width="0.2" height="15.0" fill="rgb(222,154,47)" rx="2" ry="2" />
<text  x="879.73" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1397" width="0.3" height="15.0" fill="rgb(229,140,16)" rx="2" ry="2" />
<text  x="1189.98" y="1407.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.03%)</title><rect x="142.7" y="1589" width="0.3" height="15.0" fill="rgb(208,203,46)" rx="2" ry="2" />
<text  x="145.71" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (353 samples, 1.84%)</title><rect x="56.1" y="853" width="21.8" height="15.0" fill="rgb(205,111,6)" rx="2" ry="2" />
<text  x="59.13" y="863.5" >[..</text>
</g>
<g >
<title>fasttext::FastText::predictLine (232 samples, 1.21%)</title><rect x="524.4" y="1941" width="14.3" height="15.0" fill="rgb(211,29,46)" rx="2" ry="2" />
<text  x="527.43" y="1951.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="86.1" y="1493" width="0.1" height="15.0" fill="rgb(250,88,53)" rx="2" ry="2" />
<text  x="89.10" y="1503.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="1124.3" y="2037" width="0.1" height="15.0" fill="rgb(216,190,16)" rx="2" ry="2" />
<text  x="1127.26" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="981" width="0.1" height="15.0" fill="rgb(220,107,49)" rx="2" ry="2" />
<text  x="1190.72" y="991.5" ></text>
</g>
<g >
<title>__interceptor_strlen (4 samples, 0.02%)</title><rect x="567.5" y="1925" width="0.2" height="15.0" fill="rgb(237,47,31)" rx="2" ry="2" />
<text  x="570.47" y="1935.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="588.1" y="1877" width="0.1" height="15.0" fill="rgb(221,214,1)" rx="2" ry="2" />
<text  x="591.07" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="158.7" y="1845" width="0.2" height="15.0" fill="rgb(229,12,50)" rx="2" ry="2" />
<text  x="161.74" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (102 samples, 0.53%)</title><rect x="207.0" y="1685" width="6.3" height="15.0" fill="rgb(234,171,0)" rx="2" ry="2" />
<text  x="210.03" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (59 samples, 0.31%)</title><rect x="192.2" y="1589" width="3.7" height="15.0" fill="rgb(242,106,5)" rx="2" ry="2" />
<text  x="195.23" y="1599.5" ></text>
</g>
<g >
<title>unmap_single_vma (3 samples, 0.02%)</title><rect x="1102.1" y="1877" width="0.2" height="15.0" fill="rgb(211,161,20)" rx="2" ry="2" />
<text  x="1105.12" y="1887.5" ></text>
</g>
<g >
<title>DetectLanguage[abi:cxx11] (438 samples, 2.29%)</title><rect x="539.2" y="1973" width="27.0" height="15.0" fill="rgb(212,0,29)" rx="2" ry="2" />
<text  x="542.23" y="1983.5" >D..</text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="152.6" y="1637" width="0.1" height="15.0" fill="rgb(226,226,33)" rx="2" ry="2" />
<text  x="155.57" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1813" width="0.1" height="15.0" fill="rgb(210,154,6)" rx="2" ry="2" />
<text  x="1190.72" y="1823.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="405.2" y="1941" width="0.1" height="15.0" fill="rgb(241,35,25)" rx="2" ry="2" />
<text  x="408.22" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (507 samples, 2.65%)</title><rect x="56.1" y="1589" width="31.2" height="15.0" fill="rgb(235,75,29)" rx="2" ry="2" />
<text  x="59.07" y="1599.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="1186.8" y="2037" width="0.5" height="15.0" fill="rgb(244,176,11)" rx="2" ry="2" />
<text  x="1189.79" y="2047.5" ></text>
</g>
<g >
<title>do_page_fault (118 samples, 0.62%)</title><rect x="938.9" y="2021" width="7.3" height="15.0" fill="rgb(241,174,20)" rx="2" ry="2" />
<text  x="941.89" y="2031.5" ></text>
</g>
<g >
<title>std::locale::locale (2 samples, 0.01%)</title><rect x="514.2" y="1973" width="0.1" height="15.0" fill="rgb(244,221,8)" rx="2" ry="2" />
<text  x="517.19" y="1983.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (9 samples, 0.05%)</title><rect x="1149.9" y="2037" width="0.5" height="15.0" fill="rgb(250,124,49)" rx="2" ry="2" />
<text  x="1152.85" y="2047.5" ></text>
</g>
<g >
<title>memcpy (4 samples, 0.02%)</title><rect x="1120.8" y="2037" width="0.3" height="15.0" fill="rgb(248,15,3)" rx="2" ry="2" />
<text  x="1123.81" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1381" width="0.1" height="15.0" fill="rgb(227,158,11)" rx="2" ry="2" />
<text  x="162.85" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (9 samples, 0.05%)</title><rect x="159.0" y="1893" width="0.5" height="15.0" fill="rgb(238,130,5)" rx="2" ry="2" />
<text  x="161.99" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="77.2" y="437" width="0.1" height="15.0" fill="rgb(210,5,15)" rx="2" ry="2" />
<text  x="80.22" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="219.9" y="1893" width="0.6" height="15.0" fill="rgb(227,87,51)" rx="2" ry="2" />
<text  x="222.91" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1477" width="0.4" height="15.0" fill="rgb(236,192,14)" rx="2" ry="2" />
<text  x="1190.35" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="517" width="0.1" height="15.0" fill="rgb(249,49,10)" rx="2" ry="2" />
<text  x="162.85" y="527.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="85.1" y="1445" width="0.2" height="15.0" fill="rgb(241,147,1)" rx="2" ry="2" />
<text  x="88.11" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1061" width="0.3" height="15.0" fill="rgb(246,12,19)" rx="2" ry="2" />
<text  x="1189.98" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="725" width="0.3" height="15.0" fill="rgb(241,98,51)" rx="2" ry="2" />
<text  x="1189.98" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (7 samples, 0.04%)</title><rect x="629.9" y="1877" width="0.4" height="15.0" fill="rgb(226,223,38)" rx="2" ry="2" />
<text  x="632.88" y="1887.5" ></text>
</g>
<g >
<title>__strxfrm_l (4 samples, 0.02%)</title><rect x="1179.8" y="2037" width="0.3" height="15.0" fill="rgb(251,94,7)" rx="2" ry="2" />
<text  x="1182.82" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="181.7" y="1637" width="0.2" height="15.0" fill="rgb(249,119,14)" rx="2" ry="2" />
<text  x="184.74" y="1647.5" ></text>
</g>
<g >
<title>native_set_pte_at (3 samples, 0.02%)</title><rect x="941.7" y="1941" width="0.2" height="15.0" fill="rgb(251,103,48)" rx="2" ry="2" />
<text  x="944.67" y="1951.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (5 samples, 0.03%)</title><rect x="91.1" y="1861" width="0.3" height="15.0" fill="rgb(227,170,28)" rx="2" ry="2" />
<text  x="94.09" y="1871.5" ></text>
</g>
<g >
<title>page_fault (118 samples, 0.62%)</title><rect x="938.9" y="2037" width="7.3" height="15.0" fill="rgb(221,76,31)" rx="2" ry="2" />
<text  x="941.89" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (4 samples, 0.02%)</title><rect x="93.5" y="2005" width="0.2" height="15.0" fill="rgb(229,160,24)" rx="2" ry="2" />
<text  x="96.50" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (336 samples, 1.76%)</title><rect x="56.1" y="165" width="20.7" height="15.0" fill="rgb(219,197,50)" rx="2" ry="2" />
<text  x="59.13" y="175.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (6 samples, 0.03%)</title><rect x="177.1" y="1621" width="0.4" height="15.0" fill="rgb(220,214,32)" rx="2" ry="2" />
<text  x="180.12" y="1631.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (2 samples, 0.01%)</title><rect x="811.6" y="2037" width="0.1" height="15.0" fill="rgb(240,174,34)" rx="2" ry="2" />
<text  x="814.61" y="2047.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.02%)</title><rect x="490.6" y="1941" width="0.3" height="15.0" fill="rgb(209,156,17)" rx="2" ry="2" />
<text  x="493.63" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (459 samples, 2.40%)</title><rect x="56.1" y="1397" width="28.3" height="15.0" fill="rgb(245,131,42)" rx="2" ry="2" />
<text  x="59.07" y="1407.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (471 samples, 2.46%)</title><rect x="160.4" y="1925" width="29.1" height="15.0" fill="rgb(233,6,17)" rx="2" ry="2" />
<text  x="163.41" y="1935.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (7 samples, 0.04%)</title><rect x="133.1" y="1653" width="0.5" height="15.0" fill="rgb(215,215,48)" rx="2" ry="2" />
<text  x="136.15" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (455 samples, 2.38%)</title><rect x="160.5" y="1845" width="28.1" height="15.0" fill="rgb(234,10,38)" rx="2" ry="2" />
<text  x="163.53" y="1855.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1397" width="0.3" height="15.0" fill="rgb(217,107,8)" rx="2" ry="2" />
<text  x="1190.41" y="1407.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReturnToAllocator (10 samples, 0.05%)</title><rect x="1021.6" y="2053" width="0.7" height="15.0" fill="rgb(244,66,8)" rx="2" ry="2" />
<text  x="1024.65" y="2063.5" ></text>
</g>
<g >
<title>__asan_memset (4 samples, 0.02%)</title><rect x="575.0" y="1893" width="0.2" height="15.0" fill="rgb(211,123,2)" rx="2" ry="2" />
<text  x="577.99" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (85 samples, 0.44%)</title><rect x="172.2" y="1637" width="5.3" height="15.0" fill="rgb(217,216,9)" rx="2" ry="2" />
<text  x="175.25" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (13 samples, 0.07%)</title><rect x="160.6" y="1685" width="0.8" height="15.0" fill="rgb(218,52,36)" rx="2" ry="2" />
<text  x="163.59" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="341" width="0.3" height="15.0" fill="rgb(207,88,0)" rx="2" ry="2" />
<text  x="1190.41" y="351.5" ></text>
</g>
<g >
<title>free_unref_page_list (3 samples, 0.02%)</title><rect x="764.1" y="1829" width="0.2" height="15.0" fill="rgb(217,53,23)" rx="2" ry="2" />
<text  x="767.07" y="1839.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (3 samples, 0.02%)</title><rect x="158.0" y="1669" width="0.2" height="15.0" fill="rgb(215,227,39)" rx="2" ry="2" />
<text  x="161.00" y="1679.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (2 samples, 0.01%)</title><rect x="732.5" y="1893" width="0.1" height="15.0" fill="rgb(242,21,12)" rx="2" ry="2" />
<text  x="735.49" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (334 samples, 1.75%)</title><rect x="56.1" y="101" width="20.6" height="15.0" fill="rgb(227,49,33)" rx="2" ry="2" />
<text  x="59.13" y="111.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="136.0" y="1557" width="0.2" height="15.0" fill="rgb(206,210,54)" rx="2" ry="2" />
<text  x="139.05" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (344 samples, 1.80%)</title><rect x="56.1" y="453" width="21.2" height="15.0" fill="rgb(251,30,2)" rx="2" ry="2" />
<text  x="59.13" y="463.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="171.3" y="1573" width="0.1" height="15.0" fill="rgb(230,129,18)" rx="2" ry="2" />
<text  x="174.32" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1381" width="0.3" height="15.0" fill="rgb(218,125,53)" rx="2" ry="2" />
<text  x="1189.98" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (188 samples, 0.98%)</title><rect x="160.6" y="1733" width="11.6" height="15.0" fill="rgb(214,30,12)" rx="2" ry="2" />
<text  x="163.59" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (3 samples, 0.02%)</title><rect x="166.5" y="1701" width="0.2" height="15.0" fill="rgb(243,168,35)" rx="2" ry="2" />
<text  x="169.51" y="1711.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (468 samples, 2.45%)</title><rect x="191.0" y="1957" width="28.9" height="15.0" fill="rgb(235,118,28)" rx="2" ry="2" />
<text  x="193.99" y="1967.5" >st..</text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (8 samples, 0.04%)</title><rect x="133.1" y="1685" width="0.5" height="15.0" fill="rgb(213,172,1)" rx="2" ry="2" />
<text  x="136.09" y="1695.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="315.8" y="1861" width="0.1" height="15.0" fill="rgb(243,173,32)" rx="2" ry="2" />
<text  x="318.81" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="219.1" y="1813" width="0.1" height="15.0" fill="rgb(205,188,3)" rx="2" ry="2" />
<text  x="222.05" y="1823.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="218.1" y="1701" width="0.2" height="15.0" fill="rgb(249,101,21)" rx="2" ry="2" />
<text  x="221.06" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1925" width="0.4" height="15.0" fill="rgb(225,21,54)" rx="2" ry="2" />
<text  x="1190.35" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1893" width="0.1" height="15.0" fill="rgb(223,36,20)" rx="2" ry="2" />
<text  x="192.51" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="88.1" y="1637" width="0.1" height="15.0" fill="rgb(249,134,46)" rx="2" ry="2" />
<text  x="91.07" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1557" width="0.1" height="15.0" fill="rgb(215,210,8)" rx="2" ry="2" />
<text  x="192.51" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (76 samples, 0.40%)</title><rect x="177.7" y="1749" width="4.7" height="15.0" fill="rgb(236,89,46)" rx="2" ry="2" />
<text  x="180.73" y="1759.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.01%)</title><rect x="727.3" y="1781" width="0.1" height="15.0" fill="rgb(232,63,10)" rx="2" ry="2" />
<text  x="730.25" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="837" width="0.1" height="15.0" fill="rgb(236,38,12)" rx="2" ry="2" />
<text  x="1190.72" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (87 samples, 0.45%)</title><rect x="166.7" y="1701" width="5.4" height="15.0" fill="rgb(251,38,1)" rx="2" ry="2" />
<text  x="169.70" y="1711.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="137.3" y="1557" width="0.2" height="15.0" fill="rgb(209,112,53)" rx="2" ry="2" />
<text  x="140.28" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1765" width="0.1" height="15.0" fill="rgb(210,27,44)" rx="2" ry="2" />
<text  x="58.88" y="1775.5" ></text>
</g>
<g >
<title>DetectCategory (252 samples, 1.32%)</title><rect x="523.7" y="1973" width="15.5" height="15.0" fill="rgb(223,119,35)" rx="2" ry="2" />
<text  x="526.69" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="485" width="0.3" height="15.0" fill="rgb(228,135,37)" rx="2" ry="2" />
<text  x="1190.41" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.03%)</title><rect x="180.9" y="1621" width="0.3" height="15.0" fill="rgb(222,202,15)" rx="2" ry="2" />
<text  x="183.88" y="1631.5" ></text>
</g>
<g >
<title>do_page_fault (6 samples, 0.03%)</title><rect x="651.3" y="1845" width="0.4" height="15.0" fill="rgb(234,112,53)" rx="2" ry="2" />
<text  x="654.34" y="1855.5" ></text>
</g>
<g >
<title>__do_munmap (5 samples, 0.03%)</title><rect x="763.9" y="1957" width="0.4" height="15.0" fill="rgb(232,130,47)" rx="2" ry="2" />
<text  x="766.94" y="1967.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (2,878 samples, 15.04%)</title><rect x="573.7" y="1909" width="177.5" height="15.0" fill="rgb(216,151,45)" rx="2" ry="2" />
<text  x="576.70" y="1919.5" >onmt::Tokenizer::tokenize</text>
</g>
<g >
<title>__do_page_fault (6 samples, 0.03%)</title><rect x="651.3" y="1829" width="0.4" height="15.0" fill="rgb(231,9,6)" rx="2" ry="2" />
<text  x="654.34" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="261" width="0.3" height="15.0" fill="rgb(230,191,11)" rx="2" ry="2" />
<text  x="1190.41" y="271.5" ></text>
</g>
<g >
<title>clear_page_erms (20 samples, 0.10%)</title><rect x="24.7" y="1925" width="1.3" height="15.0" fill="rgb(225,81,50)" rx="2" ry="2" />
<text  x="27.74" y="1935.5" ></text>
</g>
<g >
<title>get_page_from_freelist (6 samples, 0.03%)</title><rect x="942.4" y="1893" width="0.4" height="15.0" fill="rgb(237,2,28)" rx="2" ry="2" />
<text  x="945.41" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.02%)</title><rect x="188.4" y="1765" width="0.2" height="15.0" fill="rgb(249,30,12)" rx="2" ry="2" />
<text  x="191.40" y="1775.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 0.02%)</title><rect x="54.2" y="1925" width="0.2" height="15.0" fill="rgb(206,36,10)" rx="2" ry="2" />
<text  x="57.22" y="1935.5" ></text>
</g>
<g >
<title>do_page_fault (6 samples, 0.03%)</title><rect x="727.1" y="1861" width="0.4" height="15.0" fill="rgb(237,119,38)" rx="2" ry="2" />
<text  x="730.13" y="1871.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (3 samples, 0.02%)</title><rect x="732.6" y="1893" width="0.2" height="15.0" fill="rgb(240,228,26)" rx="2" ry="2" />
<text  x="735.62" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (472 samples, 2.47%)</title><rect x="160.4" y="1941" width="29.1" height="15.0" fill="rgb(240,23,24)" rx="2" ry="2" />
<text  x="163.41" y="1951.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="160.0" y="1157" width="0.2" height="15.0" fill="rgb(212,89,20)" rx="2" ry="2" />
<text  x="163.04" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.02%)</title><rect x="220.5" y="1973" width="0.2" height="15.0" fill="rgb(215,4,30)" rx="2" ry="2" />
<text  x="223.53" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="219.1" y="1797" width="0.1" height="15.0" fill="rgb(247,155,40)" rx="2" ry="2" />
<text  x="222.05" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1621" width="0.2" height="15.0" fill="rgb(214,109,50)" rx="2" ry="2" />
<text  x="223.28" y="1631.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::GetFromAllocator (2 samples, 0.01%)</title><rect x="1020.5" y="2053" width="0.1" height="15.0" fill="rgb(247,118,52)" rx="2" ry="2" />
<text  x="1023.48" y="2063.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (3 samples, 0.02%)</title><rect x="215.8" y="1669" width="0.2" height="15.0" fill="rgb(247,141,11)" rx="2" ry="2" />
<text  x="218.78" y="1679.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (25 samples, 0.13%)</title><rect x="944.4" y="1909" width="1.5" height="15.0" fill="rgb(250,21,12)" rx="2" ry="2" />
<text  x="947.38" y="1919.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (9 samples, 0.05%)</title><rect x="534.7" y="1909" width="0.5" height="15.0" fill="rgb(207,35,36)" rx="2" ry="2" />
<text  x="537.66" y="1919.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.02%)</title><rect x="1103.1" y="1845" width="0.2" height="15.0" fill="rgb(211,125,13)" rx="2" ry="2" />
<text  x="1106.11" y="1855.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.01%)</title><rect x="1103.8" y="1909" width="0.1" height="15.0" fill="rgb(254,55,35)" rx="2" ry="2" />
<text  x="1106.79" y="1919.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1925" width="0.3" height="15.0" fill="rgb(209,29,38)" rx="2" ry="2" />
<text  x="519.53" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="1877" width="0.4" height="15.0" fill="rgb(227,47,54)" rx="2" ry="2" />
<text  x="1189.92" y="1887.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (136 samples, 0.71%)</title><rect x="972.4" y="2053" width="8.4" height="15.0" fill="rgb(242,103,46)" rx="2" ry="2" />
<text  x="975.44" y="2063.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (3 samples, 0.02%)</title><rect x="499.4" y="1829" width="0.2" height="15.0" fill="rgb(213,129,52)" rx="2" ry="2" />
<text  x="502.39" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (2 samples, 0.01%)</title><rect x="159.2" y="1781" width="0.1" height="15.0" fill="rgb(224,8,51)" rx="2" ry="2" />
<text  x="162.17" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="213" width="0.3" height="15.0" fill="rgb(232,74,47)" rx="2" ry="2" />
<text  x="1190.04" y="223.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.03%)</title><rect x="160.8" y="1621" width="0.3" height="15.0" fill="rgb(232,90,1)" rx="2" ry="2" />
<text  x="163.78" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.86%)</title><rect x="56.1" y="933" width="22.0" height="15.0" fill="rgb(236,184,39)" rx="2" ry="2" />
<text  x="59.13" y="943.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (467 samples, 2.44%)</title><rect x="191.1" y="1941" width="28.8" height="15.0" fill="rgb(244,28,44)" rx="2" ry="2" />
<text  x="194.05" y="1951.5" >st..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1205" width="0.3" height="15.0" fill="rgb(251,184,45)" rx="2" ry="2" />
<text  x="1190.41" y="1215.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (193 samples, 1.01%)</title><rect x="29.9" y="2037" width="11.9" height="15.0" fill="rgb(244,225,26)" rx="2" ry="2" />
<text  x="32.92" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="219.2" y="1781" width="0.1" height="15.0" fill="rgb(234,180,40)" rx="2" ry="2" />
<text  x="222.17" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (5 samples, 0.03%)</title><rect x="83.1" y="1349" width="0.3" height="15.0" fill="rgb(241,166,3)" rx="2" ry="2" />
<text  x="86.08" y="1359.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::load (5 samples, 0.03%)</title><rect x="1103.6" y="2053" width="0.3" height="15.0" fill="rgb(229,79,36)" rx="2" ry="2" />
<text  x="1106.60" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1637" width="0.2" height="15.0" fill="rgb(243,220,9)" rx="2" ry="2" />
<text  x="162.97" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="69" width="0.3" height="15.0" fill="rgb(253,42,51)" rx="2" ry="2" />
<text  x="1190.04" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (89 samples, 0.47%)</title><rect x="201.4" y="1717" width="5.4" height="15.0" fill="rgb(236,228,35)" rx="2" ry="2" />
<text  x="204.35" y="1727.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="943.0" y="1877" width="0.1" height="15.0" fill="rgb(242,146,40)" rx="2" ry="2" />
<text  x="945.96" y="1887.5" ></text>
</g>
<g >
<title>__asan_memset (36 samples, 0.19%)</title><rect x="679.1" y="1861" width="2.2" height="15.0" fill="rgb(243,10,2)" rx="2" ry="2" />
<text  x="682.09" y="1871.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="203.9" y="1605" width="0.1" height="15.0" fill="rgb(254,211,12)" rx="2" ry="2" />
<text  x="206.88" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="725" width="0.1" height="15.0" fill="rgb(224,70,19)" rx="2" ry="2" />
<text  x="162.85" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1429" width="0.1" height="15.0" fill="rgb(244,143,9)" rx="2" ry="2" />
<text  x="1190.72" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="293" width="0.3" height="15.0" fill="rgb(243,170,45)" rx="2" ry="2" />
<text  x="1190.41" y="303.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,185 samples, 6.19%)</title><rect x="405.5" y="1957" width="73.1" height="15.0" fill="rgb(231,82,5)" rx="2" ry="2" />
<text  x="408.53" y="1967.5" >fasttext..</text>
</g>
<g >
<title>free_unref_page_list (2 samples, 0.01%)</title><rect x="1103.3" y="1845" width="0.1" height="15.0" fill="rgb(242,220,41)" rx="2" ry="2" />
<text  x="1106.30" y="1855.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.01%)</title><rect x="91.9" y="1733" width="0.1" height="15.0" fill="rgb(228,109,3)" rx="2" ry="2" />
<text  x="94.89" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (373 samples, 1.95%)</title><rect x="56.1" y="1157" width="23.0" height="15.0" fill="rgb(243,74,44)" rx="2" ry="2" />
<text  x="59.13" y="1167.5" >[..</text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="88.1" y="1541" width="0.1" height="15.0" fill="rgb(243,95,45)" rx="2" ry="2" />
<text  x="91.07" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="37" width="0.1" height="15.0" fill="rgb(221,82,44)" rx="2" ry="2" />
<text  x="1190.72" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="229" width="0.1" height="15.0" fill="rgb(228,117,15)" rx="2" ry="2" />
<text  x="1190.72" y="239.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (20 samples, 0.10%)</title><rect x="646.3" y="1877" width="1.2" height="15.0" fill="rgb(206,126,47)" rx="2" ry="2" />
<text  x="649.28" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (70 samples, 0.37%)</title><rect x="154.4" y="1781" width="4.3" height="15.0" fill="rgb(242,160,7)" rx="2" ry="2" />
<text  x="157.36" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="261" width="0.1" height="15.0" fill="rgb(233,150,10)" rx="2" ry="2" />
<text  x="1190.72" y="271.5" ></text>
</g>
<g >
<title>RunFasttextClf (244 samples, 1.28%)</title><rect x="523.7" y="1957" width="15.0" height="15.0" fill="rgb(250,99,54)" rx="2" ry="2" />
<text  x="526.69" y="1967.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (42 samples, 0.22%)</title><rect x="817.0" y="2005" width="2.6" height="15.0" fill="rgb(215,193,14)" rx="2" ry="2" />
<text  x="819.98" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1909" width="0.4" height="15.0" fill="rgb(240,146,23)" rx="2" ry="2" />
<text  x="1190.35" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (77 samples, 0.40%)</title><rect x="191.7" y="1701" width="4.7" height="15.0" fill="rgb(245,123,42)" rx="2" ry="2" />
<text  x="194.67" y="1711.5" ></text>
</g>
<g >
<title>page_fault (29 samples, 0.15%)</title><rect x="497.9" y="1925" width="1.8" height="15.0" fill="rgb(217,131,32)" rx="2" ry="2" />
<text  x="500.91" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (353 samples, 1.84%)</title><rect x="56.1" y="805" width="21.8" height="15.0" fill="rgb(239,180,42)" rx="2" ry="2" />
<text  x="59.13" y="815.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1477" width="0.2" height="15.0" fill="rgb(252,113,1)" rx="2" ry="2" />
<text  x="223.35" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1765" width="0.1" height="15.0" fill="rgb(253,157,14)" rx="2" ry="2" />
<text  x="192.51" y="1775.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="542.7" y="1893" width="0.2" height="15.0" fill="rgb(210,104,45)" rx="2" ry="2" />
<text  x="545.74" y="1903.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (2 samples, 0.01%)</title><rect x="516.7" y="1749" width="0.1" height="15.0" fill="rgb(252,90,40)" rx="2" ry="2" />
<text  x="519.66" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="661" width="0.3" height="15.0" fill="rgb(231,71,1)" rx="2" ry="2" />
<text  x="1190.04" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="188.6" y="1845" width="0.2" height="15.0" fill="rgb(210,82,33)" rx="2" ry="2" />
<text  x="191.65" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1717" width="0.1" height="15.0" fill="rgb(223,210,19)" rx="2" ry="2" />
<text  x="192.51" y="1727.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (7 samples, 0.04%)</title><rect x="692.8" y="1749" width="0.5" height="15.0" fill="rgb(218,94,10)" rx="2" ry="2" />
<text  x="695.84" y="1759.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (486 samples, 2.54%)</title><rect x="190.8" y="1989" width="30.0" height="15.0" fill="rgb(246,218,4)" rx="2" ry="2" />
<text  x="193.81" y="1999.5" >TA..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="218.4" y="1829" width="0.2" height="15.0" fill="rgb(220,225,41)" rx="2" ry="2" />
<text  x="221.43" y="1839.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="509.9" y="1861" width="0.2" height="15.0" fill="rgb(247,161,9)" rx="2" ry="2" />
<text  x="512.94" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_Scanner (2 samples, 0.01%)</title><rect x="219.7" y="1925" width="0.1" height="15.0" fill="rgb(218,127,38)" rx="2" ry="2" />
<text  x="222.67" y="1935.5" ></text>
</g>
<g >
<title>release_pages (3 samples, 0.02%)</title><rect x="764.1" y="1845" width="0.2" height="15.0" fill="rgb(213,163,49)" rx="2" ry="2" />
<text  x="767.07" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (336 samples, 1.76%)</title><rect x="56.1" y="181" width="20.7" height="15.0" fill="rgb(237,137,40)" rx="2" ry="2" />
<text  x="59.13" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (2 samples, 0.01%)</title><rect x="735.1" y="1893" width="0.2" height="15.0" fill="rgb(215,60,53)" rx="2" ry="2" />
<text  x="738.14" y="1903.5" ></text>
</g>
<g >
<title>generic_file_read_iter (3 samples, 0.02%)</title><rect x="1111.1" y="1893" width="0.2" height="15.0" fill="rgb(228,137,5)" rx="2" ry="2" />
<text  x="1114.13" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="741" width="0.1" height="15.0" fill="rgb(233,155,43)" rx="2" ry="2" />
<text  x="1190.72" y="751.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="217.3" y="1669" width="0.1" height="15.0" fill="rgb(251,94,27)" rx="2" ry="2" />
<text  x="220.32" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1477" width="0.1" height="15.0" fill="rgb(249,131,30)" rx="2" ry="2" />
<text  x="162.85" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1637" width="0.1" height="15.0" fill="rgb(206,23,54)" rx="2" ry="2" />
<text  x="1190.72" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="2005" width="0.1" height="15.0" fill="rgb(248,192,5)" rx="2" ry="2" />
<text  x="1190.72" y="2015.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="88.7" y="1685" width="0.2" height="15.0" fill="rgb(249,185,23)" rx="2" ry="2" />
<text  x="91.75" y="1695.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.02%)</title><rect x="91.8" y="1877" width="0.2" height="15.0" fill="rgb(213,178,3)" rx="2" ry="2" />
<text  x="94.83" y="1887.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="1189.8" y="2037" width="0.1" height="15.0" fill="rgb(208,87,52)" rx="2" ry="2" />
<text  x="1192.75" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.86%)</title><rect x="56.1" y="917" width="22.0" height="15.0" fill="rgb(224,121,0)" rx="2" ry="2" />
<text  x="59.13" y="927.5" >[..</text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (144 samples, 0.75%)</title><rect x="481.8" y="1941" width="8.8" height="15.0" fill="rgb(242,34,34)" rx="2" ry="2" />
<text  x="484.75" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.01%)</title><rect x="878.0" y="2021" width="0.1" height="15.0" fill="rgb(216,68,3)" rx="2" ry="2" />
<text  x="880.96" y="2031.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="87.1" y="1493" width="0.2" height="15.0" fill="rgb(244,212,53)" rx="2" ry="2" />
<text  x="90.15" y="1503.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (4 samples, 0.02%)</title><rect x="764.6" y="2037" width="0.3" height="15.0" fill="rgb(253,205,18)" rx="2" ry="2" />
<text  x="767.62" y="2047.5" ></text>
</g>
<g >
<title>TDocument::TDocument (7 samples, 0.04%)</title><rect x="752.6" y="1973" width="0.4" height="15.0" fill="rgb(240,162,36)" rx="2" ry="2" />
<text  x="755.60" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (91 samples, 0.48%)</title><rect x="207.4" y="1669" width="5.6" height="15.0" fill="rgb(212,16,48)" rx="2" ry="2" />
<text  x="210.40" y="1679.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (16 samples, 0.08%)</title><rect x="815.4" y="2005" width="1.0" height="15.0" fill="rgb(253,92,37)" rx="2" ry="2" />
<text  x="818.43" y="2015.5" ></text>
</g>
<g >
<title>handle_mm_fault (81 samples, 0.42%)</title><rect x="940.9" y="1989" width="5.0" height="15.0" fill="rgb(220,10,12)" rx="2" ry="2" />
<text  x="943.93" y="1999.5" ></text>
</g>
<g >
<title>memcpy@plt (5 samples, 0.03%)</title><rect x="1110.3" y="2053" width="0.3" height="15.0" fill="rgb(228,65,14)" rx="2" ry="2" />
<text  x="1113.26" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (79 samples, 0.41%)</title><rect x="149.4" y="1765" width="4.8" height="15.0" fill="rgb(221,92,54)" rx="2" ry="2" />
<text  x="152.37" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (553 samples, 2.89%)</title><rect x="56.1" y="1781" width="34.1" height="15.0" fill="rgb(251,96,54)" rx="2" ry="2" />
<text  x="59.07" y="1791.5" >[u..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="86.9" y="1509" width="0.1" height="15.0" fill="rgb(232,155,18)" rx="2" ry="2" />
<text  x="89.90" y="1519.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="140.6" y="1589" width="0.1" height="15.0" fill="rgb(240,54,41)" rx="2" ry="2" />
<text  x="143.61" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="773" width="0.1" height="15.0" fill="rgb(211,35,49)" rx="2" ry="2" />
<text  x="1190.72" y="783.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="185.7" y="1653" width="0.2" height="15.0" fill="rgb(249,193,37)" rx="2" ry="2" />
<text  x="188.69" y="1663.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="166.2" y="1573" width="0.2" height="15.0" fill="rgb(226,52,45)" rx="2" ry="2" />
<text  x="169.20" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="69" width="0.1" height="15.0" fill="rgb(225,78,33)" rx="2" ry="2" />
<text  x="1190.72" y="79.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="81.0" y="1237" width="0.2" height="15.0" fill="rgb(238,98,10)" rx="2" ry="2" />
<text  x="83.98" y="1247.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="567.3" y="1925" width="0.2" height="15.0" fill="rgb(212,46,41)" rx="2" ry="2" />
<text  x="570.29" y="1935.5" ></text>
</g>
<g >
<title>onmt::add_final_token&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (48 samples, 0.25%)</title><rect x="570.5" y="1893" width="3.0" height="15.0" fill="rgb(226,201,19)" rx="2" ry="2" />
<text  x="573.49" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1141" width="0.2" height="15.0" fill="rgb(248,122,53)" rx="2" ry="2" />
<text  x="163.04" y="1151.5" ></text>
</g>
<g >
<title>__do_page_fault (12 samples, 0.06%)</title><rect x="646.8" y="1829" width="0.7" height="15.0" fill="rgb(236,113,51)" rx="2" ry="2" />
<text  x="649.77" y="1839.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (4 samples, 0.02%)</title><rect x="26.6" y="1909" width="0.2" height="15.0" fill="rgb(246,193,37)" rx="2" ry="2" />
<text  x="29.59" y="1919.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.02%)</title><rect x="1017.8" y="2037" width="0.2" height="15.0" fill="rgb(249,24,7)" rx="2" ry="2" />
<text  x="1020.83" y="2047.5" ></text>
</g>
<g >
<title>__interceptor_strcmp (80 samples, 0.42%)</title><rect x="36.4" y="2021" width="4.9" height="15.0" fill="rgb(212,125,26)" rx="2" ry="2" />
<text  x="39.39" y="2031.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (8 samples, 0.04%)</title><rect x="587.6" y="1877" width="0.5" height="15.0" fill="rgb(220,125,3)" rx="2" ry="2" />
<text  x="590.57" y="1887.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (2 samples, 0.01%)</title><rect x="565.9" y="1877" width="0.2" height="15.0" fill="rgb(233,136,13)" rx="2" ry="2" />
<text  x="568.93" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (77 samples, 0.40%)</title><rect x="191.7" y="1637" width="4.7" height="15.0" fill="rgb(232,25,23)" rx="2" ry="2" />
<text  x="194.67" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="1589" width="0.4" height="15.0" fill="rgb(213,69,54)" rx="2" ry="2" />
<text  x="1189.92" y="1599.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="514.4" y="1973" width="0.2" height="15.0" fill="rgb(254,107,46)" rx="2" ry="2" />
<text  x="517.38" y="1983.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (4 samples, 0.02%)</title><rect x="26.6" y="1925" width="0.2" height="15.0" fill="rgb(206,155,1)" rx="2" ry="2" />
<text  x="29.59" y="1935.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::addcode (576 samples, 3.01%)</title><rect x="767.8" y="2037" width="35.5" height="15.0" fill="rgb(237,106,29)" rx="2" ry="2" />
<text  x="770.77" y="2047.5" >fas..</text>
</g>
<g >
<title>fasttext::Loss::predict (6 samples, 0.03%)</title><rect x="1103.9" y="2053" width="0.4" height="15.0" fill="rgb(245,16,19)" rx="2" ry="2" />
<text  x="1106.91" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="220.0" y="1829" width="0.5" height="15.0" fill="rgb(222,206,28)" rx="2" ry="2" />
<text  x="222.98" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1445" width="0.3" height="15.0" fill="rgb(222,208,43)" rx="2" ry="2" />
<text  x="1190.41" y="1455.5" ></text>
</g>
<g >
<title>[unknown] (367 samples, 1.92%)</title><rect x="56.1" y="1125" width="22.7" height="15.0" fill="rgb(234,89,22)" rx="2" ry="2" />
<text  x="59.13" y="1135.5" >[..</text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="194.9" y="1557" width="0.2" height="15.0" fill="rgb(245,186,42)" rx="2" ry="2" />
<text  x="197.94" y="1567.5" ></text>
</g>
<g >
<title>__do_page_fault (32 samples, 0.17%)</title><rect x="691.3" y="1813" width="2.0" height="15.0" fill="rgb(216,5,51)" rx="2" ry="2" />
<text  x="694.30" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (537 samples, 2.81%)</title><rect x="56.1" y="1717" width="33.1" height="15.0" fill="rgb(227,173,44)" rx="2" ry="2" />
<text  x="59.07" y="1727.5" >[u..</text>
</g>
<g >
<title>try_charge (4 samples, 0.02%)</title><rect x="944.1" y="1893" width="0.2" height="15.0" fill="rgb(243,80,3)" rx="2" ry="2" />
<text  x="947.07" y="1903.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="146.8" y="1605" width="0.1" height="15.0" fill="rgb(217,182,7)" rx="2" ry="2" />
<text  x="149.78" y="1615.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (7 samples, 0.04%)</title><rect x="994.6" y="2053" width="0.5" height="15.0" fill="rgb(215,118,51)" rx="2" ry="2" />
<text  x="997.64" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="805" width="0.3" height="15.0" fill="rgb(221,183,27)" rx="2" ry="2" />
<text  x="1190.41" y="815.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="124.4" y="1893" width="0.1" height="15.0" fill="rgb(241,190,5)" rx="2" ry="2" />
<text  x="127.39" y="1903.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (4 samples, 0.02%)</title><rect x="1122.8" y="2037" width="0.2" height="15.0" fill="rgb(226,225,11)" rx="2" ry="2" />
<text  x="1125.78" y="2047.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="647.3" y="1749" width="0.1" height="15.0" fill="rgb(230,61,4)" rx="2" ry="2" />
<text  x="650.27" y="1759.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (242 samples, 1.26%)</title><rect x="735.3" y="1893" width="14.9" height="15.0" fill="rgb(223,17,32)" rx="2" ry="2" />
<text  x="738.27" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="725" width="0.3" height="15.0" fill="rgb(243,49,25)" rx="2" ry="2" />
<text  x="1190.41" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1989" width="0.4" height="15.0" fill="rgb(223,181,19)" rx="2" ry="2" />
<text  x="1190.35" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1445" width="0.2" height="15.0" fill="rgb(213,191,36)" rx="2" ry="2" />
<text  x="223.35" y="1455.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Refill (2 samples, 0.01%)</title><rect x="1022.3" y="2053" width="0.1" height="15.0" fill="rgb(253,58,26)" rx="2" ry="2" />
<text  x="1025.27" y="2063.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (2 samples, 0.01%)</title><rect x="764.3" y="2037" width="0.1" height="15.0" fill="rgb(250,195,8)" rx="2" ry="2" />
<text  x="767.31" y="2047.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (3 samples, 0.02%)</title><rect x="55.5" y="1765" width="0.2" height="15.0" fill="rgb(221,24,24)" rx="2" ry="2" />
<text  x="58.51" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (8 samples, 0.04%)</title><rect x="880.3" y="2021" width="0.5" height="15.0" fill="rgb(228,58,39)" rx="2" ry="2" />
<text  x="883.31" y="2031.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="159.6" y="1941" width="0.1" height="15.0" fill="rgb(242,80,48)" rx="2" ry="2" />
<text  x="162.60" y="1951.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="207.2" y="1669" width="0.2" height="15.0" fill="rgb(206,69,42)" rx="2" ry="2" />
<text  x="210.21" y="1679.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::finalize_tokens (78 samples, 0.41%)</title><rect x="568.9" y="1909" width="4.8" height="15.0" fill="rgb(213,34,9)" rx="2" ry="2" />
<text  x="571.89" y="1919.5" ></text>
</g>
<g >
<title>native_write_msr (3 samples, 0.02%)</title><rect x="55.5" y="1749" width="0.2" height="15.0" fill="rgb(249,195,28)" rx="2" ry="2" />
<text  x="58.51" y="1759.5" ></text>
</g>
<g >
<title>unmap_page_range (3 samples, 0.02%)</title><rect x="1102.1" y="1861" width="0.2" height="15.0" fill="rgb(235,161,11)" rx="2" ry="2" />
<text  x="1105.12" y="1871.5" ></text>
</g>
<g >
<title>fasttext::FastText::loadModel (9 samples, 0.05%)</title><rect x="514.6" y="1989" width="0.5" height="15.0" fill="rgb(238,147,16)" rx="2" ry="2" />
<text  x="517.56" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1461" width="0.3" height="15.0" fill="rgb(210,34,41)" rx="2" ry="2" />
<text  x="1189.98" y="1471.5" ></text>
</g>
<g >
<title>std::__move_merge&lt;TDocument*, __gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (3 samples, 0.02%)</title><rect x="517.2" y="1973" width="0.1" height="15.0" fill="rgb(238,12,39)" rx="2" ry="2" />
<text  x="520.15" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1781" width="0.1" height="15.0" fill="rgb(224,72,41)" rx="2" ry="2" />
<text  x="58.88" y="1791.5" ></text>
</g>
<g >
<title>fasttext::NegativeSamplingLoss::NegativeSamplingLoss (9 samples, 0.05%)</title><rect x="514.6" y="1957" width="0.5" height="15.0" fill="rgb(234,137,51)" rx="2" ry="2" />
<text  x="517.56" y="1967.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.02%)</title><rect x="194.8" y="1557" width="0.1" height="15.0" fill="rgb(216,155,22)" rx="2" ry="2" />
<text  x="197.75" y="1567.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::_M_transform@plt (3 samples, 0.02%)</title><rect x="1151.1" y="2053" width="0.2" height="15.0" fill="rgb(254,14,16)" rx="2" ry="2" />
<text  x="1154.09" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (13 samples, 0.07%)</title><rect x="160.6" y="1669" width="0.8" height="15.0" fill="rgb(242,173,33)" rx="2" ry="2" />
<text  x="163.59" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.0" y="1493" width="0.2" height="15.0" fill="rgb(244,111,23)" rx="2" ry="2" />
<text  x="223.04" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (10 samples, 0.05%)</title><rect x="874.3" y="2021" width="0.6" height="15.0" fill="rgb(233,169,2)" rx="2" ry="2" />
<text  x="877.26" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1285" width="0.1" height="15.0" fill="rgb(224,159,53)" rx="2" ry="2" />
<text  x="1190.72" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.4" y="1013" width="0.1" height="15.0" fill="rgb(212,198,40)" rx="2" ry="2" />
<text  x="223.41" y="1023.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.01%)</title><rect x="1102.0" y="1829" width="0.1" height="15.0" fill="rgb(206,167,26)" rx="2" ry="2" />
<text  x="1105.00" y="1839.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="166.9" y="1605" width="0.2" height="15.0" fill="rgb(219,111,6)" rx="2" ry="2" />
<text  x="169.94" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1765" width="0.1" height="15.0" fill="rgb(247,36,28)" rx="2" ry="2" />
<text  x="1190.72" y="1775.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10 samples, 0.05%)</title><rect x="943.7" y="1925" width="0.6" height="15.0" fill="rgb(239,137,41)" rx="2" ry="2" />
<text  x="946.70" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (75 samples, 0.39%)</title><rect x="133.6" y="1653" width="4.6" height="15.0" fill="rgb(237,131,47)" rx="2" ry="2" />
<text  x="136.58" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1813" width="0.1" height="15.0" fill="rgb(212,153,3)" rx="2" ry="2" />
<text  x="192.51" y="1823.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="187.2" y="1653" width="0.5" height="15.0" fill="rgb(248,61,20)" rx="2" ry="2" />
<text  x="190.23" y="1663.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="157.1" y="1669" width="0.2" height="15.0" fill="rgb(210,160,45)" rx="2" ry="2" />
<text  x="160.14" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="565" width="0.1" height="15.0" fill="rgb(213,107,23)" rx="2" ry="2" />
<text  x="162.85" y="575.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.03%)</title><rect x="194.3" y="1557" width="0.3" height="15.0" fill="rgb(230,188,17)" rx="2" ry="2" />
<text  x="197.26" y="1567.5" ></text>
</g>
<g >
<title>__pthread_getspecific (50 samples, 0.26%)</title><rect x="1172.8" y="2037" width="3.1" height="15.0" fill="rgb(237,140,32)" rx="2" ry="2" />
<text  x="1175.79" y="2047.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="86.9" y="1493" width="0.1" height="15.0" fill="rgb(207,203,7)" rx="2" ry="2" />
<text  x="89.90" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1187.5" y="101" width="0.2" height="15.0" fill="rgb(212,30,31)" rx="2" ry="2" />
<text  x="1190.47" y="111.5" ></text>
</g>
<g >
<title>[unknown] (30 samples, 0.16%)</title><rect x="878.4" y="2021" width="1.8" height="15.0" fill="rgb(211,18,37)" rx="2" ry="2" />
<text  x="881.40" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (7 samples, 0.04%)</title><rect x="43.3" y="2005" width="0.4" height="15.0" fill="rgb(245,1,25)" rx="2" ry="2" />
<text  x="46.30" y="2015.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (863 samples, 4.51%)</title><rect x="820.9" y="2037" width="53.2" height="15.0" fill="rgb(222,30,20)" rx="2" ry="2" />
<text  x="823.92" y="2047.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="981" width="0.3" height="15.0" fill="rgb(207,228,41)" rx="2" ry="2" />
<text  x="1190.41" y="991.5" ></text>
</g>
<g >
<title>__asan_memset (2 samples, 0.01%)</title><rect x="405.4" y="1957" width="0.1" height="15.0" fill="rgb(227,208,8)" rx="2" ry="2" />
<text  x="408.41" y="1967.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (15 samples, 0.08%)</title><rect x="1101.9" y="2005" width="0.9" height="15.0" fill="rgb(230,31,29)" rx="2" ry="2" />
<text  x="1104.88" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.4" y="1989" width="0.4" height="15.0" fill="rgb(237,20,43)" rx="2" ry="2" />
<text  x="518.42" y="1999.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="87.1" y="1525" width="0.2" height="15.0" fill="rgb(224,52,33)" rx="2" ry="2" />
<text  x="90.15" y="1535.5" ></text>
</g>
<g >
<title>__sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (2 samples, 0.01%)</title><rect x="754.4" y="2037" width="0.2" height="15.0" fill="rgb(234,65,23)" rx="2" ry="2" />
<text  x="757.45" y="2047.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.02%)</title><rect x="146.3" y="1605" width="0.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="149.35" y="1615.5" ></text>
</g>
<g >
<title>fasttext::FastText::predictLine (432 samples, 2.26%)</title><rect x="539.5" y="1941" width="26.6" height="15.0" fill="rgb(213,36,18)" rx="2" ry="2" />
<text  x="542.47" y="1951.5" >f..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="160.0" y="1733" width="0.2" height="15.0" fill="rgb(206,142,6)" rx="2" ry="2" />
<text  x="162.97" y="1743.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="174.0" y="1589" width="0.2" height="15.0" fill="rgb(211,43,36)" rx="2" ry="2" />
<text  x="177.03" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1365" width="0.2" height="15.0" fill="rgb(207,192,43)" rx="2" ry="2" />
<text  x="223.35" y="1375.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (7 samples, 0.04%)</title><rect x="191.2" y="1653" width="0.5" height="15.0" fill="rgb(205,193,7)" rx="2" ry="2" />
<text  x="194.24" y="1663.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="84.1" y="1381" width="0.2" height="15.0" fill="rgb(233,35,23)" rx="2" ry="2" />
<text  x="87.06" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="165" width="0.1" height="15.0" fill="rgb(236,177,18)" rx="2" ry="2" />
<text  x="1190.72" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (76 samples, 0.40%)</title><rect x="196.5" y="1669" width="4.7" height="15.0" fill="rgb(234,147,3)" rx="2" ry="2" />
<text  x="199.48" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1301" width="0.3" height="15.0" fill="rgb(247,168,48)" rx="2" ry="2" />
<text  x="1189.98" y="1311.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::push_back (4 samples, 0.02%)</title><rect x="876.9" y="2037" width="0.2" height="15.0" fill="rgb(205,197,26)" rx="2" ry="2" />
<text  x="879.85" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1187.5" y="85" width="0.2" height="15.0" fill="rgb(238,23,0)" rx="2" ry="2" />
<text  x="1190.47" y="95.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 0.02%)</title><rect x="761.2" y="1941" width="0.2" height="15.0" fill="rgb(250,203,48)" rx="2" ry="2" />
<text  x="764.23" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="536.3" y="1909" width="0.2" height="15.0" fill="rgb(225,120,31)" rx="2" ry="2" />
<text  x="539.33" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1061" width="0.3" height="15.0" fill="rgb(207,93,22)" rx="2" ry="2" />
<text  x="1190.41" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1541" width="0.3" height="15.0" fill="rgb(222,8,48)" rx="2" ry="2" />
<text  x="1189.98" y="1551.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (190 samples, 0.99%)</title><rect x="696.1" y="1861" width="11.7" height="15.0" fill="rgb(248,89,12)" rx="2" ry="2" />
<text  x="699.11" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (78 samples, 0.41%)</title><rect x="213.6" y="1797" width="4.8" height="15.0" fill="rgb(238,84,28)" rx="2" ry="2" />
<text  x="216.62" y="1807.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="164.0" y="1541" width="0.2" height="15.0" fill="rgb(205,118,48)" rx="2" ry="2" />
<text  x="167.04" y="1551.5" ></text>
</g>
<g >
<title>onmt::unicode::get_lower (8 samples, 0.04%)</title><rect x="614.8" y="1877" width="0.5" height="15.0" fill="rgb(253,7,25)" rx="2" ry="2" />
<text  x="617.77" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1573" width="0.2" height="15.0" fill="rgb(250,58,10)" rx="2" ry="2" />
<text  x="223.04" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1269" width="0.3" height="15.0" fill="rgb(230,169,5)" rx="2" ry="2" />
<text  x="1190.41" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1349" width="0.1" height="15.0" fill="rgb(242,27,33)" rx="2" ry="2" />
<text  x="162.85" y="1359.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.02%)</title><rect x="677.2" y="1749" width="0.2" height="15.0" fill="rgb(226,109,24)" rx="2" ry="2" />
<text  x="680.18" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="869" width="0.3" height="15.0" fill="rgb(230,15,54)" rx="2" ry="2" />
<text  x="1189.98" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (3 samples, 0.02%)</title><rect x="182.4" y="1765" width="0.2" height="15.0" fill="rgb(209,118,44)" rx="2" ry="2" />
<text  x="185.42" y="1775.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (7 samples, 0.04%)</title><rect x="1103.0" y="2021" width="0.4" height="15.0" fill="rgb(213,36,24)" rx="2" ry="2" />
<text  x="1105.99" y="2031.5" ></text>
</g>
<g >
<title>alloc_pages_vma (11 samples, 0.06%)</title><rect x="692.0" y="1765" width="0.7" height="15.0" fill="rgb(251,72,54)" rx="2" ry="2" />
<text  x="695.04" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (9 samples, 0.05%)</title><rect x="188.9" y="1877" width="0.6" height="15.0" fill="rgb(206,225,16)" rx="2" ry="2" />
<text  x="191.90" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (58 samples, 0.30%)</title><rect x="126.6" y="1925" width="3.6" height="15.0" fill="rgb(239,133,50)" rx="2" ry="2" />
<text  x="129.61" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Lock (7 samples, 0.04%)</title><rect x="753.5" y="2037" width="0.4" height="15.0" fill="rgb(234,84,41)" rx="2" ry="2" />
<text  x="756.46" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="821" width="0.3" height="15.0" fill="rgb(221,211,10)" rx="2" ry="2" />
<text  x="1190.41" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (80 samples, 0.42%)</title><rect x="144.2" y="1685" width="5.0" height="15.0" fill="rgb(205,119,17)" rx="2" ry="2" />
<text  x="147.25" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="218.5" y="1781" width="0.1" height="15.0" fill="rgb(230,59,17)" rx="2" ry="2" />
<text  x="221.50" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (75 samples, 0.39%)</title><rect x="177.8" y="1733" width="4.6" height="15.0" fill="rgb(232,141,28)" rx="2" ry="2" />
<text  x="180.80" y="1743.5" ></text>
</g>
<g >
<title>do_page_fault (33 samples, 0.17%)</title><rect x="53.8" y="2005" width="2.0" height="15.0" fill="rgb(213,157,26)" rx="2" ry="2" />
<text  x="56.78" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1253" width="0.3" height="15.0" fill="rgb(231,21,22)" rx="2" ry="2" />
<text  x="1190.41" y="1263.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (6 samples, 0.03%)</title><rect x="94.5" y="2021" width="0.4" height="15.0" fill="rgb(219,181,16)" rx="2" ry="2" />
<text  x="97.55" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (467 samples, 2.44%)</title><rect x="56.1" y="1429" width="28.8" height="15.0" fill="rgb(230,53,38)" rx="2" ry="2" />
<text  x="59.07" y="1439.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="229" width="0.3" height="15.0" fill="rgb(223,58,25)" rx="2" ry="2" />
<text  x="1190.04" y="239.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (2 samples, 0.01%)</title><rect x="131.7" y="1893" width="0.1" height="15.0" fill="rgb(231,14,47)" rx="2" ry="2" />
<text  x="134.67" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="219.9" y="1941" width="0.6" height="15.0" fill="rgb(253,161,50)" rx="2" ry="2" />
<text  x="222.91" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (334 samples, 1.75%)</title><rect x="56.1" y="85" width="20.6" height="15.0" fill="rgb(219,32,23)" rx="2" ry="2" />
<text  x="59.13" y="95.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.4" y="1925" width="0.4" height="15.0" fill="rgb(238,2,52)" rx="2" ry="2" />
<text  x="518.42" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="159.7" y="1925" width="0.5" height="15.0" fill="rgb(225,33,28)" rx="2" ry="2" />
<text  x="162.73" y="1935.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (2 samples, 0.01%)</title><rect x="184.9" y="1653" width="0.2" height="15.0" fill="rgb(246,180,26)" rx="2" ry="2" />
<text  x="187.95" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (560 samples, 2.93%)</title><rect x="56.1" y="1845" width="34.5" height="15.0" fill="rgb(216,45,46)" rx="2" ry="2" />
<text  x="59.07" y="1855.5" >[u..</text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="764.4" y="2021" width="0.2" height="15.0" fill="rgb(221,228,33)" rx="2" ry="2" />
<text  x="767.44" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="965" width="0.3" height="15.0" fill="rgb(246,121,36)" rx="2" ry="2" />
<text  x="1190.41" y="975.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (57 samples, 0.30%)</title><rect x="32.9" y="2021" width="3.5" height="15.0" fill="rgb(245,72,18)" rx="2" ry="2" />
<text  x="35.88" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="159.9" y="1749" width="0.3" height="15.0" fill="rgb(210,166,12)" rx="2" ry="2" />
<text  x="162.85" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="869" width="0.1" height="15.0" fill="rgb(249,208,54)" rx="2" ry="2" />
<text  x="162.85" y="879.5" ></text>
</g>
<g >
<title>exit_mmap (7 samples, 0.04%)</title><rect x="1103.0" y="1957" width="0.4" height="15.0" fill="rgb(228,10,19)" rx="2" ry="2" />
<text  x="1105.99" y="1967.5" ></text>
</g>
<g >
<title>[libOpenNMTTokenizer.so] (2 samples, 0.01%)</title><rect x="646.2" y="1877" width="0.1" height="15.0" fill="rgb(237,87,6)" rx="2" ry="2" />
<text  x="649.16" y="1887.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="570.1" y="1893" width="0.1" height="15.0" fill="rgb(218,150,19)" rx="2" ry="2" />
<text  x="573.06" y="1903.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.01%)</title><rect x="54.2" y="1909" width="0.1" height="15.0" fill="rgb(246,172,20)" rx="2" ry="2" />
<text  x="57.22" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (400 samples, 2.09%)</title><rect x="56.1" y="1237" width="24.7" height="15.0" fill="rgb(226,185,30)" rx="2" ry="2" />
<text  x="59.13" y="1247.5" >[..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="132.4" y="1941" width="0.1" height="15.0" fill="rgb(242,224,14)" rx="2" ry="2" />
<text  x="135.41" y="1951.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (9 samples, 0.05%)</title><rect x="1000.7" y="2053" width="0.5" height="15.0" fill="rgb(245,101,36)" rx="2" ry="2" />
<text  x="1003.68" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="677" width="0.3" height="15.0" fill="rgb(243,107,52)" rx="2" ry="2" />
<text  x="1190.04" y="687.5" ></text>
</g>
<g >
<title>[unknown] (502 samples, 2.62%)</title><rect x="56.1" y="1557" width="30.9" height="15.0" fill="rgb(246,107,19)" rx="2" ry="2" />
<text  x="59.07" y="1567.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (470 samples, 2.46%)</title><rect x="160.5" y="1909" width="29.0" height="15.0" fill="rgb(232,190,19)" rx="2" ry="2" />
<text  x="163.47" y="1919.5" >st..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="146.5" y="1605" width="0.3" height="15.0" fill="rgb(205,44,9)" rx="2" ry="2" />
<text  x="149.53" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1765" width="0.4" height="15.0" fill="rgb(246,56,10)" rx="2" ry="2" />
<text  x="1189.92" y="1775.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="681.3" y="1861" width="0.1" height="15.0" fill="rgb(228,161,26)" rx="2" ry="2" />
<text  x="684.31" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1749" width="0.1" height="15.0" fill="rgb(226,15,30)" rx="2" ry="2" />
<text  x="1190.72" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1157" width="0.3" height="15.0" fill="rgb(211,211,26)" rx="2" ry="2" />
<text  x="1190.41" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (2 samples, 0.01%)</title><rect x="219.7" y="1909" width="0.1" height="15.0" fill="rgb(231,36,1)" rx="2" ry="2" />
<text  x="222.67" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1813" width="0.1" height="15.0" fill="rgb(249,191,24)" rx="2" ry="2" />
<text  x="58.88" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="917" width="0.3" height="15.0" fill="rgb(225,219,15)" rx="2" ry="2" />
<text  x="1189.98" y="927.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="79.9" y="1173" width="0.2" height="15.0" fill="rgb(250,38,47)" rx="2" ry="2" />
<text  x="82.93" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (429 samples, 2.24%)</title><rect x="133.1" y="1925" width="26.4" height="15.0" fill="rgb(228,145,21)" rx="2" ry="2" />
<text  x="136.09" y="1935.5" >s..</text>
</g>
<g >
<title>onmt::Tokenizer::tokenize_text (1,652 samples, 8.63%)</title><rect x="630.3" y="1893" width="101.9" height="15.0" fill="rgb(224,162,51)" rx="2" ry="2" />
<text  x="633.31" y="1903.5" >onmt::Tokeni..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (103 samples, 0.54%)</title><rect x="207.0" y="1717" width="6.3" height="15.0" fill="rgb(250,22,16)" rx="2" ry="2" />
<text  x="209.96" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="197" width="0.3" height="15.0" fill="rgb(242,222,20)" rx="2" ry="2" />
<text  x="1190.41" y="207.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="199.9" y="1589" width="0.1" height="15.0" fill="rgb(213,216,0)" rx="2" ry="2" />
<text  x="202.87" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (367 samples, 1.92%)</title><rect x="1127.1" y="2053" width="22.6" height="15.0" fill="rgb(226,122,1)" rx="2" ry="2" />
<text  x="1130.10" y="2063.5" >s..</text>
</g>
<g >
<title>onmt::unicode::is_separator@plt (2 samples, 0.01%)</title><rect x="733.4" y="1893" width="0.1" height="15.0" fill="rgb(209,219,54)" rx="2" ry="2" />
<text  x="736.36" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1669" width="0.2" height="15.0" fill="rgb(229,54,12)" rx="2" ry="2" />
<text  x="162.97" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="117" width="0.3" height="15.0" fill="rgb(226,194,25)" rx="2" ry="2" />
<text  x="1190.04" y="127.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="761.1" y="1909" width="0.1" height="15.0" fill="rgb(252,14,49)" rx="2" ry="2" />
<text  x="764.11" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1221" width="0.3" height="15.0" fill="rgb(213,140,45)" rx="2" ry="2" />
<text  x="1190.41" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1861" width="0.1" height="15.0" fill="rgb(211,227,40)" rx="2" ry="2" />
<text  x="1190.72" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="645" width="0.3" height="15.0" fill="rgb(236,125,23)" rx="2" ry="2" />
<text  x="1190.41" y="655.5" ></text>
</g>
<g >
<title>get_page_from_freelist (4 samples, 0.02%)</title><rect x="692.4" y="1733" width="0.3" height="15.0" fill="rgb(212,114,8)" rx="2" ry="2" />
<text  x="695.41" y="1743.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="1103.8" y="1925" width="0.1" height="15.0" fill="rgb(237,47,19)" rx="2" ry="2" />
<text  x="1106.79" y="1935.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (11 samples, 0.06%)</title><rect x="942.2" y="1909" width="0.6" height="15.0" fill="rgb(226,198,12)" rx="2" ry="2" />
<text  x="945.16" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1733" width="0.1" height="15.0" fill="rgb(221,22,41)" rx="2" ry="2" />
<text  x="192.51" y="1743.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (2 samples, 0.01%)</title><rect x="217.1" y="1669" width="0.1" height="15.0" fill="rgb(235,39,53)" rx="2" ry="2" />
<text  x="220.08" y="1679.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (6 samples, 0.03%)</title><rect x="55.3" y="1877" width="0.4" height="15.0" fill="rgb(228,11,24)" rx="2" ry="2" />
<text  x="58.33" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (2 samples, 0.01%)</title><rect x="124.5" y="1941" width="0.1" height="15.0" fill="rgb(237,38,23)" rx="2" ry="2" />
<text  x="127.52" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (517 samples, 2.70%)</title><rect x="56.1" y="1637" width="31.8" height="15.0" fill="rgb(207,20,12)" rx="2" ry="2" />
<text  x="59.07" y="1647.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1333" width="0.2" height="15.0" fill="rgb(220,218,35)" rx="2" ry="2" />
<text  x="223.35" y="1343.5" ></text>
</g>
<g >
<title>unmap_single_vma (3 samples, 0.02%)</title><rect x="520.5" y="1957" width="0.2" height="15.0" fill="rgb(232,182,17)" rx="2" ry="2" />
<text  x="523.54" y="1967.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="170.9" y="1573" width="0.4" height="15.0" fill="rgb(205,117,29)" rx="2" ry="2" />
<text  x="173.89" y="1583.5" ></text>
</g>
<g >
<title>std::future&lt;boost::optional&lt;TDocument&gt; &gt;::get (7 samples, 0.04%)</title><rect x="132.1" y="1989" width="0.4" height="15.0" fill="rgb(229,139,52)" rx="2" ry="2" />
<text  x="135.10" y="1999.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.02%)</title><rect x="490.4" y="1925" width="0.2" height="15.0" fill="rgb(244,226,45)" rx="2" ry="2" />
<text  x="493.45" y="1935.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="171.9" y="1605" width="0.2" height="15.0" fill="rgb(212,25,31)" rx="2" ry="2" />
<text  x="174.94" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (438 samples, 2.29%)</title><rect x="56.1" y="1349" width="27.0" height="15.0" fill="rgb(218,111,38)" rx="2" ry="2" />
<text  x="59.07" y="1359.5" >[..</text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (12 samples, 0.06%)</title><rect x="820.1" y="2005" width="0.8" height="15.0" fill="rgb(234,61,9)" rx="2" ry="2" />
<text  x="823.12" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.81%)</title><rect x="56.1" y="549" width="21.4" height="15.0" fill="rgb(239,135,32)" rx="2" ry="2" />
<text  x="59.13" y="559.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1509" width="0.3" height="15.0" fill="rgb(248,11,15)" rx="2" ry="2" />
<text  x="1189.98" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1349" width="0.2" height="15.0" fill="rgb(240,179,49)" rx="2" ry="2" />
<text  x="162.97" y="1359.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="146.9" y="1605" width="0.1" height="15.0" fill="rgb(230,81,14)" rx="2" ry="2" />
<text  x="149.90" y="1615.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="516.7" y="1733" width="0.1" height="15.0" fill="rgb(220,197,49)" rx="2" ry="2" />
<text  x="519.66" y="1743.5" ></text>
</g>
<g >
<title>copy_page_to_iter (2 samples, 0.01%)</title><rect x="1111.2" y="1877" width="0.1" height="15.0" fill="rgb(225,173,3)" rx="2" ry="2" />
<text  x="1114.19" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1253" width="0.2" height="15.0" fill="rgb(243,97,34)" rx="2" ry="2" />
<text  x="223.04" y="1263.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="208.4" y="1653" width="0.2" height="15.0" fill="rgb(221,175,53)" rx="2" ry="2" />
<text  x="211.38" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.81%)</title><rect x="56.1" y="581" width="21.4" height="15.0" fill="rgb(232,5,1)" rx="2" ry="2" />
<text  x="59.13" y="591.5" >[..</text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (347 samples, 1.81%)</title><rect x="593.4" y="1877" width="21.4" height="15.0" fill="rgb(206,95,10)" rx="2" ry="2" />
<text  x="596.37" y="1887.5" >o..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="204.3" y="1605" width="0.1" height="15.0" fill="rgb(218,30,27)" rx="2" ry="2" />
<text  x="207.25" y="1615.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (2 samples, 0.01%)</title><rect x="814.4" y="2005" width="0.2" height="15.0" fill="rgb(218,184,40)" rx="2" ry="2" />
<text  x="817.45" y="2015.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (18 samples, 0.09%)</title><rect x="519.6" y="1989" width="1.1" height="15.0" fill="rgb(254,159,49)" rx="2" ry="2" />
<text  x="522.62" y="1999.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (4 samples, 0.02%)</title><rect x="179.0" y="1621" width="0.2" height="15.0" fill="rgb(238,141,46)" rx="2" ry="2" />
<text  x="181.97" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1157" width="0.3" height="15.0" fill="rgb(238,162,3)" rx="2" ry="2" />
<text  x="1189.98" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (83 samples, 0.43%)</title><rect x="133.1" y="1717" width="5.1" height="15.0" fill="rgb(214,187,53)" rx="2" ry="2" />
<text  x="136.09" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.02%)</title><rect x="1102.8" y="2053" width="0.2" height="15.0" fill="rgb(233,145,50)" rx="2" ry="2" />
<text  x="1105.80" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="188.5" y="1717" width="0.1" height="15.0" fill="rgb(238,45,28)" rx="2" ry="2" />
<text  x="191.46" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 1.77%)</title><rect x="56.1" y="245" width="20.9" height="15.0" fill="rgb(234,158,51)" rx="2" ry="2" />
<text  x="59.13" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="219.1" y="1781" width="0.1" height="15.0" fill="rgb(212,80,39)" rx="2" ry="2" />
<text  x="222.05" y="1791.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1797" width="0.3" height="15.0" fill="rgb(244,3,13)" rx="2" ry="2" />
<text  x="519.53" y="1807.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (16 samples, 0.08%)</title><rect x="651.7" y="1877" width="1.0" height="15.0" fill="rgb(244,189,5)" rx="2" ry="2" />
<text  x="654.71" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (47 samples, 0.25%)</title><rect x="150.6" y="1653" width="2.9" height="15.0" fill="rgb(206,138,47)" rx="2" ry="2" />
<text  x="153.60" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1877" width="0.1" height="15.0" fill="rgb(221,100,10)" rx="2" ry="2" />
<text  x="58.88" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.0" y="1733" width="0.2" height="15.0" fill="rgb(219,152,31)" rx="2" ry="2" />
<text  x="222.98" y="1743.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (4 samples, 0.02%)</title><rect x="26.6" y="1957" width="0.2" height="15.0" fill="rgb(212,112,48)" rx="2" ry="2" />
<text  x="29.59" y="1967.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (13 samples, 0.07%)</title><rect x="160.6" y="1653" width="0.8" height="15.0" fill="rgb(250,102,33)" rx="2" ry="2" />
<text  x="163.59" y="1663.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10 samples, 0.05%)</title><rect x="692.0" y="1749" width="0.7" height="15.0" fill="rgb(253,155,10)" rx="2" ry="2" />
<text  x="695.04" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (441 samples, 2.30%)</title><rect x="191.2" y="1829" width="27.2" height="15.0" fill="rgb(214,224,34)" rx="2" ry="2" />
<text  x="194.24" y="1839.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1637" width="0.1" height="15.0" fill="rgb(229,141,2)" rx="2" ry="2" />
<text  x="162.85" y="1647.5" ></text>
</g>
<g >
<title>irq_exit (4 samples, 0.02%)</title><rect x="315.7" y="1925" width="0.2" height="15.0" fill="rgb(239,81,5)" rx="2" ry="2" />
<text  x="318.68" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (420 samples, 2.19%)</title><rect x="133.1" y="1893" width="25.9" height="15.0" fill="rgb(232,64,2)" rx="2" ry="2" />
<text  x="136.09" y="1903.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1701" width="0.1" height="15.0" fill="rgb(248,117,45)" rx="2" ry="2" />
<text  x="192.51" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (354 samples, 1.85%)</title><rect x="160.6" y="1781" width="21.8" height="15.0" fill="rgb(225,110,5)" rx="2" ry="2" />
<text  x="163.59" y="1791.5" >s..</text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="567.2" y="1925" width="0.1" height="15.0" fill="rgb(236,107,5)" rx="2" ry="2" />
<text  x="570.16" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1221" width="0.2" height="15.0" fill="rgb(235,43,42)" rx="2" ry="2" />
<text  x="223.04" y="1231.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="78.9" y="1141" width="0.2" height="15.0" fill="rgb(250,218,2)" rx="2" ry="2" />
<text  x="81.94" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (83 samples, 0.43%)</title><rect x="161.4" y="1685" width="5.1" height="15.0" fill="rgb(223,207,33)" rx="2" ry="2" />
<text  x="164.39" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="549" width="0.3" height="15.0" fill="rgb(245,214,19)" rx="2" ry="2" />
<text  x="1190.41" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="188.6" y="1813" width="0.2" height="15.0" fill="rgb(221,191,48)" rx="2" ry="2" />
<text  x="191.65" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="1733" width="0.4" height="15.0" fill="rgb(207,173,32)" rx="2" ry="2" />
<text  x="1189.92" y="1743.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="91.6" y="1877" width="0.1" height="15.0" fill="rgb(250,183,2)" rx="2" ry="2" />
<text  x="94.59" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="149" width="0.1" height="15.0" fill="rgb(229,23,44)" rx="2" ry="2" />
<text  x="1190.72" y="159.5" ></text>
</g>
<g >
<title>mmap_region (6 samples, 0.03%)</title><rect x="763.5" y="1925" width="0.4" height="15.0" fill="rgb(244,51,27)" rx="2" ry="2" />
<text  x="766.51" y="1935.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="196.7" y="1621" width="0.2" height="15.0" fill="rgb(207,162,9)" rx="2" ry="2" />
<text  x="199.67" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="151.6" y="1637" width="0.2" height="15.0" fill="rgb(224,41,43)" rx="2" ry="2" />
<text  x="154.59" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="437" width="0.1" height="15.0" fill="rgb(220,131,3)" rx="2" ry="2" />
<text  x="1190.72" y="447.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (3 samples, 0.02%)</title><rect x="763.2" y="1989" width="0.2" height="15.0" fill="rgb(234,106,19)" rx="2" ry="2" />
<text  x="766.20" y="1999.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="141.1" y="1589" width="0.1" height="15.0" fill="rgb(209,162,10)" rx="2" ry="2" />
<text  x="144.10" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (347 samples, 1.81%)</title><rect x="56.1" y="661" width="21.4" height="15.0" fill="rgb(206,32,46)" rx="2" ry="2" />
<text  x="59.13" y="671.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="159.7" y="1877" width="0.5" height="15.0" fill="rgb(229,157,7)" rx="2" ry="2" />
<text  x="162.73" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="754.6" y="2037" width="0.2" height="15.0" fill="rgb(219,6,31)" rx="2" ry="2" />
<text  x="757.57" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1461" width="0.2" height="15.0" fill="rgb(245,186,28)" rx="2" ry="2" />
<text  x="223.35" y="1471.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (46 samples, 0.24%)</title><rect x="178.8" y="1637" width="2.8" height="15.0" fill="rgb(242,130,0)" rx="2" ry="2" />
<text  x="181.78" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (341 samples, 1.78%)</title><rect x="56.1" y="405" width="21.1" height="15.0" fill="rgb(224,192,42)" rx="2" ry="2" />
<text  x="59.13" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="757" width="0.3" height="15.0" fill="rgb(228,115,8)" rx="2" ry="2" />
<text  x="1190.41" y="767.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="87.6" y="1621" width="0.2" height="15.0" fill="rgb(244,127,20)" rx="2" ry="2" />
<text  x="90.64" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1573" width="0.1" height="15.0" fill="rgb(208,119,13)" rx="2" ry="2" />
<text  x="1190.72" y="1583.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::push_back (5 samples, 0.03%)</title><rect x="516.5" y="2005" width="0.3" height="15.0" fill="rgb(210,49,28)" rx="2" ry="2" />
<text  x="519.47" y="2015.5" ></text>
</g>
<g >
<title>__interceptor___strxfrm_l (111 samples, 0.58%)</title><rect x="1164.5" y="2037" width="6.9" height="15.0" fill="rgb(232,36,27)" rx="2" ry="2" />
<text  x="1167.53" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (485 samples, 2.53%)</title><rect x="56.1" y="1477" width="29.9" height="15.0" fill="rgb(248,4,12)" rx="2" ry="2" />
<text  x="59.07" y="1487.5" >[u..</text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.06%)</title><rect x="29.2" y="1973" width="0.7" height="15.0" fill="rgb(208,145,38)" rx="2" ry="2" />
<text  x="32.24" y="1983.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="147.0" y="1605" width="0.3" height="15.0" fill="rgb(246,149,47)" rx="2" ry="2" />
<text  x="150.02" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1381" width="0.2" height="15.0" fill="rgb(244,166,5)" rx="2" ry="2" />
<text  x="162.97" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="517" width="0.3" height="15.0" fill="rgb(214,125,50)" rx="2" ry="2" />
<text  x="1190.04" y="527.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="210.1" y="1637" width="0.1" height="15.0" fill="rgb(220,182,14)" rx="2" ry="2" />
<text  x="213.11" y="1647.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (2 samples, 0.01%)</title><rect x="85.6" y="1413" width="0.1" height="15.0" fill="rgb(208,101,4)" rx="2" ry="2" />
<text  x="88.60" y="1423.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (6 samples, 0.03%)</title><rect x="55.3" y="1861" width="0.4" height="15.0" fill="rgb(211,86,18)" rx="2" ry="2" />
<text  x="58.33" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (69 samples, 0.36%)</title><rect x="172.8" y="1621" width="4.3" height="15.0" fill="rgb(222,42,51)" rx="2" ry="2" />
<text  x="175.80" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (459 samples, 2.40%)</title><rect x="191.2" y="1909" width="28.3" height="15.0" fill="rgb(239,198,43)" rx="2" ry="2" />
<text  x="194.24" y="1919.5" >s..</text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (2 samples, 0.01%)</title><rect x="143.0" y="1589" width="0.1" height="15.0" fill="rgb(235,68,32)" rx="2" ry="2" />
<text  x="146.02" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (2 samples, 0.01%)</title><rect x="218.5" y="1813" width="0.1" height="15.0" fill="rgb(230,101,45)" rx="2" ry="2" />
<text  x="221.50" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (365 samples, 1.91%)</title><rect x="56.1" y="1109" width="22.5" height="15.0" fill="rgb(209,191,52)" rx="2" ry="2" />
<text  x="59.13" y="1119.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="693" width="0.1" height="15.0" fill="rgb(221,226,15)" rx="2" ry="2" />
<text  x="1190.72" y="703.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (2 samples, 0.01%)</title><rect x="170.0" y="1573" width="0.1" height="15.0" fill="rgb(224,24,3)" rx="2" ry="2" />
<text  x="173.03" y="1583.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="537.7" y="1893" width="0.2" height="15.0" fill="rgb(213,26,11)" rx="2" ry="2" />
<text  x="540.69" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (7 samples, 0.04%)</title><rect x="169.5" y="1573" width="0.4" height="15.0" fill="rgb(245,46,31)" rx="2" ry="2" />
<text  x="172.47" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="901" width="0.1" height="15.0" fill="rgb(218,12,9)" rx="2" ry="2" />
<text  x="162.85" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="159.7" y="1893" width="0.5" height="15.0" fill="rgb(222,149,11)" rx="2" ry="2" />
<text  x="162.73" y="1903.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="194.0" y="1557" width="0.1" height="15.0" fill="rgb(225,154,48)" rx="2" ry="2" />
<text  x="196.95" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="213" width="0.1" height="15.0" fill="rgb(239,181,15)" rx="2" ry="2" />
<text  x="1190.72" y="223.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.02%)</title><rect x="143.5" y="1605" width="0.3" height="15.0" fill="rgb(206,168,9)" rx="2" ry="2" />
<text  x="146.51" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1381" width="0.3" height="15.0" fill="rgb(219,122,44)" rx="2" ry="2" />
<text  x="1190.41" y="1391.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="87.1" y="1557" width="0.2" height="15.0" fill="rgb(254,7,38)" rx="2" ry="2" />
<text  x="90.15" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (73 samples, 0.38%)</title><rect x="191.7" y="1605" width="4.5" height="15.0" fill="rgb(226,32,36)" rx="2" ry="2" />
<text  x="194.73" y="1615.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.03%)</title><rect x="1124.6" y="2037" width="0.3" height="15.0" fill="rgb(244,208,2)" rx="2" ry="2" />
<text  x="1127.57" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1253" width="0.1" height="15.0" fill="rgb(214,204,23)" rx="2" ry="2" />
<text  x="1190.72" y="1263.5" ></text>
</g>
<g >
<title>[unknown] (357 samples, 1.87%)</title><rect x="56.1" y="1061" width="22.0" height="15.0" fill="rgb(210,4,1)" rx="2" ry="2" />
<text  x="59.13" y="1071.5" >[..</text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="198.5" y="1589" width="0.1" height="15.0" fill="rgb(231,204,21)" rx="2" ry="2" />
<text  x="201.52" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="189.2" y="1765" width="0.1" height="15.0" fill="rgb(218,204,45)" rx="2" ry="2" />
<text  x="192.20" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="213" width="0.3" height="15.0" fill="rgb(238,120,51)" rx="2" ry="2" />
<text  x="1190.41" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="789" width="0.3" height="15.0" fill="rgb(251,108,36)" rx="2" ry="2" />
<text  x="1189.98" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="997" width="0.3" height="15.0" fill="rgb(247,162,44)" rx="2" ry="2" />
<text  x="1189.98" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1845" width="0.4" height="15.0" fill="rgb(225,28,18)" rx="2" ry="2" />
<text  x="1189.92" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="160.0" y="1557" width="0.2" height="15.0" fill="rgb(235,141,51)" rx="2" ry="2" />
<text  x="162.97" y="1567.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (24 samples, 0.13%)</title><rect x="1177.5" y="2037" width="1.5" height="15.0" fill="rgb(219,49,2)" rx="2" ry="2" />
<text  x="1180.54" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (51 samples, 0.27%)</title><rect x="816.4" y="2037" width="3.2" height="15.0" fill="rgb(224,73,21)" rx="2" ry="2" />
<text  x="819.42" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="421" width="0.1" height="15.0" fill="rgb(254,185,52)" rx="2" ry="2" />
<text  x="1190.72" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (9 samples, 0.05%)</title><rect x="819.6" y="1973" width="0.5" height="15.0" fill="rgb(226,99,38)" rx="2" ry="2" />
<text  x="822.57" y="1983.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="539.1" y="1957" width="0.1" height="15.0" fill="rgb(219,46,27)" rx="2" ry="2" />
<text  x="542.10" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1381" width="0.1" height="15.0" fill="rgb(238,184,21)" rx="2" ry="2" />
<text  x="1190.72" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="325" width="0.3" height="15.0" fill="rgb(241,29,51)" rx="2" ry="2" />
<text  x="1190.04" y="335.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (3 samples, 0.02%)</title><rect x="91.8" y="1813" width="0.2" height="15.0" fill="rgb(235,156,0)" rx="2" ry="2" />
<text  x="94.83" y="1823.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="200.2" y="1589" width="0.5" height="15.0" fill="rgb(239,175,25)" rx="2" ry="2" />
<text  x="203.24" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (78 samples, 0.41%)</title><rect x="213.6" y="1813" width="4.8" height="15.0" fill="rgb(224,141,41)" rx="2" ry="2" />
<text  x="216.62" y="1823.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (8 samples, 0.04%)</title><rect x="763.4" y="1973" width="0.5" height="15.0" fill="rgb(237,25,46)" rx="2" ry="2" />
<text  x="766.45" y="1983.5" ></text>
</g>
<g >
<title>onmt::get_alphabet_id (7 samples, 0.04%)</title><rect x="653.2" y="1877" width="0.4" height="15.0" fill="rgb(237,77,54)" rx="2" ry="2" />
<text  x="656.19" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="117" width="0.1" height="15.0" fill="rgb(246,90,22)" rx="2" ry="2" />
<text  x="1190.72" y="127.5" ></text>
</g>
<g >
<title>mmput (7 samples, 0.04%)</title><rect x="1103.0" y="1973" width="0.4" height="15.0" fill="rgb(238,179,2)" rx="2" ry="2" />
<text  x="1105.99" y="1983.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="153.9" y="1669" width="0.2" height="15.0" fill="rgb(215,6,48)" rx="2" ry="2" />
<text  x="156.93" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.9" y="1893" width="0.4" height="15.0" fill="rgb(230,61,34)" rx="2" ry="2" />
<text  x="1189.85" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.4" y="1045" width="0.1" height="15.0" fill="rgb(226,122,2)" rx="2" ry="2" />
<text  x="223.41" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="805" width="0.3" height="15.0" fill="rgb(217,173,44)" rx="2" ry="2" />
<text  x="1189.98" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1093" width="0.1" height="15.0" fill="rgb(242,19,43)" rx="2" ry="2" />
<text  x="1190.72" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (91 samples, 0.48%)</title><rect x="182.6" y="1749" width="5.6" height="15.0" fill="rgb(241,183,22)" rx="2" ry="2" />
<text  x="185.61" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (90 samples, 0.47%)</title><rect x="201.4" y="1733" width="5.5" height="15.0" fill="rgb(243,99,22)" rx="2" ry="2" />
<text  x="204.35" y="1743.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.02%)</title><rect x="1111.1" y="2005" width="0.2" height="15.0" fill="rgb(246,127,5)" rx="2" ry="2" />
<text  x="1114.13" y="2015.5" ></text>
</g>
<g >
<title>__do_page_fault (11 samples, 0.06%)</title><rect x="676.9" y="1813" width="0.6" height="15.0" fill="rgb(254,32,1)" rx="2" ry="2" />
<text  x="679.87" y="1823.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (4 samples, 0.02%)</title><rect x="135.4" y="1557" width="0.3" height="15.0" fill="rgb(239,103,49)" rx="2" ry="2" />
<text  x="138.43" y="1567.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (49 samples, 0.26%)</title><rect x="738.4" y="1877" width="3.0" height="15.0" fill="rgb(219,183,26)" rx="2" ry="2" />
<text  x="741.41" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1269" width="0.2" height="15.0" fill="rgb(242,37,34)" rx="2" ry="2" />
<text  x="223.35" y="1279.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="88.1" y="1573" width="0.1" height="15.0" fill="rgb(226,143,7)" rx="2" ry="2" />
<text  x="91.07" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (3 samples, 0.02%)</title><rect x="1188.3" y="2053" width="0.2" height="15.0" fill="rgb(244,8,23)" rx="2" ry="2" />
<text  x="1191.27" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (353 samples, 1.84%)</title><rect x="56.1" y="821" width="21.8" height="15.0" fill="rgb(244,218,31)" rx="2" ry="2" />
<text  x="59.13" y="831.5" >[..</text>
</g>
<g >
<title>arch_tlb_finish_mmu (14 samples, 0.07%)</title><rect x="519.7" y="1941" width="0.8" height="15.0" fill="rgb(228,144,28)" rx="2" ry="2" />
<text  x="522.68" y="1951.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="82.9" y="1333" width="0.2" height="15.0" fill="rgb(248,119,14)" rx="2" ry="2" />
<text  x="85.89" y="1343.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (3 samples, 0.02%)</title><rect x="55.5" y="1781" width="0.2" height="15.0" fill="rgb(205,50,31)" rx="2" ry="2" />
<text  x="58.51" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="220.0" y="1765" width="0.5" height="15.0" fill="rgb(233,223,52)" rx="2" ry="2" />
<text  x="222.98" y="1775.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (5 samples, 0.03%)</title><rect x="181.2" y="1621" width="0.3" height="15.0" fill="rgb(233,30,0)" rx="2" ry="2" />
<text  x="184.19" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="533" width="0.1" height="15.0" fill="rgb(228,207,33)" rx="2" ry="2" />
<text  x="162.85" y="543.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="80.4" y="1205" width="0.1" height="15.0" fill="rgb(253,83,51)" rx="2" ry="2" />
<text  x="83.36" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (459 samples, 2.40%)</title><rect x="191.2" y="1925" width="28.3" height="15.0" fill="rgb(207,96,14)" rx="2" ry="2" />
<text  x="194.24" y="1935.5" >s..</text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="182.4" y="1717" width="0.2" height="15.0" fill="rgb(237,94,22)" rx="2" ry="2" />
<text  x="185.42" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1541" width="0.2" height="15.0" fill="rgb(232,59,15)" rx="2" ry="2" />
<text  x="162.97" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (64 samples, 0.33%)</title><rect x="196.9" y="1621" width="3.9" height="15.0" fill="rgb(207,9,17)" rx="2" ry="2" />
<text  x="199.85" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (342 samples, 1.79%)</title><rect x="56.1" y="421" width="21.1" height="15.0" fill="rgb(231,218,40)" rx="2" ry="2" />
<text  x="59.13" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare@plt (5 samples, 0.03%)</title><rect x="750.2" y="1893" width="0.3" height="15.0" fill="rgb(209,15,20)" rx="2" ry="2" />
<text  x="753.19" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::RunMallocHooks (24 samples, 0.13%)</title><rect x="1019.0" y="2053" width="1.5" height="15.0" fill="rgb(249,38,46)" rx="2" ry="2" />
<text  x="1022.00" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (65 samples, 0.34%)</title><rect x="96.5" y="2021" width="4.0" height="15.0" fill="rgb(211,136,18)" rx="2" ry="2" />
<text  x="99.52" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.01%)</title><rect x="516.8" y="2005" width="0.1" height="15.0" fill="rgb(208,93,5)" rx="2" ry="2" />
<text  x="519.78" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1477" width="0.2" height="15.0" fill="rgb(228,41,37)" rx="2" ry="2" />
<text  x="162.97" y="1487.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (55 samples, 0.29%)</title><rect x="184.3" y="1669" width="3.4" height="15.0" fill="rgb(205,64,41)" rx="2" ry="2" />
<text  x="187.33" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1685" width="0.1" height="15.0" fill="rgb(223,45,32)" rx="2" ry="2" />
<text  x="1190.72" y="1695.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set_case (2 samples, 0.01%)</title><rect x="568.5" y="1909" width="0.1" height="15.0" fill="rgb(227,225,12)" rx="2" ry="2" />
<text  x="571.52" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="160.0" y="1365" width="0.2" height="15.0" fill="rgb(242,37,37)" rx="2" ry="2" />
<text  x="162.97" y="1375.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (15 samples, 0.08%)</title><rect x="130.9" y="1909" width="0.9" height="15.0" fill="rgb(229,39,24)" rx="2" ry="2" />
<text  x="133.87" y="1919.5" ></text>
</g>
<g >
<title>GetHost (445 samples, 2.33%)</title><rect x="132.8" y="1973" width="27.4" height="15.0" fill="rgb(246,105,33)" rx="2" ry="2" />
<text  x="135.78" y="1983.5" >G..</text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="601.8" y="1861" width="0.1" height="15.0" fill="rgb(231,206,26)" rx="2" ry="2" />
<text  x="604.82" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1477" width="0.1" height="15.0" fill="rgb(239,57,10)" rx="2" ry="2" />
<text  x="1190.72" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.4" y="949" width="0.1" height="15.0" fill="rgb(253,33,36)" rx="2" ry="2" />
<text  x="223.41" y="959.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.02%)</title><rect x="54.2" y="1941" width="0.3" height="15.0" fill="rgb(219,186,37)" rx="2" ry="2" />
<text  x="57.22" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (10 samples, 0.05%)</title><rect x="874.3" y="2005" width="0.6" height="15.0" fill="rgb(253,202,14)" rx="2" ry="2" />
<text  x="877.26" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (83 samples, 0.43%)</title><rect x="161.4" y="1669" width="5.1" height="15.0" fill="rgb(244,167,23)" rx="2" ry="2" />
<text  x="164.39" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (12 samples, 0.06%)</title><rect x="93.8" y="2005" width="0.7" height="15.0" fill="rgb(226,151,35)" rx="2" ry="2" />
<text  x="96.81" y="2015.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (227 samples, 1.19%)</title><rect x="316.0" y="1973" width="14.0" height="15.0" fill="rgb(234,114,49)" rx="2" ry="2" />
<text  x="318.99" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (87 samples, 0.45%)</title><rect x="172.2" y="1701" width="5.3" height="15.0" fill="rgb(249,11,51)" rx="2" ry="2" />
<text  x="175.18" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1317" width="0.3" height="15.0" fill="rgb(212,178,43)" rx="2" ry="2" />
<text  x="1190.41" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1973" width="0.1" height="15.0" fill="rgb(233,55,49)" rx="2" ry="2" />
<text  x="1190.72" y="1983.5" ></text>
</g>
<g >
<title>Eigen::internal::product_evaluator&lt;Eigen::Product&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, 0&gt;, 8, Eigen::DenseShape, Eigen::DenseShape, float, float&gt;::product_evaluator (168 samples, 0.88%)</title><rect x="497.5" y="1957" width="10.4" height="15.0" fill="rgb(209,183,21)" rx="2" ry="2" />
<text  x="500.54" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (77 samples, 0.40%)</title><rect x="149.4" y="1717" width="4.7" height="15.0" fill="rgb(246,121,27)" rx="2" ry="2" />
<text  x="152.37" y="1727.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::at (2 samples, 0.01%)</title><rect x="123.2" y="1941" width="0.1" height="15.0" fill="rgb(206,133,36)" rx="2" ry="2" />
<text  x="126.22" y="1951.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append (4 samples, 0.02%)</title><rect x="576.5" y="1893" width="0.2" height="15.0" fill="rgb(212,220,18)" rx="2" ry="2" />
<text  x="579.47" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="341" width="0.1" height="15.0" fill="rgb(208,130,43)" rx="2" ry="2" />
<text  x="1190.72" y="351.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (20 samples, 0.10%)</title><rect x="647.5" y="1877" width="1.2" height="15.0" fill="rgb(241,13,30)" rx="2" ry="2" />
<text  x="650.51" y="1887.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (44 samples, 0.23%)</title><rect x="991.9" y="2053" width="2.7" height="15.0" fill="rgb(241,199,33)" rx="2" ry="2" />
<text  x="994.93" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 1.77%)</title><rect x="56.1" y="293" width="20.9" height="15.0" fill="rgb(249,37,16)" rx="2" ry="2" />
<text  x="59.13" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1749" width="0.4" height="15.0" fill="rgb(224,97,25)" rx="2" ry="2" />
<text  x="1190.35" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="933" width="0.3" height="15.0" fill="rgb(225,164,23)" rx="2" ry="2" />
<text  x="1190.41" y="943.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="152.1" y="1637" width="0.2" height="15.0" fill="rgb(205,141,54)" rx="2" ry="2" />
<text  x="155.14" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1077" width="0.3" height="15.0" fill="rgb(211,126,15)" rx="2" ry="2" />
<text  x="1189.98" y="1087.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (16 samples, 0.08%)</title><rect x="764.9" y="2005" width="1.0" height="15.0" fill="rgb(236,1,40)" rx="2" ry="2" />
<text  x="767.87" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1909" width="0.1" height="15.0" fill="rgb(205,39,11)" rx="2" ry="2" />
<text  x="1190.72" y="1919.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (20 samples, 0.10%)</title><rect x="944.7" y="1861" width="1.2" height="15.0" fill="rgb(211,89,32)" rx="2" ry="2" />
<text  x="947.69" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="149" width="0.3" height="15.0" fill="rgb(247,107,50)" rx="2" ry="2" />
<text  x="1190.04" y="159.5" ></text>
</g>
<g >
<title>TDocument::~TDocument (2 samples, 0.01%)</title><rect x="753.0" y="1973" width="0.2" height="15.0" fill="rgb(242,152,25)" rx="2" ry="2" />
<text  x="756.03" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (363 samples, 1.90%)</title><rect x="191.2" y="1813" width="22.4" height="15.0" fill="rgb(254,154,4)" rx="2" ry="2" />
<text  x="194.24" y="1823.5" >s..</text>
</g>
<g >
<title>__asan::AsanTSDGet (4 samples, 0.02%)</title><rect x="116.3" y="2037" width="0.2" height="15.0" fill="rgb(252,128,11)" rx="2" ry="2" />
<text  x="119.25" y="2047.5" ></text>
</g>
<g >
<title>memcpy (3 samples, 0.02%)</title><rect x="1124.4" y="2037" width="0.2" height="15.0" fill="rgb(218,153,7)" rx="2" ry="2" />
<text  x="1127.39" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="220.0" y="1813" width="0.5" height="15.0" fill="rgb(234,141,0)" rx="2" ry="2" />
<text  x="222.98" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1541" width="0.2" height="15.0" fill="rgb(209,64,32)" rx="2" ry="2" />
<text  x="223.28" y="1551.5" ></text>
</g>
<g >
<title>try_charge (4 samples, 0.02%)</title><rect x="693.0" y="1733" width="0.3" height="15.0" fill="rgb(206,17,2)" rx="2" ry="2" />
<text  x="696.02" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="773" width="0.3" height="15.0" fill="rgb(206,82,3)" rx="2" ry="2" />
<text  x="1189.98" y="783.5" ></text>
</g>
<g >
<title>[unknown] (421 samples, 2.20%)</title><rect x="56.1" y="1301" width="26.0" height="15.0" fill="rgb(244,110,47)" rx="2" ry="2" />
<text  x="59.13" y="1311.5" >[..</text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (48 samples, 0.25%)</title><rect x="173.7" y="1605" width="2.9" height="15.0" fill="rgb(239,1,41)" rx="2" ry="2" />
<text  x="176.66" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="189.2" y="1797" width="0.1" height="15.0" fill="rgb(208,166,10)" rx="2" ry="2" />
<text  x="192.20" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (393 samples, 2.05%)</title><rect x="56.1" y="1205" width="24.3" height="15.0" fill="rgb(209,116,13)" rx="2" ry="2" />
<text  x="59.13" y="1215.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1813" width="0.4" height="15.0" fill="rgb(250,217,5)" rx="2" ry="2" />
<text  x="1189.92" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1509" width="0.1" height="15.0" fill="rgb(209,8,30)" rx="2" ry="2" />
<text  x="1190.72" y="1519.5" ></text>
</g>
<g >
<title>smp_call_function_many (20 samples, 0.10%)</title><rect x="944.7" y="1845" width="1.2" height="15.0" fill="rgb(244,49,6)" rx="2" ry="2" />
<text  x="947.69" y="1855.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (12 samples, 0.06%)</title><rect x="875.4" y="1957" width="0.8" height="15.0" fill="rgb(205,169,38)" rx="2" ry="2" />
<text  x="878.44" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1125" width="0.2" height="15.0" fill="rgb(243,60,31)" rx="2" ry="2" />
<text  x="223.35" y="1135.5" ></text>
</g>
<g >
<title>ptep_clear_flush (7 samples, 0.04%)</title><rect x="55.3" y="1909" width="0.4" height="15.0" fill="rgb(235,35,18)" rx="2" ry="2" />
<text  x="58.26" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1365" width="0.1" height="15.0" fill="rgb(235,84,53)" rx="2" ry="2" />
<text  x="1190.72" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (80 samples, 0.42%)</title><rect x="144.2" y="1701" width="5.0" height="15.0" fill="rgb(219,107,42)" rx="2" ry="2" />
<text  x="147.25" y="1711.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="135.9" y="1557" width="0.1" height="15.0" fill="rgb(221,212,10)" rx="2" ry="2" />
<text  x="138.92" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1845" width="0.1" height="15.0" fill="rgb(252,28,32)" rx="2" ry="2" />
<text  x="58.88" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="277" width="0.3" height="15.0" fill="rgb(236,69,30)" rx="2" ry="2" />
<text  x="1190.04" y="287.5" ></text>
</g>
<g >
<title>[unknown] (335 samples, 1.75%)</title><rect x="56.1" y="149" width="20.7" height="15.0" fill="rgb(251,42,20)" rx="2" ry="2" />
<text  x="59.13" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (62 samples, 0.32%)</title><rect x="214.2" y="1701" width="3.9" height="15.0" fill="rgb(216,173,7)" rx="2" ry="2" />
<text  x="217.24" y="1711.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="85.6" y="1429" width="0.1" height="15.0" fill="rgb(221,11,44)" rx="2" ry="2" />
<text  x="88.60" y="1439.5" ></text>
</g>
<g >
<title>__pthread_getspecific (7 samples, 0.04%)</title><rect x="141.7" y="1589" width="0.4" height="15.0" fill="rgb(210,227,43)" rx="2" ry="2" />
<text  x="144.66" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1637" width="0.2" height="15.0" fill="rgb(208,50,7)" rx="2" ry="2" />
<text  x="223.28" y="1647.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.02%)</title><rect x="1103.7" y="1957" width="0.2" height="15.0" fill="rgb(229,141,26)" rx="2" ry="2" />
<text  x="1106.73" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1365" width="0.3" height="15.0" fill="rgb(250,214,53)" rx="2" ry="2" />
<text  x="1190.41" y="1375.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="197.4" y="1605" width="0.2" height="15.0" fill="rgb(252,161,2)" rx="2" ry="2" />
<text  x="200.41" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (9 samples, 0.05%)</title><rect x="1189.1" y="2037" width="0.5" height="15.0" fill="rgb(219,5,23)" rx="2" ry="2" />
<text  x="1192.07" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (334 samples, 1.75%)</title><rect x="56.1" y="53" width="20.6" height="15.0" fill="rgb(241,134,24)" rx="2" ry="2" />
<text  x="59.13" y="63.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="216.8" y="1669" width="0.2" height="15.0" fill="rgb(219,66,1)" rx="2" ry="2" />
<text  x="219.77" y="1679.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="499.1" y="1813" width="0.1" height="15.0" fill="rgb(251,140,33)" rx="2" ry="2" />
<text  x="502.08" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (75 samples, 0.39%)</title><rect x="133.6" y="1637" width="4.6" height="15.0" fill="rgb(244,157,51)" rx="2" ry="2" />
<text  x="136.58" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::ThreadContextBase::OnJoined (3 samples, 0.02%)</title><rect x="763.2" y="2037" width="0.2" height="15.0" fill="rgb(214,226,11)" rx="2" ry="2" />
<text  x="766.20" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (119 samples, 0.62%)</title><rect x="604.2" y="1861" width="7.3" height="15.0" fill="rgb(251,182,26)" rx="2" ry="2" />
<text  x="607.16" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (396 samples, 2.07%)</title><rect x="56.1" y="1221" width="24.4" height="15.0" fill="rgb(222,90,43)" rx="2" ry="2" />
<text  x="59.13" y="1231.5" >[..</text>
</g>
<g >
<title>[unknown] (471 samples, 2.46%)</title><rect x="56.1" y="1445" width="29.0" height="15.0" fill="rgb(213,85,27)" rx="2" ry="2" />
<text  x="59.07" y="1455.5" >[u..</text>
</g>
<g >
<title>unmap_single_vma (4 samples, 0.02%)</title><rect x="764.0" y="1909" width="0.3" height="15.0" fill="rgb(206,225,29)" rx="2" ry="2" />
<text  x="767.00" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.02%)</title><rect x="814.3" y="2037" width="0.1" height="15.0" fill="rgb(249,203,36)" rx="2" ry="2" />
<text  x="817.26" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (24 samples, 0.13%)</title><rect x="332.0" y="1973" width="1.5" height="15.0" fill="rgb(243,179,16)" rx="2" ry="2" />
<text  x="335.03" y="1983.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (34 samples, 0.18%)</title><rect x="962.0" y="2053" width="2.1" height="15.0" fill="rgb(205,49,43)" rx="2" ry="2" />
<text  x="965.02" y="2063.5" ></text>
</g>
<g >
<title>onmt::Tokenizer::tokenize (2,981 samples, 15.58%)</title><rect x="567.9" y="1925" width="183.8" height="15.0" fill="rgb(227,129,13)" rx="2" ry="2" />
<text  x="570.90" y="1935.5" >onmt::Tokenizer::tokenize</text>
</g>
<g >
<title>operator new (5 samples, 0.03%)</title><rect x="148.2" y="1605" width="0.3" height="15.0" fill="rgb(238,164,19)" rx="2" ry="2" />
<text  x="151.20" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1333" width="0.2" height="15.0" fill="rgb(236,93,53)" rx="2" ry="2" />
<text  x="223.04" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="101" width="0.1" height="15.0" fill="rgb(248,94,15)" rx="2" ry="2" />
<text  x="1190.72" y="111.5" ></text>
</g>
<g >
<title>operator new[] (2 samples, 0.01%)</title><rect x="1110.8" y="2053" width="0.1" height="15.0" fill="rgb(249,81,21)" rx="2" ry="2" />
<text  x="1113.82" y="2063.5" ></text>
</g>
<g >
<title>vma_merge (3 samples, 0.02%)</title><rect x="1102.6" y="1925" width="0.1" height="15.0" fill="rgb(238,98,28)" rx="2" ry="2" />
<text  x="1105.56" y="1935.5" ></text>
</g>
<g >
<title>__lru_cache_add (4 samples, 0.02%)</title><rect x="942.9" y="1909" width="0.2" height="15.0" fill="rgb(224,168,7)" rx="2" ry="2" />
<text  x="945.90" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (8 samples, 0.04%)</title><rect x="133.1" y="1669" width="0.5" height="15.0" fill="rgb(205,71,0)" rx="2" ry="2" />
<text  x="136.09" y="1679.5" ></text>
</g>
<g >
<title>nlohmann::detail::input_stream_adapter::get_character (15 samples, 0.08%)</title><rect x="129.3" y="1909" width="0.9" height="15.0" fill="rgb(241,125,40)" rx="2" ry="2" />
<text  x="132.26" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (70 samples, 0.37%)</title><rect x="154.4" y="1797" width="4.3" height="15.0" fill="rgb(225,149,33)" rx="2" ry="2" />
<text  x="157.36" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="453" width="0.1" height="15.0" fill="rgb(209,150,27)" rx="2" ry="2" />
<text  x="162.85" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="677" width="0.1" height="15.0" fill="rgb(245,129,24)" rx="2" ry="2" />
<text  x="162.85" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1301" width="0.1" height="15.0" fill="rgb(238,118,23)" rx="2" ry="2" />
<text  x="1190.72" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1077" width="0.1" height="15.0" fill="rgb(208,105,12)" rx="2" ry="2" />
<text  x="1190.72" y="1087.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (3 samples, 0.02%)</title><rect x="174.2" y="1589" width="0.1" height="15.0" fill="rgb(219,149,36)" rx="2" ry="2" />
<text  x="177.16" y="1599.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (3 samples, 0.02%)</title><rect x="612.8" y="1845" width="0.2" height="15.0" fill="rgb(227,199,12)" rx="2" ry="2" />
<text  x="615.80" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.02%)</title><rect x="188.4" y="1781" width="0.2" height="15.0" fill="rgb(215,80,8)" rx="2" ry="2" />
<text  x="191.40" y="1791.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::parse (129 samples, 0.67%)</title><rect x="124.1" y="1973" width="7.9" height="15.0" fill="rgb(205,89,10)" rx="2" ry="2" />
<text  x="127.08" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1189" width="0.3" height="15.0" fill="rgb(232,49,28)" rx="2" ry="2" />
<text  x="1189.98" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1445" width="0.3" height="15.0" fill="rgb(214,42,29)" rx="2" ry="2" />
<text  x="1189.98" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1045" width="0.3" height="15.0" fill="rgb(244,164,27)" rx="2" ry="2" />
<text  x="1189.98" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (82 samples, 0.43%)</title><rect x="144.2" y="1733" width="5.1" height="15.0" fill="rgb(223,183,14)" rx="2" ry="2" />
<text  x="147.25" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="85" width="0.3" height="15.0" fill="rgb(208,162,27)" rx="2" ry="2" />
<text  x="1190.04" y="95.5" ></text>
</g>
<g >
<title>nlohmann::detail::external_constructor&lt; (2 samples, 0.01%)</title><rect x="124.4" y="1909" width="0.1" height="15.0" fill="rgb(236,214,45)" rx="2" ry="2" />
<text  x="127.39" y="1919.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (29 samples, 0.15%)</title><rect x="1100.0" y="2053" width="1.8" height="15.0" fill="rgb(213,141,1)" rx="2" ry="2" />
<text  x="1103.03" y="2063.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 0.02%)</title><rect x="509.9" y="1877" width="0.2" height="15.0" fill="rgb(220,76,54)" rx="2" ry="2" />
<text  x="512.87" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1317" width="0.1" height="15.0" fill="rgb(245,51,8)" rx="2" ry="2" />
<text  x="162.85" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1589" width="0.2" height="15.0" fill="rgb(216,144,40)" rx="2" ry="2" />
<text  x="162.97" y="1599.5" ></text>
</g>
<g >
<title>__interceptor_strcmp (12 samples, 0.06%)</title><rect x="41.8" y="2037" width="0.8" height="15.0" fill="rgb(238,65,46)" rx="2" ry="2" />
<text  x="44.82" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="814.3" y="2021" width="0.1" height="15.0" fill="rgb(232,185,10)" rx="2" ry="2" />
<text  x="817.26" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (361 samples, 1.89%)</title><rect x="191.2" y="1797" width="22.3" height="15.0" fill="rgb(249,224,8)" rx="2" ry="2" />
<text  x="194.24" y="1807.5" >s..</text>
</g>
<g >
<title>__lsan::LsanMetadata::LsanMetadata (3 samples, 0.02%)</title><rect x="518.4" y="2037" width="0.2" height="15.0" fill="rgb(248,30,10)" rx="2" ry="2" />
<text  x="521.38" y="2047.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="946.0" y="1909" width="0.2" height="15.0" fill="rgb(244,137,48)" rx="2" ry="2" />
<text  x="949.04" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (10 samples, 0.05%)</title><rect x="159.6" y="1957" width="0.6" height="15.0" fill="rgb(239,143,4)" rx="2" ry="2" />
<text  x="162.60" y="1967.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="210.2" y="1637" width="0.2" height="15.0" fill="rgb(234,180,15)" rx="2" ry="2" />
<text  x="213.23" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1861" width="0.4" height="15.0" fill="rgb(216,28,52)" rx="2" ry="2" />
<text  x="1189.92" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="219.2" y="1797" width="0.1" height="15.0" fill="rgb(218,98,1)" rx="2" ry="2" />
<text  x="222.17" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1621" width="0.2" height="15.0" fill="rgb(216,123,3)" rx="2" ry="2" />
<text  x="162.97" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (171 samples, 0.89%)</title><rect x="1130.9" y="2037" width="10.6" height="15.0" fill="rgb(246,4,31)" rx="2" ry="2" />
<text  x="1133.92" y="2047.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.01%)</title><rect x="942.0" y="1925" width="0.2" height="15.0" fill="rgb(251,151,47)" rx="2" ry="2" />
<text  x="945.04" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1669" width="0.2" height="15.0" fill="rgb(245,93,28)" rx="2" ry="2" />
<text  x="223.04" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1701" width="0.4" height="15.0" fill="rgb(245,153,14)" rx="2" ry="2" />
<text  x="1189.92" y="1711.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::~Dictionary (2 samples, 0.01%)</title><rect x="516.8" y="1989" width="0.1" height="15.0" fill="rgb(212,82,6)" rx="2" ry="2" />
<text  x="519.78" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1269" width="0.2" height="15.0" fill="rgb(246,172,53)" rx="2" ry="2" />
<text  x="163.04" y="1279.5" ></text>
</g>
<g >
<title>do_page_fault (12 samples, 0.06%)</title><rect x="646.8" y="1845" width="0.7" height="15.0" fill="rgb(216,193,36)" rx="2" ry="2" />
<text  x="649.77" y="1855.5" ></text>
</g>
<g >
<title>syscall (11 samples, 0.06%)</title><rect x="29.2" y="2005" width="0.7" height="15.0" fill="rgb(234,63,38)" rx="2" ry="2" />
<text  x="32.24" y="2015.5" ></text>
</g>
<g >
<title>onmt::unicode::get_case (234 samples, 1.22%)</title><rect x="693.4" y="1877" width="14.4" height="15.0" fill="rgb(233,40,5)" rx="2" ry="2" />
<text  x="696.39" y="1887.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (2 samples, 0.01%)</title><rect x="27.4" y="1925" width="0.1" height="15.0" fill="rgb(232,139,25)" rx="2" ry="2" />
<text  x="30.39" y="1935.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (10 samples, 0.05%)</title><rect x="803.5" y="2037" width="0.6" height="15.0" fill="rgb(242,188,5)" rx="2" ry="2" />
<text  x="806.47" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="741" width="0.3" height="15.0" fill="rgb(240,60,20)" rx="2" ry="2" />
<text  x="1189.98" y="751.5" ></text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.02%)</title><rect x="677.2" y="1765" width="0.2" height="15.0" fill="rgb(241,74,50)" rx="2" ry="2" />
<text  x="680.18" y="1775.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (7 samples, 0.04%)</title><rect x="943.9" y="1909" width="0.4" height="15.0" fill="rgb(246,57,24)" rx="2" ry="2" />
<text  x="946.89" y="1919.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (2 samples, 0.01%)</title><rect x="1123.8" y="2037" width="0.2" height="15.0" fill="rgb(225,229,8)" rx="2" ry="2" />
<text  x="1126.83" y="2047.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (8 samples, 0.04%)</title><rect x="763.4" y="1957" width="0.5" height="15.0" fill="rgb(210,33,53)" rx="2" ry="2" />
<text  x="766.45" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1253" width="0.3" height="15.0" fill="rgb(207,91,1)" rx="2" ry="2" />
<text  x="1189.98" y="1263.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (3 samples, 0.02%)</title><rect x="171.6" y="1589" width="0.2" height="15.0" fill="rgb(249,186,21)" rx="2" ry="2" />
<text  x="174.57" y="1599.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="220.6" y="1957" width="0.1" height="15.0" fill="rgb(217,75,0)" rx="2" ry="2" />
<text  x="223.59" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1589" width="0.1" height="15.0" fill="rgb(228,97,40)" rx="2" ry="2" />
<text  x="162.85" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 1.77%)</title><rect x="56.1" y="261" width="20.9" height="15.0" fill="rgb(233,64,37)" rx="2" ry="2" />
<text  x="59.13" y="271.5" ></text>
</g>
<g >
<title>handle_mm_fault (22 samples, 0.11%)</title><rect x="691.9" y="1797" width="1.4" height="15.0" fill="rgb(246,165,31)" rx="2" ry="2" />
<text  x="694.91" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer_weak_hook_strcmp (8 samples, 0.04%)</title><rect x="41.3" y="2021" width="0.5" height="15.0" fill="rgb(214,107,6)" rx="2" ry="2" />
<text  x="44.33" y="2031.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (19 samples, 0.10%)</title><rect x="101.2" y="2037" width="1.2" height="15.0" fill="rgb(230,12,10)" rx="2" ry="2" />
<text  x="104.21" y="2047.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.02%)</title><rect x="1103.7" y="1973" width="0.2" height="15.0" fill="rgb(205,131,17)" rx="2" ry="2" />
<text  x="1106.73" y="1983.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="198.6" y="1589" width="0.2" height="15.0" fill="rgb(230,213,37)" rx="2" ry="2" />
<text  x="201.64" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="389" width="0.1" height="15.0" fill="rgb(243,216,24)" rx="2" ry="2" />
<text  x="1190.72" y="399.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="43.7" y="2021" width="0.2" height="15.0" fill="rgb(236,60,32)" rx="2" ry="2" />
<text  x="46.73" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="293" width="0.1" height="15.0" fill="rgb(208,229,51)" rx="2" ry="2" />
<text  x="1190.72" y="303.5" ></text>
</g>
<g >
<title>__pthread_once_slow (3,730 samples, 19.49%)</title><rect x="523.4" y="2037" width="230.1" height="15.0" fill="rgb(215,131,19)" rx="2" ry="2" />
<text  x="526.44" y="2047.5" >__pthread_once_slow</text>
</g>
<g >
<title>do_futex (9 samples, 0.05%)</title><rect x="29.4" y="1941" width="0.5" height="15.0" fill="rgb(248,74,41)" rx="2" ry="2" />
<text  x="32.36" y="1951.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (34 samples, 0.18%)</title><rect x="1124.9" y="2053" width="2.1" height="15.0" fill="rgb(235,174,37)" rx="2" ry="2" />
<text  x="1127.94" y="2063.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (3 samples, 0.02%)</title><rect x="135.7" y="1557" width="0.2" height="15.0" fill="rgb(223,206,38)" rx="2" ry="2" />
<text  x="138.68" y="1567.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="165.3" y="1541" width="0.4" height="15.0" fill="rgb(213,134,9)" rx="2" ry="2" />
<text  x="168.28" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (464 samples, 2.42%)</title><rect x="56.1" y="1413" width="28.6" height="15.0" fill="rgb(247,112,53)" rx="2" ry="2" />
<text  x="59.07" y="1423.5" >[u..</text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.01%)</title><rect x="1022.0" y="1941" width="0.1" height="15.0" fill="rgb(242,118,20)" rx="2" ry="2" />
<text  x="1024.96" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (3 samples, 0.02%)</title><rect x="201.2" y="1733" width="0.2" height="15.0" fill="rgb(233,129,35)" rx="2" ry="2" />
<text  x="204.17" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1077" width="0.1" height="15.0" fill="rgb(230,9,43)" rx="2" ry="2" />
<text  x="162.85" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1187.7" y="2037" width="0.1" height="15.0" fill="rgb(254,134,15)" rx="2" ry="2" />
<text  x="1190.66" y="2047.5" ></text>
</g>
<g >
<title>up_read (2 samples, 0.01%)</title><rect x="946.0" y="1989" width="0.2" height="15.0" fill="rgb(240,132,21)" rx="2" ry="2" />
<text  x="949.04" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1157" width="0.1" height="15.0" fill="rgb(228,44,43)" rx="2" ry="2" />
<text  x="162.85" y="1167.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="89.6" y="1749" width="0.1" height="15.0" fill="rgb(222,162,50)" rx="2" ry="2" />
<text  x="92.61" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="807.8" y="2021" width="0.1" height="15.0" fill="rgb(248,114,35)" rx="2" ry="2" />
<text  x="810.79" y="2031.5" ></text>
</g>
<g >
<title>fasttext::Vector::addRow (21 samples, 0.11%)</title><rect x="493.2" y="1957" width="1.3" height="15.0" fill="rgb(210,128,54)" rx="2" ry="2" />
<text  x="496.16" y="1967.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const*, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;*&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1845" width="0.3" height="15.0" fill="rgb(252,143,45)" rx="2" ry="2" />
<text  x="519.53" y="1855.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (2 samples, 0.01%)</title><rect x="191.5" y="1637" width="0.1" height="15.0" fill="rgb(215,121,37)" rx="2" ry="2" />
<text  x="194.49" y="1647.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set@plt (3 samples, 0.02%)</title><rect x="568.3" y="1909" width="0.2" height="15.0" fill="rgb(251,177,29)" rx="2" ry="2" />
<text  x="571.33" y="1919.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="160.7" y="1621" width="0.1" height="15.0" fill="rgb(228,205,8)" rx="2" ry="2" />
<text  x="163.65" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (80 samples, 0.42%)</title><rect x="144.2" y="1669" width="5.0" height="15.0" fill="rgb(208,62,50)" rx="2" ry="2" />
<text  x="147.25" y="1679.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="677.4" y="1749" width="0.1" height="15.0" fill="rgb(247,196,25)" rx="2" ry="2" />
<text  x="680.42" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;, __sanitizer::SizeClassAllocatorLocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;, __sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt; &gt;::Allocate (3 samples, 0.02%)</title><rect x="754.3" y="2037" width="0.1" height="15.0" fill="rgb(209,98,6)" rx="2" ry="2" />
<text  x="757.26" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (370 samples, 1.93%)</title><rect x="56.1" y="1141" width="22.8" height="15.0" fill="rgb(225,70,49)" rx="2" ry="2" />
<text  x="59.13" y="1151.5" >[..</text>
</g>
<g >
<title>TFastTextEmbedder::GetSentenceEmbedding (1,833 samples, 9.58%)</title><rect x="220.8" y="1989" width="113.0" height="15.0" fill="rgb(213,67,15)" rx="2" ry="2" />
<text  x="223.78" y="1999.5" >TFastTextEmbe..</text>
</g>
<g >
<title>__libc_start_main (6,399 samples, 33.44%)</title><rect x="122.9" y="2037" width="394.6" height="15.0" fill="rgb(234,172,53)" rx="2" ry="2" />
<text  x="125.91" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>TSlinkClustering::FillDistanceMatrix (241 samples, 1.26%)</title><rect x="495.2" y="1973" width="14.9" height="15.0" fill="rgb(207,3,45)" rx="2" ry="2" />
<text  x="498.20" y="1983.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (7 samples, 0.04%)</title><rect x="1160.7" y="2037" width="0.4" height="15.0" fill="rgb(253,143,41)" rx="2" ry="2" />
<text  x="1163.71" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1653" width="0.2" height="15.0" fill="rgb(228,229,44)" rx="2" ry="2" />
<text  x="223.04" y="1663.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="172.6" y="1621" width="0.2" height="15.0" fill="rgb(232,92,31)" rx="2" ry="2" />
<text  x="175.62" y="1631.5" ></text>
</g>
<g >
<title>__do_munmap (6 samples, 0.03%)</title><rect x="1101.9" y="1925" width="0.4" height="15.0" fill="rgb(248,186,26)" rx="2" ry="2" />
<text  x="1104.94" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int const&amp;&gt; (2 samples, 0.01%)</title><rect x="877.2" y="2037" width="0.1" height="15.0" fill="rgb(207,187,53)" rx="2" ry="2" />
<text  x="880.16" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (41 samples, 0.21%)</title><rect x="1166.6" y="2021" width="2.5" height="15.0" fill="rgb(219,90,50)" rx="2" ry="2" />
<text  x="1169.57" y="2031.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="183.0" y="1685" width="0.1" height="15.0" fill="rgb(205,49,25)" rx="2" ry="2" />
<text  x="185.98" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1909" width="0.1" height="15.0" fill="rgb(206,174,7)" rx="2" ry="2" />
<text  x="58.88" y="1919.5" ></text>
</g>
<g >
<title>ptep_clear_flush (25 samples, 0.13%)</title><rect x="944.4" y="1925" width="1.5" height="15.0" fill="rgb(216,142,29)" rx="2" ry="2" />
<text  x="947.38" y="1935.5" ></text>
</g>
<g >
<title>try_to_wake_up (7 samples, 0.04%)</title><rect x="29.5" y="1893" width="0.4" height="15.0" fill="rgb(220,171,34)" rx="2" ry="2" />
<text  x="32.49" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="917" width="0.1" height="15.0" fill="rgb(218,184,29)" rx="2" ry="2" />
<text  x="1190.72" y="927.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (4 samples, 0.02%)</title><rect x="193.5" y="1557" width="0.2" height="15.0" fill="rgb(211,209,26)" rx="2" ry="2" />
<text  x="196.46" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (2 samples, 0.01%)</title><rect x="133.5" y="1621" width="0.1" height="15.0" fill="rgb(239,12,27)" rx="2" ry="2" />
<text  x="136.46" y="1631.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::Enqueue (106 samples, 0.55%)</title><rect x="755.0" y="2037" width="6.5" height="15.0" fill="rgb(251,102,1)" rx="2" ry="2" />
<text  x="758.00" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="92.6" y="1941" width="0.1" height="15.0" fill="rgb(223,18,29)" rx="2" ry="2" />
<text  x="95.57" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1187.5" y="133" width="0.2" height="15.0" fill="rgb(229,172,6)" rx="2" ry="2" />
<text  x="1190.47" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (70 samples, 0.37%)</title><rect x="154.4" y="1733" width="4.3" height="15.0" fill="rgb(248,21,19)" rx="2" ry="2" />
<text  x="157.36" y="1743.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="169.3" y="1573" width="0.1" height="15.0" fill="rgb(235,77,16)" rx="2" ry="2" />
<text  x="172.29" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="188.5" y="1701" width="0.1" height="15.0" fill="rgb(253,202,10)" rx="2" ry="2" />
<text  x="191.46" y="1711.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (2 samples, 0.01%)</title><rect x="91.9" y="1765" width="0.1" height="15.0" fill="rgb(225,179,26)" rx="2" ry="2" />
<text  x="94.89" y="1775.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (46 samples, 0.24%)</title><rect x="193.0" y="1573" width="2.8" height="15.0" fill="rgb(209,22,22)" rx="2" ry="2" />
<text  x="195.97" y="1583.5" ></text>
</g>
<g >
<title>operator new (29 samples, 0.15%)</title><rect x="602.4" y="1861" width="1.8" height="15.0" fill="rgb(231,189,45)" rx="2" ry="2" />
<text  x="605.37" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="763.2" y="2021" width="0.2" height="15.0" fill="rgb(222,130,39)" rx="2" ry="2" />
<text  x="766.20" y="2031.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (5 samples, 0.03%)</title><rect x="156.0" y="1669" width="0.3" height="15.0" fill="rgb(245,57,12)" rx="2" ry="2" />
<text  x="159.03" y="1679.5" ></text>
</g>
<g >
<title>Eigen::internal::gebp_kernel&lt;float, float, long, Eigen::internal::blas_data_mapper&lt;float, long, 0, 0, 1&gt;, 8, 4, false, false&gt;::operator (131 samples, 0.68%)</title><rect x="499.7" y="1909" width="8.1" height="15.0" fill="rgb(246,66,29)" rx="2" ry="2" />
<text  x="502.70" y="1919.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (2 samples, 0.01%)</title><rect x="182.5" y="1701" width="0.1" height="15.0" fill="rgb(215,156,51)" rx="2" ry="2" />
<text  x="185.48" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1205" width="0.2" height="15.0" fill="rgb(228,35,50)" rx="2" ry="2" />
<text  x="223.35" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (7 samples, 0.04%)</title><rect x="191.2" y="1685" width="0.5" height="15.0" fill="rgb(232,28,33)" rx="2" ry="2" />
<text  x="194.24" y="1695.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (46 samples, 0.24%)</title><rect x="653.6" y="1877" width="2.9" height="15.0" fill="rgb(237,149,23)" rx="2" ry="2" />
<text  x="656.62" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (544 samples, 2.84%)</title><rect x="56.1" y="1749" width="33.5" height="15.0" fill="rgb(210,43,10)" rx="2" ry="2" />
<text  x="59.07" y="1759.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1285" width="0.3" height="15.0" fill="rgb(208,78,20)" rx="2" ry="2" />
<text  x="1190.41" y="1295.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="43.7" y="2005" width="0.2" height="15.0" fill="rgb(215,71,29)" rx="2" ry="2" />
<text  x="46.73" y="2015.5" ></text>
</g>
<g >
<title>fasttext::FastText::predict (2 samples, 0.01%)</title><rect x="538.5" y="1925" width="0.2" height="15.0" fill="rgb(247,182,46)" rx="2" ry="2" />
<text  x="541.55" y="1935.5" ></text>
</g>
<g >
<title>__vma_adjust (2 samples, 0.01%)</title><rect x="763.6" y="1877" width="0.1" height="15.0" fill="rgb(220,149,28)" rx="2" ry="2" />
<text  x="766.57" y="1887.5" ></text>
</g>
<g >
<title>__do_page_fault (6 samples, 0.03%)</title><rect x="1021.9" y="2005" width="0.4" height="15.0" fill="rgb(206,137,8)" rx="2" ry="2" />
<text  x="1024.90" y="2015.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump_escaped (4 samples, 0.02%)</title><rect x="515.5" y="1909" width="0.3" height="15.0" fill="rgb(251,3,24)" rx="2" ry="2" />
<text  x="518.55" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="965" width="0.1" height="15.0" fill="rgb(237,197,6)" rx="2" ry="2" />
<text  x="162.85" y="975.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (122 samples, 0.64%)</title><rect x="1141.5" y="2037" width="7.5" height="15.0" fill="rgb(207,43,24)" rx="2" ry="2" />
<text  x="1144.47" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (75 samples, 0.39%)</title><rect x="177.8" y="1701" width="4.6" height="15.0" fill="rgb(215,29,47)" rx="2" ry="2" />
<text  x="180.80" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (594 samples, 3.10%)</title><rect x="56.1" y="1957" width="36.6" height="15.0" fill="rgb(244,178,49)" rx="2" ry="2" />
<text  x="59.07" y="1967.5" >[un..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (76 samples, 0.40%)</title><rect x="177.7" y="1765" width="4.7" height="15.0" fill="rgb(245,60,7)" rx="2" ry="2" />
<text  x="180.73" y="1775.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::append@plt (2 samples, 0.01%)</title><rect x="576.7" y="1893" width="0.1" height="15.0" fill="rgb(228,148,3)" rx="2" ry="2" />
<text  x="579.72" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1797" width="0.4" height="15.0" fill="rgb(217,17,0)" rx="2" ry="2" />
<text  x="1189.92" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1285" width="0.3" height="15.0" fill="rgb(210,120,14)" rx="2" ry="2" />
<text  x="1189.98" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1301" width="0.3" height="15.0" fill="rgb(250,56,44)" rx="2" ry="2" />
<text  x="1190.41" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1653" width="0.4" height="15.0" fill="rgb(241,27,21)" rx="2" ry="2" />
<text  x="1189.92" y="1663.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="516.5" y="1973" width="0.3" height="15.0" fill="rgb(222,162,34)" rx="2" ry="2" />
<text  x="519.53" y="1983.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (4 samples, 0.02%)</title><rect x="315.7" y="1909" width="0.2" height="15.0" fill="rgb(244,206,28)" rx="2" ry="2" />
<text  x="318.68" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1381" width="0.2" height="15.0" fill="rgb(218,175,49)" rx="2" ry="2" />
<text  x="223.35" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (77 samples, 0.40%)</title><rect x="213.6" y="1733" width="4.8" height="15.0" fill="rgb(252,163,13)" rx="2" ry="2" />
<text  x="216.62" y="1743.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (3 samples, 0.02%)</title><rect x="517.8" y="2037" width="0.2" height="15.0" fill="rgb(243,133,35)" rx="2" ry="2" />
<text  x="520.77" y="2047.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.02%)</title><rect x="175.6" y="1589" width="0.3" height="15.0" fill="rgb(219,88,19)" rx="2" ry="2" />
<text  x="178.64" y="1599.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (2 samples, 0.01%)</title><rect x="1104.0" y="2037" width="0.1" height="15.0" fill="rgb(238,187,52)" rx="2" ry="2" />
<text  x="1106.97" y="2047.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="164.2" y="1541" width="0.2" height="15.0" fill="rgb(240,16,46)" rx="2" ry="2" />
<text  x="167.23" y="1551.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="877.2" y="2021" width="0.1" height="15.0" fill="rgb(246,7,29)" rx="2" ry="2" />
<text  x="880.16" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1557" width="0.1" height="15.0" fill="rgb(212,189,23)" rx="2" ry="2" />
<text  x="1190.72" y="1567.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (6 samples, 0.03%)</title><rect x="1179.5" y="2037" width="0.3" height="15.0" fill="rgb(226,69,3)" rx="2" ry="2" />
<text  x="1182.45" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::ReleaseFreeMemoryToOS&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::MemoryMapper&gt; (16 samples, 0.08%)</title><rect x="1020.7" y="2053" width="0.9" height="15.0" fill="rgb(211,211,30)" rx="2" ry="2" />
<text  x="1023.66" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1893" width="0.4" height="15.0" fill="rgb(231,30,3)" rx="2" ry="2" />
<text  x="1190.35" y="1903.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.02%)</title><rect x="180.5" y="1621" width="0.2" height="15.0" fill="rgb(253,45,11)" rx="2" ry="2" />
<text  x="183.51" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="185.3" y="1653" width="0.2" height="15.0" fill="rgb(235,85,19)" rx="2" ry="2" />
<text  x="188.32" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (75 samples, 0.39%)</title><rect x="177.8" y="1685" width="4.6" height="15.0" fill="rgb(229,135,26)" rx="2" ry="2" />
<text  x="180.80" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="53" width="0.1" height="15.0" fill="rgb(254,162,33)" rx="2" ry="2" />
<text  x="1190.72" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 0.04%)</title><rect x="1103.0" y="2037" width="0.4" height="15.0" fill="rgb(235,186,34)" rx="2" ry="2" />
<text  x="1105.99" y="2047.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (3 samples, 0.02%)</title><rect x="752.8" y="1957" width="0.2" height="15.0" fill="rgb(215,221,22)" rx="2" ry="2" />
<text  x="755.84" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="159.0" y="1845" width="0.4" height="15.0" fill="rgb(225,209,43)" rx="2" ry="2" />
<text  x="162.05" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (91 samples, 0.48%)</title><rect x="182.6" y="1717" width="5.6" height="15.0" fill="rgb(224,158,5)" rx="2" ry="2" />
<text  x="185.61" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="373" width="0.3" height="15.0" fill="rgb(240,83,52)" rx="2" ry="2" />
<text  x="1190.04" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="565" width="0.1" height="15.0" fill="rgb(210,139,15)" rx="2" ry="2" />
<text  x="1190.72" y="575.5" ></text>
</g>
<g >
<title>__madvise (19 samples, 0.10%)</title><rect x="519.6" y="2037" width="1.1" height="15.0" fill="rgb(209,195,36)" rx="2" ry="2" />
<text  x="522.56" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1717" width="0.4" height="15.0" fill="rgb(233,78,15)" rx="2" ry="2" />
<text  x="1189.92" y="1727.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.11%)</title><rect x="613.5" y="1845" width="1.3" height="15.0" fill="rgb(221,176,39)" rx="2" ry="2" />
<text  x="616.47" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (340 samples, 1.78%)</title><rect x="56.1" y="325" width="21.0" height="15.0" fill="rgb(212,117,24)" rx="2" ry="2" />
<text  x="59.13" y="335.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="43.2" y="2005" width="0.1" height="15.0" fill="rgb(241,122,42)" rx="2" ry="2" />
<text  x="46.18" y="2015.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (18 samples, 0.09%)</title><rect x="323.0" y="1941" width="1.1" height="15.0" fill="rgb(237,178,12)" rx="2" ry="2" />
<text  x="326.02" y="1951.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="318.7" y="1957" width="0.1" height="15.0" fill="rgb(240,121,47)" rx="2" ry="2" />
<text  x="321.71" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (8 samples, 0.04%)</title><rect x="133.1" y="1701" width="0.5" height="15.0" fill="rgb(233,143,40)" rx="2" ry="2" />
<text  x="136.09" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1749" width="0.1" height="15.0" fill="rgb(214,143,31)" rx="2" ry="2" />
<text  x="192.51" y="1759.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.02%)</title><rect x="1017.8" y="2005" width="0.2" height="15.0" fill="rgb(215,149,0)" rx="2" ry="2" />
<text  x="1020.83" y="2015.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.03%)</title><rect x="211.0" y="1637" width="0.3" height="15.0" fill="rgb(219,220,50)" rx="2" ry="2" />
<text  x="213.97" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1909" width="0.1" height="15.0" fill="rgb(209,68,13)" rx="2" ry="2" />
<text  x="192.51" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (278 samples, 1.45%)</title><rect x="160.6" y="1765" width="17.1" height="15.0" fill="rgb(249,88,47)" rx="2" ry="2" />
<text  x="163.59" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1637" width="0.1" height="15.0" fill="rgb(234,193,0)" rx="2" ry="2" />
<text  x="192.51" y="1647.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1909" width="0.3" height="15.0" fill="rgb(232,138,13)" rx="2" ry="2" />
<text  x="519.53" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (8 samples, 0.04%)</title><rect x="880.3" y="2037" width="0.5" height="15.0" fill="rgb(251,68,41)" rx="2" ry="2" />
<text  x="883.31" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (348 samples, 1.82%)</title><rect x="56.1" y="693" width="21.5" height="15.0" fill="rgb(220,56,36)" rx="2" ry="2" />
<text  x="59.13" y="703.5" >[..</text>
</g>
<g >
<title>std::__merge_sort_with_buffer&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (5 samples, 0.03%)</title><rect x="517.1" y="1989" width="0.3" height="15.0" fill="rgb(228,202,14)" rx="2" ry="2" />
<text  x="520.09" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1621" width="0.1" height="15.0" fill="rgb(233,150,41)" rx="2" ry="2" />
<text  x="1190.72" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1701" width="0.1" height="15.0" fill="rgb(247,16,32)" rx="2" ry="2" />
<text  x="162.85" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="219.9" y="1909" width="0.6" height="15.0" fill="rgb(237,51,52)" rx="2" ry="2" />
<text  x="222.91" y="1919.5" ></text>
</g>
<g >
<title>Eigen::internal::gemm_pack_lhs&lt;float, long, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, 8, 4, float __vector (2 samples, 0.01%)</title><rect x="507.8" y="1909" width="0.1" height="15.0" fill="rgb(244,63,25)" rx="2" ry="2" />
<text  x="510.78" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="741" width="0.3" height="15.0" fill="rgb(210,96,29)" rx="2" ry="2" />
<text  x="1190.41" y="751.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (366 samples, 1.91%)</title><rect x="542.9" y="1893" width="22.5" height="15.0" fill="rgb(246,25,41)" rx="2" ry="2" />
<text  x="545.87" y="1903.5" >f..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1669" width="0.2" height="15.0" fill="rgb(243,33,49)" rx="2" ry="2" />
<text  x="223.28" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (87 samples, 0.45%)</title><rect x="166.7" y="1685" width="5.4" height="15.0" fill="rgb(213,73,1)" rx="2" ry="2" />
<text  x="169.70" y="1695.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;::setConstant (35 samples, 0.18%)</title><rect x="497.5" y="1941" width="2.2" height="15.0" fill="rgb(212,82,4)" rx="2" ry="2" />
<text  x="500.54" y="1951.5" ></text>
</g>
<g >
<title>__interceptor___strxfrm_l (2 samples, 0.01%)</title><rect x="1000.5" y="2053" width="0.1" height="15.0" fill="rgb(227,82,24)" rx="2" ry="2" />
<text  x="1003.50" y="2063.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (15 samples, 0.08%)</title><rect x="1101.9" y="1989" width="0.9" height="15.0" fill="rgb(235,224,0)" rx="2" ry="2" />
<text  x="1104.88" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.0" y="1541" width="0.2" height="15.0" fill="rgb(220,32,2)" rx="2" ry="2" />
<text  x="223.04" y="1551.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (14 samples, 0.07%)</title><rect x="519.7" y="1925" width="0.8" height="15.0" fill="rgb(252,157,49)" rx="2" ry="2" />
<text  x="522.68" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.03%)</title><rect x="209.6" y="1637" width="0.3" height="15.0" fill="rgb(229,29,50)" rx="2" ry="2" />
<text  x="212.62" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (3 samples, 0.02%)</title><rect x="182.4" y="1733" width="0.2" height="15.0" fill="rgb(243,44,29)" rx="2" ry="2" />
<text  x="185.42" y="1743.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="185.9" y="1653" width="0.1" height="15.0" fill="rgb(210,38,16)" rx="2" ry="2" />
<text  x="188.87" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1029" width="0.1" height="15.0" fill="rgb(224,119,35)" rx="2" ry="2" />
<text  x="1190.72" y="1039.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="814.3" y="2005" width="0.1" height="15.0" fill="rgb(205,21,48)" rx="2" ry="2" />
<text  x="817.26" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (8 samples, 0.04%)</title><rect x="813.4" y="2005" width="0.5" height="15.0" fill="rgb(235,3,36)" rx="2" ry="2" />
<text  x="816.40" y="2015.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="516.5" y="1781" width="0.2" height="15.0" fill="rgb(243,28,27)" rx="2" ry="2" />
<text  x="519.53" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="174.5" y="1589" width="0.3" height="15.0" fill="rgb(236,125,1)" rx="2" ry="2" />
<text  x="177.53" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1301" width="0.1" height="15.0" fill="rgb(243,29,49)" rx="2" ry="2" />
<text  x="162.85" y="1311.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (3 samples, 0.02%)</title><rect x="179.8" y="1621" width="0.2" height="15.0" fill="rgb(212,106,54)" rx="2" ry="2" />
<text  x="182.77" y="1631.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.03%)</title><rect x="763.9" y="2021" width="0.4" height="15.0" fill="rgb(227,130,29)" rx="2" ry="2" />
<text  x="766.94" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (72 samples, 0.38%)</title><rect x="144.5" y="1637" width="4.4" height="15.0" fill="rgb(238,221,20)" rx="2" ry="2" />
<text  x="147.50" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (426 samples, 2.23%)</title><rect x="56.1" y="1317" width="26.2" height="15.0" fill="rgb(209,79,54)" rx="2" ry="2" />
<text  x="59.07" y="1327.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1445" width="0.2" height="15.0" fill="rgb(254,87,53)" rx="2" ry="2" />
<text  x="162.97" y="1455.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="141.4" y="1589" width="0.1" height="15.0" fill="rgb(243,35,37)" rx="2" ry="2" />
<text  x="144.35" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="37" width="0.3" height="15.0" fill="rgb(219,221,45)" rx="2" ry="2" />
<text  x="1190.04" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="189.2" y="1749" width="0.1" height="15.0" fill="rgb(210,17,35)" rx="2" ry="2" />
<text  x="192.20" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (435 samples, 2.27%)</title><rect x="56.1" y="1333" width="26.8" height="15.0" fill="rgb(216,168,19)" rx="2" ry="2" />
<text  x="59.07" y="1343.5" >[..</text>
</g>
<g >
<title>[unknown] (546 samples, 2.85%)</title><rect x="56.1" y="1765" width="33.6" height="15.0" fill="rgb(251,43,38)" rx="2" ry="2" />
<text  x="59.07" y="1775.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (83 samples, 0.43%)</title><rect x="161.4" y="1621" width="5.1" height="15.0" fill="rgb(228,13,31)" rx="2" ry="2" />
<text  x="164.39" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="188.6" y="1829" width="0.2" height="15.0" fill="rgb(237,73,5)" rx="2" ry="2" />
<text  x="191.65" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (22 samples, 0.11%)</title><rect x="326.3" y="1941" width="1.3" height="15.0" fill="rgb(244,57,8)" rx="2" ry="2" />
<text  x="329.29" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1269" width="0.2" height="15.0" fill="rgb(245,55,8)" rx="2" ry="2" />
<text  x="223.04" y="1279.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.01%)</title><rect x="508.5" y="1877" width="0.1" height="15.0" fill="rgb(248,42,29)" rx="2" ry="2" />
<text  x="511.52" y="1887.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (95 samples, 0.50%)</title><rect x="721.3" y="1877" width="5.8" height="15.0" fill="rgb(205,189,29)" rx="2" ry="2" />
<text  x="724.27" y="1887.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="210.0" y="1637" width="0.1" height="15.0" fill="rgb(236,48,11)" rx="2" ry="2" />
<text  x="212.99" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="219.1" y="1749" width="0.1" height="15.0" fill="rgb(242,166,9)" rx="2" ry="2" />
<text  x="222.05" y="1759.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (29 samples, 0.15%)</title><rect x="488.7" y="1925" width="1.7" height="15.0" fill="rgb(234,52,4)" rx="2" ry="2" />
<text  x="491.66" y="1935.5" ></text>
</g>
<g >
<title>do_page_fault (97 samples, 0.51%)</title><rect x="22.5" y="2021" width="5.9" height="15.0" fill="rgb(245,3,35)" rx="2" ry="2" />
<text  x="25.46" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="1121.4" y="2037" width="0.1" height="15.0" fill="rgb(254,210,26)" rx="2" ry="2" />
<text  x="1124.43" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1381" width="0.2" height="15.0" fill="rgb(214,157,37)" rx="2" ry="2" />
<text  x="223.04" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="220.0" y="1781" width="0.5" height="15.0" fill="rgb(215,220,47)" rx="2" ry="2" />
<text  x="222.98" y="1791.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="195.1" y="1557" width="0.1" height="15.0" fill="rgb(231,23,36)" rx="2" ry="2" />
<text  x="198.06" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="645" width="0.1" height="15.0" fill="rgb(230,153,5)" rx="2" ry="2" />
<text  x="1190.72" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (8 samples, 0.04%)</title><rect x="218.9" y="1877" width="0.5" height="15.0" fill="rgb(243,222,31)" rx="2" ry="2" />
<text  x="221.87" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (88 samples, 0.46%)</title><rect x="172.2" y="1733" width="5.4" height="15.0" fill="rgb(249,186,22)" rx="2" ry="2" />
<text  x="175.18" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="277" width="0.1" height="15.0" fill="rgb(237,133,40)" rx="2" ry="2" />
<text  x="1190.72" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1317" width="0.3" height="15.0" fill="rgb(239,70,14)" rx="2" ry="2" />
<text  x="1189.98" y="1327.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.05%)</title><rect x="819.6" y="2005" width="0.5" height="15.0" fill="rgb(246,131,23)" rx="2" ry="2" />
<text  x="822.57" y="2015.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="192.0" y="1589" width="0.2" height="15.0" fill="rgb(231,166,7)" rx="2" ry="2" />
<text  x="195.04" y="1599.5" ></text>
</g>
<g >
<title>__pthread_getspecific (100 samples, 0.52%)</title><rect x="1003.5" y="2053" width="6.1" height="15.0" fill="rgb(235,189,50)" rx="2" ry="2" />
<text  x="1006.46" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (255 samples, 1.33%)</title><rect x="56.1" y="37" width="15.8" height="15.0" fill="rgb(230,64,34)" rx="2" ry="2" />
<text  x="59.13" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1013" width="0.1" height="15.0" fill="rgb(211,215,48)" rx="2" ry="2" />
<text  x="162.85" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="389" width="0.3" height="15.0" fill="rgb(236,52,21)" rx="2" ry="2" />
<text  x="1190.41" y="399.5" ></text>
</g>
<g >
<title>do_mmap (7 samples, 0.04%)</title><rect x="763.4" y="1941" width="0.5" height="15.0" fill="rgb(216,159,35)" rx="2" ry="2" />
<text  x="766.45" y="1951.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (321 samples, 1.68%)</title><rect x="385.1" y="1925" width="19.8" height="15.0" fill="rgb(248,168,7)" rx="2" ry="2" />
<text  x="388.12" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.9" y="1957" width="0.4" height="15.0" fill="rgb(220,204,28)" rx="2" ry="2" />
<text  x="1189.85" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="597" width="0.1" height="15.0" fill="rgb(222,162,7)" rx="2" ry="2" />
<text  x="1190.72" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="533" width="0.1" height="15.0" fill="rgb(226,43,44)" rx="2" ry="2" />
<text  x="1190.72" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (415 samples, 2.17%)</title><rect x="133.1" y="1829" width="25.6" height="15.0" fill="rgb(234,29,0)" rx="2" ry="2" />
<text  x="136.09" y="1839.5" >s..</text>
</g>
<g >
<title>find_vma (3 samples, 0.02%)</title><rect x="940.7" y="1989" width="0.2" height="15.0" fill="rgb(246,63,2)" rx="2" ry="2" />
<text  x="943.74" y="1999.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (4 samples, 0.02%)</title><rect x="1122.5" y="2037" width="0.3" height="15.0" fill="rgb(230,46,47)" rx="2" ry="2" />
<text  x="1125.54" y="2047.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="158.2" y="1685" width="0.2" height="15.0" fill="rgb(208,40,5)" rx="2" ry="2" />
<text  x="161.25" y="1695.5" ></text>
</g>
<g >
<title>smp_call_function_many (4 samples, 0.02%)</title><rect x="519.7" y="1845" width="0.3" height="15.0" fill="rgb(245,82,27)" rx="2" ry="2" />
<text  x="522.74" y="1855.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="54.7" y="1877" width="0.1" height="15.0" fill="rgb(239,204,25)" rx="2" ry="2" />
<text  x="57.71" y="1887.5" ></text>
</g>
<g >
<title>clear_page_erms (16 samples, 0.08%)</title><rect x="508.7" y="1845" width="1.0" height="15.0" fill="rgb(242,206,24)" rx="2" ry="2" />
<text  x="511.70" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (4 samples, 0.02%)</title><rect x="93.3" y="1989" width="0.2" height="15.0" fill="rgb(248,3,1)" rx="2" ry="2" />
<text  x="96.25" y="1999.5" ></text>
</g>
<g >
<title>__dynamic_cast (44 samples, 0.23%)</title><rect x="997.8" y="2053" width="2.7" height="15.0" fill="rgb(207,78,0)" rx="2" ry="2" />
<text  x="1000.78" y="2063.5" ></text>
</g>
<g >
<title>find_vma (2 samples, 0.01%)</title><rect x="760.9" y="1973" width="0.1" height="15.0" fill="rgb(215,198,37)" rx="2" ry="2" />
<text  x="763.86" y="1983.5" ></text>
</g>
<g >
<title>__lsan::DisabledInThisThread (18 samples, 0.09%)</title><rect x="1002.3" y="2053" width="1.2" height="15.0" fill="rgb(247,67,31)" rx="2" ry="2" />
<text  x="1005.35" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1349" width="0.1" height="15.0" fill="rgb(230,136,48)" rx="2" ry="2" />
<text  x="1190.72" y="1359.5" ></text>
</g>
<g >
<title>__handle_mm_fault (79 samples, 0.41%)</title><rect x="941.0" y="1973" width="4.9" height="15.0" fill="rgb(252,123,18)" rx="2" ry="2" />
<text  x="944.05" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (103 samples, 0.54%)</title><rect x="207.0" y="1701" width="6.3" height="15.0" fill="rgb(230,123,0)" rx="2" ry="2" />
<text  x="209.96" y="1711.5" ></text>
</g>
<g >
<title>generic_exec_single (19 samples, 0.10%)</title><rect x="944.7" y="1813" width="1.2" height="15.0" fill="rgb(216,7,24)" rx="2" ry="2" />
<text  x="947.75" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14 samples, 0.07%)</title><rect x="1186.8" y="2053" width="0.9" height="15.0" fill="rgb(218,122,28)" rx="2" ry="2" />
<text  x="1189.79" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (2 samples, 0.01%)</title><rect x="515.4" y="1909" width="0.1" height="15.0" fill="rgb(218,86,54)" rx="2" ry="2" />
<text  x="518.42" y="1919.5" ></text>
</g>
<g >
<title>__asan::asan_delete (2 samples, 0.01%)</title><rect x="141.2" y="1589" width="0.2" height="15.0" fill="rgb(208,212,52)" rx="2" ry="2" />
<text  x="144.23" y="1599.5" ></text>
</g>
<g >
<title>page_fault (6 samples, 0.03%)</title><rect x="651.3" y="1861" width="0.4" height="15.0" fill="rgb(236,18,24)" rx="2" ry="2" />
<text  x="654.34" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (2 samples, 0.01%)</title><rect x="86.9" y="1541" width="0.1" height="15.0" fill="rgb(216,123,19)" rx="2" ry="2" />
<text  x="89.90" y="1551.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (3 samples, 0.02%)</title><rect x="1126.8" y="2037" width="0.2" height="15.0" fill="rgb(252,187,37)" rx="2" ry="2" />
<text  x="1129.79" y="2047.5" ></text>
</g>
<g >
<title>ksys_read (3 samples, 0.02%)</title><rect x="1111.1" y="1973" width="0.2" height="15.0" fill="rgb(220,196,19)" rx="2" ry="2" />
<text  x="1114.13" y="1983.5" ></text>
</g>
<g >
<title>__interceptor_memchr (2 samples, 0.01%)</title><rect x="1150.5" y="2037" width="0.1" height="15.0" fill="rgb(231,62,0)" rx="2" ry="2" />
<text  x="1153.47" y="2047.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.03%)</title><rect x="205.1" y="1605" width="0.3" height="15.0" fill="rgb(222,4,25)" rx="2" ry="2" />
<text  x="208.11" y="1615.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (3 samples, 0.02%)</title><rect x="325.9" y="1941" width="0.2" height="15.0" fill="rgb(252,14,7)" rx="2" ry="2" />
<text  x="328.92" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (6 samples, 0.03%)</title><rect x="753.9" y="2037" width="0.4" height="15.0" fill="rgb(226,64,12)" rx="2" ry="2" />
<text  x="756.89" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (351 samples, 1.83%)</title><rect x="56.1" y="773" width="21.7" height="15.0" fill="rgb(244,95,44)" rx="2" ry="2" />
<text  x="59.13" y="783.5" >[..</text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (90 samples, 0.47%)</title><rect x="182.6" y="1701" width="5.6" height="15.0" fill="rgb(244,16,5)" rx="2" ry="2" />
<text  x="185.61" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1187.3" y="2037" width="0.4" height="15.0" fill="rgb(226,1,32)" rx="2" ry="2" />
<text  x="1190.29" y="2047.5" ></text>
</g>
<g >
<title>do_mmap (13 samples, 0.07%)</title><rect x="1101.9" y="1957" width="0.8" height="15.0" fill="rgb(238,168,20)" rx="2" ry="2" />
<text  x="1104.94" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1029" width="0.3" height="15.0" fill="rgb(208,149,51)" rx="2" ry="2" />
<text  x="1189.98" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="159.9" y="1813" width="0.3" height="15.0" fill="rgb(254,108,35)" rx="2" ry="2" />
<text  x="162.85" y="1823.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (14 samples, 0.07%)</title><rect x="1149.7" y="2053" width="0.9" height="15.0" fill="rgb(243,94,10)" rx="2" ry="2" />
<text  x="1152.73" y="2063.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (3 samples, 0.02%)</title><rect x="1111.1" y="2053" width="0.2" height="15.0" fill="rgb(232,109,25)" rx="2" ry="2" />
<text  x="1114.13" y="2063.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (3 samples, 0.02%)</title><rect x="190.6" y="1989" width="0.2" height="15.0" fill="rgb(232,139,31)" rx="2" ry="2" />
<text  x="193.62" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="597" width="0.3" height="15.0" fill="rgb(245,226,33)" rx="2" ry="2" />
<text  x="1190.04" y="607.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (4 samples, 0.02%)</title><rect x="164.4" y="1541" width="0.3" height="15.0" fill="rgb(232,87,15)" rx="2" ry="2" />
<text  x="167.41" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (76 samples, 0.40%)</title><rect x="196.5" y="1733" width="4.7" height="15.0" fill="rgb(231,165,6)" rx="2" ry="2" />
<text  x="199.48" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="405" width="0.3" height="15.0" fill="rgb(213,137,40)" rx="2" ry="2" />
<text  x="1190.04" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1237" width="0.1" height="15.0" fill="rgb(233,14,23)" rx="2" ry="2" />
<text  x="162.85" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1957" width="0.1" height="15.0" fill="rgb(217,25,44)" rx="2" ry="2" />
<text  x="1190.72" y="1967.5" ></text>
</g>
<g >
<title>onmt::unicode::is_separator (6 samples, 0.03%)</title><rect x="733.0" y="1893" width="0.4" height="15.0" fill="rgb(229,135,44)" rx="2" ry="2" />
<text  x="735.99" y="1903.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (173 samples, 0.90%)</title><rect x="319.1" y="1957" width="10.6" height="15.0" fill="rgb(226,208,33)" rx="2" ry="2" />
<text  x="322.08" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1509" width="0.4" height="15.0" fill="rgb(208,117,16)" rx="2" ry="2" />
<text  x="1190.35" y="1519.5" ></text>
</g>
<g >
<title>operator delete[] (4 samples, 0.02%)</title><rect x="1110.6" y="2053" width="0.2" height="15.0" fill="rgb(244,117,35)" rx="2" ry="2" />
<text  x="1113.57" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1781" width="0.4" height="15.0" fill="rgb(228,104,3)" rx="2" ry="2" />
<text  x="1190.35" y="1791.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="144.1" y="1621" width="0.1" height="15.0" fill="rgb(208,117,46)" rx="2" ry="2" />
<text  x="147.06" y="1631.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (2 samples, 0.01%)</title><rect x="481.1" y="1941" width="0.1" height="15.0" fill="rgb(234,4,3)" rx="2" ry="2" />
<text  x="484.07" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="189.0" y="1781" width="0.2" height="15.0" fill="rgb(210,61,20)" rx="2" ry="2" />
<text  x="192.02" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="181" width="0.1" height="15.0" fill="rgb(234,62,16)" rx="2" ry="2" />
<text  x="1190.72" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1637" width="0.4" height="15.0" fill="rgb(246,144,43)" rx="2" ry="2" />
<text  x="1190.35" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1349" width="0.2" height="15.0" fill="rgb(216,72,43)" rx="2" ry="2" />
<text  x="223.35" y="1359.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="195.6" y="1557" width="0.1" height="15.0" fill="rgb(215,201,11)" rx="2" ry="2" />
<text  x="198.62" y="1567.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (2 samples, 0.01%)</title><rect x="565.7" y="1909" width="0.1" height="15.0" fill="rgb(216,42,22)" rx="2" ry="2" />
<text  x="568.68" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="189.0" y="1845" width="0.3" height="15.0" fill="rgb(220,7,15)" rx="2" ry="2" />
<text  x="191.96" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="757" width="0.1" height="15.0" fill="rgb(233,50,5)" rx="2" ry="2" />
<text  x="162.85" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1493" width="0.3" height="15.0" fill="rgb(205,109,15)" rx="2" ry="2" />
<text  x="1189.98" y="1503.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (3 samples, 0.02%)</title><rect x="91.8" y="1845" width="0.2" height="15.0" fill="rgb(250,61,28)" rx="2" ry="2" />
<text  x="94.83" y="1855.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.05%)</title><rect x="186.6" y="1653" width="0.6" height="15.0" fill="rgb(219,18,50)" rx="2" ry="2" />
<text  x="189.61" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="885" width="0.1" height="15.0" fill="rgb(222,226,10)" rx="2" ry="2" />
<text  x="162.85" y="895.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="147.6" y="1605" width="0.2" height="15.0" fill="rgb(221,201,2)" rx="2" ry="2" />
<text  x="150.64" y="1615.5" ></text>
</g>
<g >
<title>[tgnews] (2 samples, 0.01%)</title><rect x="55.9" y="2037" width="0.1" height="15.0" fill="rgb(252,157,0)" rx="2" ry="2" />
<text  x="58.88" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="159.7" y="1941" width="0.5" height="15.0" fill="rgb(245,210,0)" rx="2" ry="2" />
<text  x="162.73" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (2 samples, 0.01%)</title><rect x="874.1" y="2037" width="0.2" height="15.0" fill="rgb(222,28,7)" rx="2" ry="2" />
<text  x="877.14" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (191 samples, 1.00%)</title><rect x="681.5" y="1861" width="11.8" height="15.0" fill="rgb(254,12,45)" rx="2" ry="2" />
<text  x="684.49" y="1871.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="168.2" y="1589" width="0.2" height="15.0" fill="rgb(231,43,47)" rx="2" ry="2" />
<text  x="171.18" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1605" width="0.1" height="15.0" fill="rgb(247,213,32)" rx="2" ry="2" />
<text  x="192.51" y="1615.5" ></text>
</g>
<g >
<title>__asan_memcpy (5 samples, 0.03%)</title><rect x="216.5" y="1669" width="0.3" height="15.0" fill="rgb(208,121,9)" rx="2" ry="2" />
<text  x="219.46" y="1679.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="803.3" y="2021" width="0.1" height="15.0" fill="rgb(243,47,46)" rx="2" ry="2" />
<text  x="806.29" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="156.8" y="1669" width="0.2" height="15.0" fill="rgb(246,55,48)" rx="2" ry="2" />
<text  x="159.83" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="869" width="0.3" height="15.0" fill="rgb(225,75,21)" rx="2" ry="2" />
<text  x="1190.41" y="879.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (21 samples, 0.11%)</title><rect x="1155.4" y="2037" width="1.3" height="15.0" fill="rgb(218,55,53)" rx="2" ry="2" />
<text  x="1158.40" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="853" width="0.1" height="15.0" fill="rgb(211,184,51)" rx="2" ry="2" />
<text  x="162.85" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1653" width="0.4" height="15.0" fill="rgb(206,165,4)" rx="2" ry="2" />
<text  x="1190.35" y="1663.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (3 samples, 0.02%)</title><rect x="96.1" y="1909" width="0.2" height="15.0" fill="rgb(213,216,47)" rx="2" ry="2" />
<text  x="99.09" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="189.0" y="1829" width="0.3" height="15.0" fill="rgb(230,203,23)" rx="2" ry="2" />
<text  x="191.96" y="1839.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::initNgrams (13 samples, 0.07%)</title><rect x="875.4" y="1973" width="0.8" height="15.0" fill="rgb(242,53,24)" rx="2" ry="2" />
<text  x="878.37" y="1983.5" ></text>
</g>
<g >
<title>__madvise (2 samples, 0.01%)</title><rect x="85.6" y="1461" width="0.1" height="15.0" fill="rgb(244,6,40)" rx="2" ry="2" />
<text  x="88.60" y="1471.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::~Dictionary (2 samples, 0.01%)</title><rect x="765.9" y="2037" width="0.1" height="15.0" fill="rgb(239,43,22)" rx="2" ry="2" />
<text  x="768.85" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1461" width="0.1" height="15.0" fill="rgb(218,225,9)" rx="2" ry="2" />
<text  x="162.85" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1109" width="0.3" height="15.0" fill="rgb(236,17,54)" rx="2" ry="2" />
<text  x="1190.41" y="1119.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (22 samples, 0.11%)</title><rect x="211.3" y="1637" width="1.4" height="15.0" fill="rgb(229,113,9)" rx="2" ry="2" />
<text  x="214.34" y="1647.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (2 samples, 0.01%)</title><rect x="163.6" y="1541" width="0.1" height="15.0" fill="rgb(217,204,35)" rx="2" ry="2" />
<text  x="166.55" y="1551.5" ></text>
</g>
<g >
<title>new_sync_read (3 samples, 0.02%)</title><rect x="1111.1" y="1925" width="0.2" height="15.0" fill="rgb(227,13,13)" rx="2" ry="2" />
<text  x="1114.13" y="1935.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.01%)</title><rect x="761.0" y="1909" width="0.1" height="15.0" fill="rgb(212,31,16)" rx="2" ry="2" />
<text  x="763.98" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1589" width="0.2" height="15.0" fill="rgb(240,32,18)" rx="2" ry="2" />
<text  x="223.28" y="1599.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (31 samples, 0.16%)</title><rect x="675.6" y="1861" width="1.9" height="15.0" fill="rgb(239,119,9)" rx="2" ry="2" />
<text  x="678.63" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (94 samples, 0.49%)</title><rect x="138.4" y="1701" width="5.8" height="15.0" fill="rgb(222,117,22)" rx="2" ry="2" />
<text  x="141.39" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="159.0" y="1861" width="0.4" height="15.0" fill="rgb(232,167,28)" rx="2" ry="2" />
<text  x="162.05" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (89 samples, 0.47%)</title><rect x="201.4" y="1701" width="5.4" height="15.0" fill="rgb(230,29,22)" rx="2" ry="2" />
<text  x="204.35" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1189" width="0.1" height="15.0" fill="rgb(236,24,35)" rx="2" ry="2" />
<text  x="162.85" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_expression_term&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="196.2" y="1605" width="0.2" height="15.0" fill="rgb(224,32,4)" rx="2" ry="2" />
<text  x="199.23" y="1615.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="90.6" y="1845" width="0.2" height="15.0" fill="rgb(247,47,17)" rx="2" ry="2" />
<text  x="93.60" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (76 samples, 0.40%)</title><rect x="196.5" y="1701" width="4.7" height="15.0" fill="rgb(226,11,40)" rx="2" ry="2" />
<text  x="199.48" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (417 samples, 2.18%)</title><rect x="56.1" y="1285" width="25.7" height="15.0" fill="rgb(229,1,7)" rx="2" ry="2" />
<text  x="59.13" y="1295.5" >[..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="189.0" y="1813" width="0.3" height="15.0" fill="rgb(220,4,34)" rx="2" ry="2" />
<text  x="191.96" y="1823.5" ></text>
</g>
<g >
<title>_raw_spin_lock (6 samples, 0.03%)</title><rect x="24.2" y="1957" width="0.4" height="15.0" fill="rgb(242,148,46)" rx="2" ry="2" />
<text  x="27.18" y="1967.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (13 samples, 0.07%)</title><rect x="814.6" y="2005" width="0.8" height="15.0" fill="rgb(227,146,26)" rx="2" ry="2" />
<text  x="817.63" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (3 samples, 0.02%)</title><rect x="161.2" y="1605" width="0.2" height="15.0" fill="rgb(233,131,10)" rx="2" ry="2" />
<text  x="164.21" y="1615.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (21 samples, 0.11%)</title><rect x="26.8" y="1957" width="1.3" height="15.0" fill="rgb(221,39,40)" rx="2" ry="2" />
<text  x="29.84" y="1967.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="180.0" y="1621" width="0.2" height="15.0" fill="rgb(252,185,33)" rx="2" ry="2" />
<text  x="182.95" y="1631.5" ></text>
</g>
<g >
<title>std::ctype&lt;char&gt;::do_tolower (3 samples, 0.02%)</title><rect x="217.9" y="1685" width="0.2" height="15.0" fill="rgb(235,163,40)" rx="2" ry="2" />
<text  x="220.88" y="1695.5" ></text>
</g>
<g >
<title>handle_mm_fault (4 samples, 0.02%)</title><rect x="727.3" y="1829" width="0.2" height="15.0" fill="rgb(234,164,21)" rx="2" ry="2" />
<text  x="730.25" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="549" width="0.3" height="15.0" fill="rgb(211,181,50)" rx="2" ry="2" />
<text  x="1190.04" y="559.5" ></text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (339 samples, 1.77%)</title><rect x="384.5" y="1957" width="20.9" height="15.0" fill="rgb(223,86,16)" rx="2" ry="2" />
<text  x="387.50" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1669" width="0.4" height="15.0" fill="rgb(207,46,36)" rx="2" ry="2" />
<text  x="1190.35" y="1679.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.01%)</title><rect x="1017.9" y="1989" width="0.1" height="15.0" fill="rgb(252,116,43)" rx="2" ry="2" />
<text  x="1020.89" y="1999.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (2 samples, 0.01%)</title><rect x="731.9" y="1861" width="0.2" height="15.0" fill="rgb(236,183,31)" rx="2" ry="2" />
<text  x="734.94" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="77.8" y="789" width="0.1" height="15.0" fill="rgb(239,2,15)" rx="2" ry="2" />
<text  x="80.77" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (84 samples, 0.44%)</title><rect x="133.1" y="1733" width="5.2" height="15.0" fill="rgb(247,179,20)" rx="2" ry="2" />
<text  x="136.09" y="1743.5" ></text>
</g>
<g >
<title>__sanitizer::RunFreeHooks (16 samples, 0.08%)</title><rect x="1018.0" y="2053" width="1.0" height="15.0" fill="rgb(229,149,20)" rx="2" ry="2" />
<text  x="1021.01" y="2063.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (2 samples, 0.01%)</title><rect x="519.9" y="1797" width="0.1" height="15.0" fill="rgb(249,96,26)" rx="2" ry="2" />
<text  x="522.86" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (80 samples, 0.42%)</title><rect x="144.2" y="1653" width="5.0" height="15.0" fill="rgb(227,99,48)" rx="2" ry="2" />
<text  x="147.25" y="1663.5" ></text>
</g>
<g >
<title>onmt::is_alphabet (3 samples, 0.02%)</title><rect x="732.2" y="1893" width="0.2" height="15.0" fill="rgb(235,229,6)" rx="2" ry="2" />
<text  x="735.18" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1445" width="0.1" height="15.0" fill="rgb(243,49,51)" rx="2" ry="2" />
<text  x="1190.72" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (77 samples, 0.40%)</title><rect x="213.6" y="1749" width="4.8" height="15.0" fill="rgb(211,101,48)" rx="2" ry="2" />
<text  x="216.62" y="1759.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_state&lt;std::_Bind&lt;Annotate (12 samples, 0.06%)</title><rect x="29.2" y="2021" width="0.7" height="15.0" fill="rgb(237,16,3)" rx="2" ry="2" />
<text  x="32.18" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (487 samples, 2.55%)</title><rect x="56.1" y="1493" width="30.0" height="15.0" fill="rgb(221,157,1)" rx="2" ry="2" />
<text  x="59.07" y="1503.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (77 samples, 0.40%)</title><rect x="191.7" y="1685" width="4.7" height="15.0" fill="rgb(244,219,45)" rx="2" ry="2" />
<text  x="194.67" y="1695.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (3 samples, 0.02%)</title><rect x="55.1" y="1909" width="0.2" height="15.0" fill="rgb(232,177,3)" rx="2" ry="2" />
<text  x="58.08" y="1919.5" ></text>
</g>
<g >
<title>__do_page_fault (4 samples, 0.02%)</title><rect x="107.9" y="1989" width="0.3" height="15.0" fill="rgb(237,129,36)" rx="2" ry="2" />
<text  x="110.93" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (530 samples, 2.77%)</title><rect x="56.1" y="1685" width="32.6" height="15.0" fill="rgb(226,218,43)" rx="2" ry="2" />
<text  x="59.07" y="1695.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (94 samples, 0.49%)</title><rect x="182.6" y="1797" width="5.8" height="15.0" fill="rgb(214,128,5)" rx="2" ry="2" />
<text  x="185.61" y="1807.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (8 samples, 0.04%)</title><rect x="763.4" y="1989" width="0.5" height="15.0" fill="rgb(241,216,45)" rx="2" ry="2" />
<text  x="766.45" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="501" width="0.1" height="15.0" fill="rgb(252,39,2)" rx="2" ry="2" />
<text  x="1190.72" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1187.5" y="53" width="0.2" height="15.0" fill="rgb(241,6,29)" rx="2" ry="2" />
<text  x="1190.47" y="63.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (9 samples, 0.05%)</title><rect x="763.4" y="2037" width="0.5" height="15.0" fill="rgb(247,177,10)" rx="2" ry="2" />
<text  x="766.39" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.81%)</title><rect x="56.1" y="565" width="21.4" height="15.0" fill="rgb(221,61,5)" rx="2" ry="2" />
<text  x="59.13" y="575.5" >[..</text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 0.02%)</title><rect x="761.0" y="1941" width="0.2" height="15.0" fill="rgb(254,90,9)" rx="2" ry="2" />
<text  x="763.98" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1061" width="0.1" height="15.0" fill="rgb(241,186,38)" rx="2" ry="2" />
<text  x="162.85" y="1071.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (3 samples, 0.02%)</title><rect x="176.6" y="1605" width="0.2" height="15.0" fill="rgb(240,132,54)" rx="2" ry="2" />
<text  x="179.62" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1557" width="0.4" height="15.0" fill="rgb(239,117,14)" rx="2" ry="2" />
<text  x="1189.92" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1925" width="0.1" height="15.0" fill="rgb(247,33,39)" rx="2" ry="2" />
<text  x="58.88" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="219.9" y="1925" width="0.6" height="15.0" fill="rgb(221,187,18)" rx="2" ry="2" />
<text  x="222.91" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1877" width="0.1" height="15.0" fill="rgb(252,74,22)" rx="2" ry="2" />
<text  x="1190.72" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="81.9" y="1285" width="0.2" height="15.0" fill="rgb(222,155,18)" rx="2" ry="2" />
<text  x="84.90" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="101" width="0.3" height="15.0" fill="rgb(208,73,14)" rx="2" ry="2" />
<text  x="1190.04" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1509" width="0.2" height="15.0" fill="rgb(225,203,35)" rx="2" ry="2" />
<text  x="223.35" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1429" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="223.35" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (161 samples, 0.84%)</title><rect x="191.2" y="1749" width="10.0" height="15.0" fill="rgb(205,87,27)" rx="2" ry="2" />
<text  x="194.24" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="1188.7" y="2037" width="0.1" height="15.0" fill="rgb(221,225,27)" rx="2" ry="2" />
<text  x="1191.70" y="2047.5" ></text>
</g>
<g >
<title>fasttext::entry::entry (3 samples, 0.02%)</title><rect x="876.2" y="1973" width="0.2" height="15.0" fill="rgb(240,129,9)" rx="2" ry="2" />
<text  x="879.18" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (624 samples, 3.26%)</title><rect x="56.1" y="2021" width="38.4" height="15.0" fill="rgb(210,105,33)" rx="2" ry="2" />
<text  x="59.07" y="2031.5" >[un..</text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="763.2" y="2005" width="0.2" height="15.0" fill="rgb(206,157,24)" rx="2" ry="2" />
<text  x="766.20" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="220.4" y="981" width="0.1" height="15.0" fill="rgb(238,159,52)" rx="2" ry="2" />
<text  x="223.41" y="991.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (192 samples, 1.00%)</title><rect x="44.0" y="2037" width="11.8" height="15.0" fill="rgb(246,179,52)" rx="2" ry="2" />
<text  x="46.98" y="2047.5" ></text>
</g>
<g >
<title>alloc_pages_vma (11 samples, 0.06%)</title><rect x="942.2" y="1925" width="0.6" height="15.0" fill="rgb(235,173,15)" rx="2" ry="2" />
<text  x="945.16" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1349" width="0.3" height="15.0" fill="rgb(241,119,31)" rx="2" ry="2" />
<text  x="1189.98" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1141" width="0.1" height="15.0" fill="rgb(241,34,16)" rx="2" ry="2" />
<text  x="162.85" y="1151.5" ></text>
</g>
<g >
<title>__asan_memcpy (17 samples, 0.09%)</title><rect x="610.4" y="1845" width="1.0" height="15.0" fill="rgb(245,197,41)" rx="2" ry="2" />
<text  x="613.39" y="1855.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="481.0" y="1941" width="0.1" height="15.0" fill="rgb(238,176,49)" rx="2" ry="2" />
<text  x="483.95" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (364 samples, 1.90%)</title><rect x="56.1" y="1093" width="22.5" height="15.0" fill="rgb(254,72,0)" rx="2" ry="2" />
<text  x="59.13" y="1103.5" >[..</text>
</g>
<g >
<title>__asan::AsanTSDGet (2 samples, 0.01%)</title><rect x="612.5" y="1845" width="0.2" height="15.0" fill="rgb(238,186,49)" rx="2" ry="2" />
<text  x="615.55" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="965" width="0.1" height="15.0" fill="rgb(234,65,2)" rx="2" ry="2" />
<text  x="1190.72" y="975.5" ></text>
</g>
<g >
<title>[[vdso]] (8 samples, 0.04%)</title><rect x="122.4" y="2021" width="0.5" height="15.0" fill="rgb(250,114,53)" rx="2" ry="2" />
<text  x="125.36" y="2031.5" ></text>
</g>
<g >
<title>alloc_pages_vma (20 samples, 0.10%)</title><rect x="508.6" y="1877" width="1.3" height="15.0" fill="rgb(232,115,39)" rx="2" ry="2" />
<text  x="511.64" y="1887.5" ></text>
</g>
<g >
<title>__interceptor_strlen (9 samples, 0.05%)</title><rect x="1001.8" y="2053" width="0.5" height="15.0" fill="rgb(246,198,51)" rx="2" ry="2" />
<text  x="1004.79" y="2063.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.04%)</title><rect x="1103.0" y="2053" width="0.4" height="15.0" fill="rgb(217,60,50)" rx="2" ry="2" />
<text  x="1105.99" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (10 samples, 0.05%)</title><rect x="591.8" y="1877" width="0.6" height="15.0" fill="rgb(246,159,43)" rx="2" ry="2" />
<text  x="594.83" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (598 samples, 3.13%)</title><rect x="56.1" y="1973" width="36.8" height="15.0" fill="rgb(211,126,36)" rx="2" ry="2" />
<text  x="59.07" y="1983.5" >[un..</text>
</g>
<g >
<title>[unknown] (353 samples, 1.84%)</title><rect x="56.1" y="869" width="21.8" height="15.0" fill="rgb(206,32,28)" rx="2" ry="2" />
<text  x="59.13" y="879.5" >[..</text>
</g>
<g >
<title>__sanitizer::internal_mmap (15 samples, 0.08%)</title><rect x="1101.9" y="2053" width="0.9" height="15.0" fill="rgb(250,46,36)" rx="2" ry="2" />
<text  x="1104.88" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (74 samples, 0.39%)</title><rect x="177.8" y="1669" width="4.6" height="15.0" fill="rgb(217,72,29)" rx="2" ry="2" />
<text  x="180.80" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1397" width="0.2" height="15.0" fill="rgb(248,203,21)" rx="2" ry="2" />
<text  x="162.97" y="1407.5" ></text>
</g>
<g >
<title>TDocument::operator= (2 samples, 0.01%)</title><rect x="517.2" y="1957" width="0.1" height="15.0" fill="rgb(243,109,32)" rx="2" ry="2" />
<text  x="520.21" y="1967.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::readWord (9 samples, 0.05%)</title><rect x="538.0" y="1925" width="0.5" height="15.0" fill="rgb(242,173,4)" rx="2" ry="2" />
<text  x="540.99" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (337 samples, 1.76%)</title><rect x="56.1" y="197" width="20.8" height="15.0" fill="rgb(231,51,40)" rx="2" ry="2" />
<text  x="59.13" y="207.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="194.6" y="1557" width="0.2" height="15.0" fill="rgb(247,105,45)" rx="2" ry="2" />
<text  x="197.63" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1157" width="0.1" height="15.0" fill="rgb(214,180,18)" rx="2" ry="2" />
<text  x="1190.72" y="1167.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.02%)</title><rect x="91.8" y="1861" width="0.2" height="15.0" fill="rgb(253,87,20)" rx="2" ry="2" />
<text  x="94.83" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="357" width="0.3" height="15.0" fill="rgb(226,203,28)" rx="2" ry="2" />
<text  x="1190.41" y="367.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (21 samples, 0.11%)</title><rect x="72.6" y="37" width="1.3" height="15.0" fill="rgb(223,45,18)" rx="2" ry="2" />
<text  x="75.59" y="47.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (4 samples, 0.02%)</title><rect x="942.9" y="1925" width="0.2" height="15.0" fill="rgb(250,67,48)" rx="2" ry="2" />
<text  x="945.90" y="1935.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="215.1" y="1685" width="0.1" height="15.0" fill="rgb(242,164,17)" rx="2" ry="2" />
<text  x="218.10" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1141" width="0.1" height="15.0" fill="rgb(214,105,35)" rx="2" ry="2" />
<text  x="1190.72" y="1151.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (49 samples, 0.26%)</title><rect x="119.2" y="2037" width="3.0" height="15.0" fill="rgb(237,162,9)" rx="2" ry="2" />
<text  x="122.21" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1685" width="0.1" height="15.0" fill="rgb(220,0,20)" rx="2" ry="2" />
<text  x="192.51" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="261" width="0.3" height="15.0" fill="rgb(250,122,32)" rx="2" ry="2" />
<text  x="1190.04" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="220.0" y="1189" width="0.2" height="15.0" fill="rgb(218,200,11)" rx="2" ry="2" />
<text  x="223.04" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="757" width="0.1" height="15.0" fill="rgb(234,77,48)" rx="2" ry="2" />
<text  x="1190.72" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1205" width="0.3" height="15.0" fill="rgb(236,33,8)" rx="2" ry="2" />
<text  x="1189.98" y="1215.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (5 samples, 0.03%)</title><rect x="763.9" y="1989" width="0.4" height="15.0" fill="rgb(230,140,53)" rx="2" ry="2" />
<text  x="766.94" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (348 samples, 1.82%)</title><rect x="56.1" y="677" width="21.5" height="15.0" fill="rgb(227,28,1)" rx="2" ry="2" />
<text  x="59.13" y="687.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1317" width="0.2" height="15.0" fill="rgb(249,82,28)" rx="2" ry="2" />
<text  x="223.04" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="853" width="0.3" height="15.0" fill="rgb(252,7,50)" rx="2" ry="2" />
<text  x="1190.41" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (82 samples, 0.43%)</title><rect x="144.2" y="1749" width="5.1" height="15.0" fill="rgb(206,147,47)" rx="2" ry="2" />
<text  x="147.25" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="92.7" y="1957" width="0.2" height="15.0" fill="rgb(249,44,23)" rx="2" ry="2" />
<text  x="95.70" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (83 samples, 0.43%)</title><rect x="144.2" y="1765" width="5.2" height="15.0" fill="rgb(221,186,46)" rx="2" ry="2" />
<text  x="147.25" y="1775.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::clear (8 samples, 0.04%)</title><rect x="652.7" y="1877" width="0.5" height="15.0" fill="rgb(226,215,17)" rx="2" ry="2" />
<text  x="655.69" y="1887.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::Dictionary (27 samples, 0.14%)</title><rect x="875.1" y="2005" width="1.6" height="15.0" fill="rgb(208,228,7)" rx="2" ry="2" />
<text  x="878.07" y="2015.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (18 samples, 0.09%)</title><rect x="689.1" y="1845" width="1.1" height="15.0" fill="rgb(233,22,3)" rx="2" ry="2" />
<text  x="692.14" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="645" width="0.1" height="15.0" fill="rgb(248,153,44)" rx="2" ry="2" />
<text  x="162.85" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (90 samples, 0.47%)</title><rect x="201.4" y="1749" width="5.5" height="15.0" fill="rgb(207,73,22)" rx="2" ry="2" />
<text  x="204.35" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1493" width="0.2" height="15.0" fill="rgb(231,163,9)" rx="2" ry="2" />
<text  x="162.97" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="597" width="0.3" height="15.0" fill="rgb(245,114,20)" rx="2" ry="2" />
<text  x="1190.41" y="607.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (26 samples, 0.14%)</title><rect x="324.3" y="1941" width="1.6" height="15.0" fill="rgb(239,90,41)" rx="2" ry="2" />
<text  x="327.32" y="1951.5" ></text>
</g>
<g >
<title>__asan_memset (17 samples, 0.09%)</title><rect x="649.7" y="1877" width="1.1" height="15.0" fill="rgb(226,122,2)" rx="2" ry="2" />
<text  x="652.73" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::detail::parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::sax_parse_internal&lt;nlohmann::detail::json_sax_dom_parser&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; (129 samples, 0.67%)</title><rect x="124.1" y="1957" width="7.9" height="15.0" fill="rgb(226,51,29)" rx="2" ry="2" />
<text  x="127.08" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="421" width="0.3" height="15.0" fill="rgb(254,70,23)" rx="2" ry="2" />
<text  x="1190.04" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1187.3" y="2005" width="0.4" height="15.0" fill="rgb(243,178,41)" rx="2" ry="2" />
<text  x="1190.29" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (76 samples, 0.40%)</title><rect x="196.5" y="1653" width="4.7" height="15.0" fill="rgb(217,138,45)" rx="2" ry="2" />
<text  x="199.48" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1397" width="0.1" height="15.0" fill="rgb(228,119,25)" rx="2" ry="2" />
<text  x="1190.72" y="1407.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="55.1" y="1893" width="0.2" height="15.0" fill="rgb(214,7,23)" rx="2" ry="2" />
<text  x="58.14" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1925" width="0.1" height="15.0" fill="rgb(232,110,31)" rx="2" ry="2" />
<text  x="192.51" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (7 samples, 0.04%)</title><rect x="1121.2" y="2053" width="0.4" height="15.0" fill="rgb(239,24,16)" rx="2" ry="2" />
<text  x="1124.18" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (4 samples, 0.02%)</title><rect x="592.4" y="1877" width="0.3" height="15.0" fill="rgb(208,117,11)" rx="2" ry="2" />
<text  x="595.45" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="549" width="0.1" height="15.0" fill="rgb(236,163,27)" rx="2" ry="2" />
<text  x="1190.72" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1413" width="0.1" height="15.0" fill="rgb(233,64,46)" rx="2" ry="2" />
<text  x="162.85" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (345 samples, 1.80%)</title><rect x="56.1" y="501" width="21.3" height="15.0" fill="rgb(244,1,42)" rx="2" ry="2" />
<text  x="59.13" y="511.5" >[..</text>
</g>
<g >
<title>fasttext::Vector::Vector (3 samples, 0.02%)</title><rect x="803.3" y="2037" width="0.2" height="15.0" fill="rgb(232,169,43)" rx="2" ry="2" />
<text  x="806.29" y="2047.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (19 samples, 0.10%)</title><rect x="519.6" y="2021" width="1.1" height="15.0" fill="rgb(240,132,42)" rx="2" ry="2" />
<text  x="522.56" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="159.9" y="1781" width="0.3" height="15.0" fill="rgb(230,159,0)" rx="2" ry="2" />
<text  x="162.85" y="1791.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (23 samples, 0.12%)</title><rect x="677.5" y="1861" width="1.5" height="15.0" fill="rgb(242,25,48)" rx="2" ry="2" />
<text  x="680.55" y="1871.5" ></text>
</g>
<g >
<title>TDocument::FromJson (5 samples, 0.03%)</title><rect x="123.0" y="1973" width="0.3" height="15.0" fill="rgb(216,77,10)" rx="2" ry="2" />
<text  x="126.04" y="1983.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (45 samples, 0.24%)</title><rect x="73.9" y="37" width="2.8" height="15.0" fill="rgb(205,209,16)" rx="2" ry="2" />
<text  x="76.95" y="47.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (32 samples, 0.17%)</title><rect x="1128.9" y="2037" width="2.0" height="15.0" fill="rgb(207,209,33)" rx="2" ry="2" />
<text  x="1131.95" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (340 samples, 1.78%)</title><rect x="56.1" y="309" width="21.0" height="15.0" fill="rgb(233,165,11)" rx="2" ry="2" />
<text  x="59.13" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (94 samples, 0.49%)</title><rect x="182.6" y="1765" width="5.8" height="15.0" fill="rgb(246,67,43)" rx="2" ry="2" />
<text  x="185.61" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (4 samples, 0.02%)</title><rect x="199.5" y="1589" width="0.2" height="15.0" fill="rgb(245,60,44)" rx="2" ry="2" />
<text  x="202.50" y="1599.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::should_preserve (3 samples, 0.02%)</title><rect x="570.3" y="1893" width="0.2" height="15.0" fill="rgb(218,85,22)" rx="2" ry="2" />
<text  x="573.31" y="1903.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (5 samples, 0.03%)</title><rect x="577.6" y="1877" width="0.3" height="15.0" fill="rgb(236,182,8)" rx="2" ry="2" />
<text  x="580.58" y="1887.5" ></text>
</g>
<g >
<title>boost::algorithm::join&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, char [2]&gt; (16 samples, 0.08%)</title><rect x="566.7" y="1941" width="1.0" height="15.0" fill="rgb(226,46,14)" rx="2" ry="2" />
<text  x="569.73" y="1951.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.01%)</title><rect x="803.2" y="2021" width="0.1" height="15.0" fill="rgb(236,152,52)" rx="2" ry="2" />
<text  x="806.16" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (90 samples, 0.47%)</title><rect x="201.4" y="1765" width="5.5" height="15.0" fill="rgb(231,203,40)" rx="2" ry="2" />
<text  x="204.35" y="1775.5" ></text>
</g>
<g >
<title>handle_mm_fault (6 samples, 0.03%)</title><rect x="651.3" y="1813" width="0.4" height="15.0" fill="rgb(236,84,13)" rx="2" ry="2" />
<text  x="654.34" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1861" width="0.4" height="15.0" fill="rgb(239,63,16)" rx="2" ry="2" />
<text  x="1190.35" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1013" width="0.3" height="15.0" fill="rgb(223,221,31)" rx="2" ry="2" />
<text  x="1190.41" y="1023.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (20 samples, 0.10%)</title><rect x="28.7" y="2053" width="1.2" height="15.0" fill="rgb(220,189,17)" rx="2" ry="2" />
<text  x="31.69" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1781" width="0.1" height="15.0" fill="rgb(231,31,18)" rx="2" ry="2" />
<text  x="192.51" y="1791.5" ></text>
</g>
<g >
<title>fasttext::Vector::zero (9 samples, 0.05%)</title><rect x="494.5" y="1957" width="0.6" height="15.0" fill="rgb(217,190,26)" rx="2" ry="2" />
<text  x="497.52" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="901" width="0.3" height="15.0" fill="rgb(238,190,34)" rx="2" ry="2" />
<text  x="1189.98" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (86 samples, 0.45%)</title><rect x="166.8" y="1621" width="5.3" height="15.0" fill="rgb(246,227,30)" rx="2" ry="2" />
<text  x="169.76" y="1631.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (3 samples, 0.02%)</title><rect x="339.1" y="1989" width="0.2" height="15.0" fill="rgb(211,136,27)" rx="2" ry="2" />
<text  x="342.12" y="1999.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="96.3" y="2021" width="0.2" height="15.0" fill="rgb(248,210,46)" rx="2" ry="2" />
<text  x="99.27" y="2031.5" ></text>
</g>
<g >
<title>memcpy (2 samples, 0.01%)</title><rect x="593.1" y="1877" width="0.1" height="15.0" fill="rgb(218,122,5)" rx="2" ry="2" />
<text  x="596.06" y="1887.5" ></text>
</g>
<g >
<title>onmt::ITokenizer::tokenize (2,985 samples, 15.60%)</title><rect x="567.7" y="1941" width="184.1" height="15.0" fill="rgb(236,142,33)" rx="2" ry="2" />
<text  x="570.72" y="1951.5" >onmt::ITokenizer::token..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="82.7" y="1317" width="0.1" height="15.0" fill="rgb(230,182,37)" rx="2" ry="2" />
<text  x="85.71" y="1327.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1877" width="0.3" height="15.0" fill="rgb(226,96,11)" rx="2" ry="2" />
<text  x="519.53" y="1887.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (3 samples, 0.02%)</title><rect x="217.7" y="1685" width="0.2" height="15.0" fill="rgb(232,115,53)" rx="2" ry="2" />
<text  x="220.69" y="1695.5" ></text>
</g>
<g >
<title>std::istream::get (4 samples, 0.02%)</title><rect x="876.4" y="1989" width="0.2" height="15.0" fill="rgb(209,191,51)" rx="2" ry="2" />
<text  x="879.36" y="1999.5" ></text>
</g>
<g >
<title>__asan::RZSize2Log (79 samples, 0.41%)</title><rect x="987.1" y="2053" width="4.8" height="15.0" fill="rgb(215,193,13)" rx="2" ry="2" />
<text  x="990.05" y="2063.5" ></text>
</g>
<g >
<title>__pthread_getspecific (4 samples, 0.02%)</title><rect x="180.2" y="1621" width="0.2" height="15.0" fill="rgb(209,57,32)" rx="2" ry="2" />
<text  x="183.20" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (455 samples, 2.38%)</title><rect x="160.5" y="1861" width="28.1" height="15.0" fill="rgb(232,131,13)" rx="2" ry="2" />
<text  x="163.53" y="1871.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1093" width="0.1" height="15.0" fill="rgb(211,141,6)" rx="2" ry="2" />
<text  x="162.85" y="1103.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.02%)</title><rect x="1111.1" y="2021" width="0.2" height="15.0" fill="rgb(227,101,39)" rx="2" ry="2" />
<text  x="1114.13" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1733" width="0.1" height="15.0" fill="rgb(249,121,3)" rx="2" ry="2" />
<text  x="162.85" y="1743.5" ></text>
</g>
<g >
<title>smp_call_function_many (6 samples, 0.03%)</title><rect x="55.3" y="1829" width="0.4" height="15.0" fill="rgb(218,165,30)" rx="2" ry="2" />
<text  x="58.33" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="574.8" y="1893" width="0.2" height="15.0" fill="rgb(223,120,11)" rx="2" ry="2" />
<text  x="577.81" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="189.5" y="1669" width="0.1" height="15.0" fill="rgb(244,143,33)" rx="2" ry="2" />
<text  x="192.51" y="1679.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (2 samples, 0.01%)</title><rect x="100.5" y="2021" width="0.2" height="15.0" fill="rgb(210,221,17)" rx="2" ry="2" />
<text  x="103.53" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (2 samples, 0.01%)</title><rect x="81.4" y="1253" width="0.1" height="15.0" fill="rgb(229,60,51)" rx="2" ry="2" />
<text  x="84.41" y="1263.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (5 samples, 0.03%)</title><rect x="588.4" y="1877" width="0.3" height="15.0" fill="rgb(235,225,13)" rx="2" ry="2" />
<text  x="591.44" y="1887.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.4" y="1973" width="0.4" height="15.0" fill="rgb(230,168,14)" rx="2" ry="2" />
<text  x="518.42" y="1983.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="319.0" y="1957" width="0.1" height="15.0" fill="rgb(229,71,27)" rx="2" ry="2" />
<text  x="321.95" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (4 samples, 0.02%)</title><rect x="189.5" y="1941" width="0.3" height="15.0" fill="rgb(242,192,43)" rx="2" ry="2" />
<text  x="192.51" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1333" width="0.2" height="15.0" fill="rgb(207,118,19)" rx="2" ry="2" />
<text  x="162.97" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1045" width="0.1" height="15.0" fill="rgb(242,20,25)" rx="2" ry="2" />
<text  x="162.85" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="245" width="0.3" height="15.0" fill="rgb(213,175,16)" rx="2" ry="2" />
<text  x="1190.04" y="255.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (11 samples, 0.06%)</title><rect x="515.8" y="2005" width="0.7" height="15.0" fill="rgb(233,181,53)" rx="2" ry="2" />
<text  x="518.79" y="2015.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (3 samples, 0.02%)</title><rect x="876.0" y="1941" width="0.2" height="15.0" fill="rgb(246,5,33)" rx="2" ry="2" />
<text  x="878.99" y="1951.5" ></text>
</g>
<g >
<title>operator delete (39 samples, 0.20%)</title><rect x="626.9" y="1877" width="2.4" height="15.0" fill="rgb(210,153,45)" rx="2" ry="2" />
<text  x="629.86" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (18 samples, 0.09%)</title><rect x="1176.4" y="2037" width="1.1" height="15.0" fill="rgb(234,88,4)" rx="2" ry="2" />
<text  x="1179.43" y="2047.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="88.1" y="1493" width="0.1" height="15.0" fill="rgb(210,164,14)" rx="2" ry="2" />
<text  x="91.07" y="1503.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="874.1" y="2005" width="0.2" height="15.0" fill="rgb(220,95,40)" rx="2" ry="2" />
<text  x="877.14" y="2015.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="100.8" y="2021" width="0.2" height="15.0" fill="rgb(205,165,4)" rx="2" ry="2" />
<text  x="103.77" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="84.9" y="1429" width="0.1" height="15.0" fill="rgb(220,28,41)" rx="2" ry="2" />
<text  x="87.86" y="1439.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (33 samples, 0.17%)</title><rect x="510.2" y="1973" width="2.0" height="15.0" fill="rgb(222,26,51)" rx="2" ry="2" />
<text  x="513.18" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (180 samples, 0.94%)</title><rect x="133.1" y="1749" width="11.1" height="15.0" fill="rgb(206,125,12)" rx="2" ry="2" />
<text  x="136.09" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="86.7" y="1541" width="0.1" height="15.0" fill="rgb(231,222,41)" rx="2" ry="2" />
<text  x="89.65" y="1551.5" ></text>
</g>
<g >
<title>__handle_mm_fault (22 samples, 0.11%)</title><rect x="691.9" y="1781" width="1.4" height="15.0" fill="rgb(207,137,29)" rx="2" ry="2" />
<text  x="694.91" y="1791.5" ></text>
</g>
<g >
<title>rcu_all_qs (2 samples, 0.01%)</title><rect x="940.6" y="1973" width="0.1" height="15.0" fill="rgb(244,2,32)" rx="2" ry="2" />
<text  x="943.62" y="1983.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (24 samples, 0.13%)</title><rect x="811.7" y="2005" width="1.5" height="15.0" fill="rgb(251,43,50)" rx="2" ry="2" />
<text  x="814.73" y="2015.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (6 samples, 0.03%)</title><rect x="195.9" y="1589" width="0.3" height="15.0" fill="rgb(254,173,10)" rx="2" ry="2" />
<text  x="198.86" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1701" width="0.1" height="15.0" fill="rgb(218,187,35)" rx="2" ry="2" />
<text  x="1190.72" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1125" width="0.3" height="15.0" fill="rgb(226,67,14)" rx="2" ry="2" />
<text  x="1190.41" y="1135.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (2 samples, 0.01%)</title><rect x="133.5" y="1637" width="0.1" height="15.0" fill="rgb(212,4,22)" rx="2" ry="2" />
<text  x="136.46" y="1647.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Bind&lt;Annotate (3,727 samples, 19.48%)</title><rect x="523.6" y="1989" width="229.9" height="15.0" fill="rgb(246,153,35)" rx="2" ry="2" />
<text  x="526.63" y="1999.5" >std::__invoke&lt;std::_Bind&lt;Annot..</text>
</g>
<g >
<title>__asan::asan_memalign (6 samples, 0.03%)</title><rect x="1164.2" y="2037" width="0.3" height="15.0" fill="rgb(227,26,34)" rx="2" ry="2" />
<text  x="1167.16" y="2047.5" ></text>
</g>
<g >
<title>std::__stable_sort_adaptive&lt;__gnu_cxx::__normal_iterator&lt;TDocument*, std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt; &gt;, TDocument*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;main::$_1&gt; &gt; (5 samples, 0.03%)</title><rect x="517.1" y="2005" width="0.3" height="15.0" fill="rgb(242,73,51)" rx="2" ry="2" />
<text  x="520.09" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1573" width="0.4" height="15.0" fill="rgb(214,98,30)" rx="2" ry="2" />
<text  x="1189.92" y="1583.5" ></text>
</g>
<g >
<title>__do_page_fault (118 samples, 0.62%)</title><rect x="938.9" y="2005" width="7.3" height="15.0" fill="rgb(233,144,2)" rx="2" ry="2" />
<text  x="941.89" y="2015.5" ></text>
</g>
<g >
<title>mem_cgroup_from_task (2 samples, 0.01%)</title><rect x="945.9" y="1989" width="0.1" height="15.0" fill="rgb(224,190,42)" rx="2" ry="2" />
<text  x="948.92" y="1999.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="485.0" y="1925" width="0.1" height="15.0" fill="rgb(223,37,3)" rx="2" ry="2" />
<text  x="488.02" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="123.2" y="1925" width="0.1" height="15.0" fill="rgb(237,4,8)" rx="2" ry="2" />
<text  x="126.22" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.4" y="901" width="0.1" height="15.0" fill="rgb(253,159,12)" rx="2" ry="2" />
<text  x="223.41" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.9" y="2005" width="0.4" height="15.0" fill="rgb(234,209,25)" rx="2" ry="2" />
<text  x="1189.85" y="2015.5" ></text>
</g>
<g >
<title>TSlinkClustering::ClusterBatch (2,840 samples, 14.84%)</title><rect x="339.4" y="1989" width="175.2" height="15.0" fill="rgb(248,137,12)" rx="2" ry="2" />
<text  x="342.43" y="1999.5" >TSlinkClustering::Clus..</text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (69 samples, 0.36%)</title><rect x="154.4" y="1717" width="4.3" height="15.0" fill="rgb(230,58,32)" rx="2" ry="2" />
<text  x="157.42" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="765.9" y="2005" width="0.1" height="15.0" fill="rgb(239,110,29)" rx="2" ry="2" />
<text  x="768.85" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="85.7" y="1461" width="0.2" height="15.0" fill="rgb(221,125,19)" rx="2" ry="2" />
<text  x="88.73" y="1471.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find (8 samples, 0.04%)</title><rect x="751.2" y="1909" width="0.5" height="15.0" fill="rgb(214,42,39)" rx="2" ry="2" />
<text  x="754.24" y="1919.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="81.6" y="1269" width="0.1" height="15.0" fill="rgb(245,49,29)" rx="2" ry="2" />
<text  x="84.60" y="1279.5" ></text>
</g>
<g >
<title>tgnews (19,135 samples, 100.00%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(219,217,33)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" >tgnews</text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (94 samples, 0.49%)</title><rect x="102.4" y="2037" width="5.8" height="15.0" fill="rgb(221,148,53)" rx="2" ry="2" />
<text  x="105.38" y="2047.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (3 samples, 0.02%)</title><rect x="91.8" y="1797" width="0.2" height="15.0" fill="rgb(237,19,40)" rx="2" ry="2" />
<text  x="94.83" y="1807.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="405.0" y="1941" width="0.2" height="15.0" fill="rgb(205,167,35)" rx="2" ry="2" />
<text  x="408.04" y="1951.5" ></text>
</g>
<g >
<title>page_fault (33 samples, 0.17%)</title><rect x="53.8" y="2021" width="2.0" height="15.0" fill="rgb(217,135,43)" rx="2" ry="2" />
<text  x="56.78" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (347 samples, 1.81%)</title><rect x="56.1" y="645" width="21.4" height="15.0" fill="rgb(222,204,17)" rx="2" ry="2" />
<text  x="59.13" y="655.5" >[..</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (44 samples, 0.23%)</title><rect x="995.1" y="2053" width="2.7" height="15.0" fill="rgb(240,55,43)" rx="2" ry="2" />
<text  x="998.07" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (13 samples, 0.07%)</title><rect x="609.6" y="1845" width="0.8" height="15.0" fill="rgb(231,85,25)" rx="2" ry="2" />
<text  x="612.59" y="1855.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (2 samples, 0.01%)</title><rect x="212.8" y="1653" width="0.1" height="15.0" fill="rgb(251,172,21)" rx="2" ry="2" />
<text  x="215.82" y="1663.5" ></text>
</g>
<g >
<title>__handle_mm_fault (7 samples, 0.04%)</title><rect x="761.0" y="1957" width="0.4" height="15.0" fill="rgb(206,51,34)" rx="2" ry="2" />
<text  x="763.98" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1669" width="0.1" height="15.0" fill="rgb(213,14,9)" rx="2" ry="2" />
<text  x="162.85" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1237" width="0.1" height="15.0" fill="rgb(209,191,45)" rx="2" ry="2" />
<text  x="1190.72" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (83 samples, 0.43%)</title><rect x="161.4" y="1605" width="5.1" height="15.0" fill="rgb(207,3,54)" rx="2" ry="2" />
<text  x="164.39" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1877" width="0.4" height="15.0" fill="rgb(237,22,3)" rx="2" ry="2" />
<text  x="1190.35" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1557" width="0.2" height="15.0" fill="rgb(222,121,10)" rx="2" ry="2" />
<text  x="223.04" y="1567.5" ></text>
</g>
<g >
<title>fasttext::Vector::addVector (48 samples, 0.25%)</title><rect x="1107.1" y="2053" width="2.9" height="15.0" fill="rgb(224,10,38)" rx="2" ry="2" />
<text  x="1110.06" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::operator&gt;&gt; (129 samples, 0.67%)</title><rect x="124.1" y="1989" width="7.9" height="15.0" fill="rgb(230,66,4)" rx="2" ry="2" />
<text  x="127.08" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1141" width="0.2" height="15.0" fill="rgb(239,214,51)" rx="2" ry="2" />
<text  x="223.35" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (86 samples, 0.45%)</title><rect x="172.2" y="1685" width="5.3" height="15.0" fill="rgb(254,28,5)" rx="2" ry="2" />
<text  x="175.25" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (2 samples, 0.01%)</title><rect x="1124.1" y="2037" width="0.1" height="15.0" fill="rgb(241,120,30)" rx="2" ry="2" />
<text  x="1127.08" y="2047.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="138.6" y="1621" width="0.2" height="15.0" fill="rgb(236,161,16)" rx="2" ry="2" />
<text  x="141.64" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (87 samples, 0.45%)</title><rect x="166.7" y="1669" width="5.4" height="15.0" fill="rgb(208,88,30)" rx="2" ry="2" />
<text  x="169.70" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1221" width="0.1" height="15.0" fill="rgb(241,64,22)" rx="2" ry="2" />
<text  x="1190.72" y="1231.5" ></text>
</g>
<g >
<title>fasttext::Matrix::size (13 samples, 0.07%)</title><rect x="766.4" y="2037" width="0.8" height="15.0" fill="rgb(224,199,19)" rx="2" ry="2" />
<text  x="769.41" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (8 samples, 0.04%)</title><rect x="751.9" y="1941" width="0.4" height="15.0" fill="rgb(235,215,12)" rx="2" ry="2" />
<text  x="754.86" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (254 samples, 1.33%)</title><rect x="191.2" y="1781" width="15.7" height="15.0" fill="rgb(253,3,35)" rx="2" ry="2" />
<text  x="194.24" y="1791.5" ></text>
</g>
<g >
<title>__handle_mm_fault (26 samples, 0.14%)</title><rect x="54.2" y="1957" width="1.6" height="15.0" fill="rgb(238,22,25)" rx="2" ry="2" />
<text  x="57.22" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="811.6" y="2021" width="0.1" height="15.0" fill="rgb(253,171,9)" rx="2" ry="2" />
<text  x="814.61" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (6 samples, 0.03%)</title><rect x="813.9" y="2037" width="0.4" height="15.0" fill="rgb(230,122,25)" rx="2" ry="2" />
<text  x="816.89" y="2047.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="1122.4" y="2037" width="0.1" height="15.0" fill="rgb(224,69,26)" rx="2" ry="2" />
<text  x="1125.35" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.08%)</title><rect x="764.9" y="2021" width="1.0" height="15.0" fill="rgb(212,159,36)" rx="2" ry="2" />
<text  x="767.87" y="2031.5" ></text>
</g>
<g >
<title>native_write_msr (19 samples, 0.10%)</title><rect x="944.7" y="1765" width="1.2" height="15.0" fill="rgb(207,175,26)" rx="2" ry="2" />
<text  x="947.75" y="1775.5" ></text>
</g>
<g >
<title>page_fault (6 samples, 0.03%)</title><rect x="727.1" y="1877" width="0.4" height="15.0" fill="rgb(208,1,29)" rx="2" ry="2" />
<text  x="730.13" y="1887.5" ></text>
</g>
<g >
<title>update_blocked_averages (2 samples, 0.01%)</title><rect x="315.8" y="1877" width="0.1" height="15.0" fill="rgb(244,215,18)" rx="2" ry="2" />
<text  x="318.81" y="1887.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.04%)</title><rect x="733.5" y="1893" width="0.4" height="15.0" fill="rgb(222,117,2)" rx="2" ry="2" />
<text  x="736.48" y="1903.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="132.4" y="1957" width="0.1" height="15.0" fill="rgb(248,220,5)" rx="2" ry="2" />
<text  x="135.41" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="965" width="0.3" height="15.0" fill="rgb(238,173,40)" rx="2" ry="2" />
<text  x="1189.98" y="975.5" ></text>
</g>
<g >
<title>[unknown] (559 samples, 2.92%)</title><rect x="56.1" y="1829" width="34.4" height="15.0" fill="rgb(205,229,29)" rx="2" ry="2" />
<text  x="59.07" y="1839.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (84 samples, 0.44%)</title><rect x="191.2" y="1717" width="5.2" height="15.0" fill="rgb(236,128,41)" rx="2" ry="2" />
<text  x="194.24" y="1727.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="191.3" y="1637" width="0.2" height="15.0" fill="rgb(217,200,37)" rx="2" ry="2" />
<text  x="194.30" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.4" y="997" width="0.1" height="15.0" fill="rgb(233,187,34)" rx="2" ry="2" />
<text  x="223.41" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.02%)</title><rect x="219.0" y="1845" width="0.2" height="15.0" fill="rgb(226,21,40)" rx="2" ry="2" />
<text  x="221.99" y="1855.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, 0&gt; (2 samples, 0.01%)</title><rect x="124.4" y="1925" width="0.1" height="15.0" fill="rgb(224,115,52)" rx="2" ry="2" />
<text  x="127.39" y="1935.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="146.2" y="1605" width="0.1" height="15.0" fill="rgb(208,50,22)" rx="2" ry="2" />
<text  x="149.16" y="1615.5" ></text>
</g>
<g >
<title>handle_mm_fault (27 samples, 0.14%)</title><rect x="54.2" y="1973" width="1.6" height="15.0" fill="rgb(222,105,25)" rx="2" ry="2" />
<text  x="57.15" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1493" width="0.1" height="15.0" fill="rgb(216,154,20)" rx="2" ry="2" />
<text  x="162.85" y="1503.5" ></text>
</g>
<g >
<title>__do_page_fault (35 samples, 0.18%)</title><rect x="507.9" y="1925" width="2.2" height="15.0" fill="rgb(214,21,44)" rx="2" ry="2" />
<text  x="510.90" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1829" width="0.1" height="15.0" fill="rgb(242,140,39)" rx="2" ry="2" />
<text  x="58.88" y="1839.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (40 samples, 0.21%)</title><rect x="155.8" y="1685" width="2.4" height="15.0" fill="rgb(215,85,49)" rx="2" ry="2" />
<text  x="158.78" y="1695.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (4 samples, 0.02%)</title><rect x="1121.8" y="2053" width="0.2" height="15.0" fill="rgb(216,206,32)" rx="2" ry="2" />
<text  x="1124.80" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1109" width="0.2" height="15.0" fill="rgb(212,29,38)" rx="2" ry="2" />
<text  x="223.35" y="1119.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="87.8" y="1621" width="0.1" height="15.0" fill="rgb(234,184,15)" rx="2" ry="2" />
<text  x="90.76" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1829" width="0.4" height="15.0" fill="rgb(244,108,16)" rx="2" ry="2" />
<text  x="1190.35" y="1839.5" ></text>
</g>
<g >
<title>__do_page_fault (6 samples, 0.03%)</title><rect x="727.1" y="1845" width="0.4" height="15.0" fill="rgb(223,153,25)" rx="2" ry="2" />
<text  x="730.13" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="219.2" y="1845" width="0.1" height="15.0" fill="rgb(217,32,34)" rx="2" ry="2" />
<text  x="222.17" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1973" width="0.4" height="15.0" fill="rgb(205,188,44)" rx="2" ry="2" />
<text  x="1190.35" y="1983.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (7 samples, 0.04%)</title><rect x="29.5" y="1877" width="0.4" height="15.0" fill="rgb(208,74,41)" rx="2" ry="2" />
<text  x="32.49" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (24 samples, 0.13%)</title><rect x="811.7" y="2021" width="1.5" height="15.0" fill="rgb(251,86,49)" rx="2" ry="2" />
<text  x="814.73" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (2 samples, 0.01%)</title><rect x="137.1" y="1557" width="0.1" height="15.0" fill="rgb(223,143,53)" rx="2" ry="2" />
<text  x="140.10" y="1567.5" ></text>
</g>
<g >
<title>fasttext::ProductQuantizer::get_centroids (7 samples, 0.04%)</title><rect x="1104.3" y="2053" width="0.4" height="15.0" fill="rgb(232,223,42)" rx="2" ry="2" />
<text  x="1107.28" y="2063.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::load (21 samples, 0.11%)</title><rect x="875.1" y="1989" width="1.3" height="15.0" fill="rgb(230,101,49)" rx="2" ry="2" />
<text  x="878.07" y="1999.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (5 samples, 0.03%)</title><rect x="519.7" y="1909" width="0.3" height="15.0" fill="rgb(237,131,12)" rx="2" ry="2" />
<text  x="522.68" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1333" width="0.3" height="15.0" fill="rgb(229,48,48)" rx="2" ry="2" />
<text  x="1190.41" y="1343.5" ></text>
</g>
<g >
<title>wp_page_copy (20 samples, 0.10%)</title><rect x="54.5" y="1925" width="1.2" height="15.0" fill="rgb(217,197,48)" rx="2" ry="2" />
<text  x="57.46" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1413" width="0.2" height="15.0" fill="rgb(230,64,20)" rx="2" ry="2" />
<text  x="223.35" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (351 samples, 1.83%)</title><rect x="56.1" y="757" width="21.7" height="15.0" fill="rgb(224,43,44)" rx="2" ry="2" />
<text  x="59.13" y="767.5" >[..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.02%)</title><rect x="96.1" y="2005" width="0.2" height="15.0" fill="rgb(218,121,53)" rx="2" ry="2" />
<text  x="99.09" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="821" width="0.1" height="15.0" fill="rgb(221,147,44)" rx="2" ry="2" />
<text  x="162.85" y="831.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (3 samples, 0.02%)</title><rect x="216.0" y="1669" width="0.2" height="15.0" fill="rgb(238,88,20)" rx="2" ry="2" />
<text  x="218.97" y="1679.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (6 samples, 0.03%)</title><rect x="647.0" y="1765" width="0.4" height="15.0" fill="rgb(205,52,33)" rx="2" ry="2" />
<text  x="650.02" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="453" width="0.3" height="15.0" fill="rgb(245,7,30)" rx="2" ry="2" />
<text  x="1190.04" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1717" width="0.2" height="15.0" fill="rgb(238,65,51)" rx="2" ry="2" />
<text  x="162.97" y="1727.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="135.0" y="1573" width="0.1" height="15.0" fill="rgb(252,163,6)" rx="2" ry="2" />
<text  x="138.00" y="1583.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (19 samples, 0.10%)</title><rect x="944.7" y="1797" width="1.2" height="15.0" fill="rgb(210,223,0)" rx="2" ry="2" />
<text  x="947.75" y="1807.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (25 samples, 0.13%)</title><rect x="116.5" y="2037" width="1.5" height="15.0" fill="rgb(230,154,18)" rx="2" ry="2" />
<text  x="119.50" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="87.9" y="1637" width="0.2" height="15.0" fill="rgb(210,119,52)" rx="2" ry="2" />
<text  x="90.95" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (7 samples, 0.04%)</title><rect x="1179.0" y="2037" width="0.5" height="15.0" fill="rgb(213,62,5)" rx="2" ry="2" />
<text  x="1182.02" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1829" width="0.1" height="15.0" fill="rgb(232,103,48)" rx="2" ry="2" />
<text  x="1190.72" y="1839.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="803.2" y="1973" width="0.1" height="15.0" fill="rgb(213,7,13)" rx="2" ry="2" />
<text  x="806.16" y="1983.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="573.3" y="1877" width="0.2" height="15.0" fill="rgb(253,146,48)" rx="2" ry="2" />
<text  x="576.33" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1013" width="0.3" height="15.0" fill="rgb(219,37,0)" rx="2" ry="2" />
<text  x="1189.98" y="1023.5" ></text>
</g>
<g >
<title>alloc_pages_vma (32 samples, 0.17%)</title><rect x="24.6" y="1957" width="1.9" height="15.0" fill="rgb(232,71,49)" rx="2" ry="2" />
<text  x="27.55" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 1.77%)</title><rect x="56.1" y="277" width="20.9" height="15.0" fill="rgb(225,195,30)" rx="2" ry="2" />
<text  x="59.13" y="287.5" ></text>
</g>
<g >
<title>fasttext::Loss::findKBest (2 samples, 0.01%)</title><rect x="1104.1" y="2037" width="0.1" height="15.0" fill="rgb(219,132,20)" rx="2" ry="2" />
<text  x="1107.10" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (5 samples, 0.03%)</title><rect x="763.9" y="2037" width="0.4" height="15.0" fill="rgb(244,191,12)" rx="2" ry="2" />
<text  x="766.94" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (10 samples, 0.05%)</title><rect x="874.3" y="2037" width="0.6" height="15.0" fill="rgb(219,73,13)" rx="2" ry="2" />
<text  x="877.26" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (3 samples, 0.02%)</title><rect x="537.3" y="1893" width="0.1" height="15.0" fill="rgb(214,168,28)" rx="2" ry="2" />
<text  x="540.25" y="1903.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 1.77%)</title><rect x="56.1" y="229" width="20.9" height="15.0" fill="rgb(208,24,36)" rx="2" ry="2" />
<text  x="59.13" y="239.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (4 samples, 0.02%)</title><rect x="876.9" y="2005" width="0.2" height="15.0" fill="rgb(226,127,17)" rx="2" ry="2" />
<text  x="879.85" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="318.8" y="1957" width="0.2" height="15.0" fill="rgb(224,71,1)" rx="2" ry="2" />
<text  x="321.83" y="1967.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.02%)</title><rect x="329.7" y="1957" width="0.3" height="15.0" fill="rgb(210,111,19)" rx="2" ry="2" />
<text  x="332.74" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (354 samples, 1.85%)</title><rect x="56.1" y="901" width="21.9" height="15.0" fill="rgb(210,183,39)" rx="2" ry="2" />
<text  x="59.13" y="911.5" >[..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1941" width="0.3" height="15.0" fill="rgb(214,193,34)" rx="2" ry="2" />
<text  x="519.53" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="159.9" y="1765" width="0.3" height="15.0" fill="rgb(208,113,40)" rx="2" ry="2" />
<text  x="162.85" y="1775.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (158 samples, 0.83%)</title><rect x="1111.3" y="2053" width="9.8" height="15.0" fill="rgb(211,59,8)" rx="2" ry="2" />
<text  x="1114.31" y="2063.5" ></text>
</g>
<g >
<title>get_futex_key (2 samples, 0.01%)</title><rect x="29.4" y="1909" width="0.1" height="15.0" fill="rgb(254,157,51)" rx="2" ry="2" />
<text  x="32.36" y="1919.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (14 samples, 0.07%)</title><rect x="519.7" y="1957" width="0.8" height="15.0" fill="rgb(240,146,23)" rx="2" ry="2" />
<text  x="522.68" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="709" width="0.1" height="15.0" fill="rgb(207,207,34)" rx="2" ry="2" />
<text  x="1190.72" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (24 samples, 0.13%)</title><rect x="1188.5" y="2053" width="1.4" height="15.0" fill="rgb(247,202,38)" rx="2" ry="2" />
<text  x="1191.46" y="2063.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (198 samples, 1.03%)</title><rect x="478.7" y="1957" width="12.2" height="15.0" fill="rgb(239,135,29)" rx="2" ry="2" />
<text  x="481.67" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1989" width="0.1" height="15.0" fill="rgb(239,169,37)" rx="2" ry="2" />
<text  x="58.88" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="220.0" y="1861" width="0.5" height="15.0" fill="rgb(243,206,31)" rx="2" ry="2" />
<text  x="222.98" y="1871.5" ></text>
</g>
<g >
<title>unmap_vmas (3 samples, 0.02%)</title><rect x="1102.1" y="1893" width="0.2" height="15.0" fill="rgb(214,54,6)" rx="2" ry="2" />
<text  x="1105.12" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (94 samples, 0.49%)</title><rect x="182.6" y="1781" width="5.8" height="15.0" fill="rgb(234,209,23)" rx="2" ry="2" />
<text  x="185.61" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="82.2" y="1301" width="0.1" height="15.0" fill="rgb(252,213,30)" rx="2" ry="2" />
<text  x="85.21" y="1311.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::addRowToVector (1,155 samples, 6.04%)</title><rect x="244.7" y="1973" width="71.2" height="15.0" fill="rgb(216,66,35)" rx="2" ry="2" />
<text  x="247.70" y="1983.5" >fasttext..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (429 samples, 2.24%)</title><rect x="133.1" y="1909" width="26.4" height="15.0" fill="rgb(207,121,11)" rx="2" ry="2" />
<text  x="136.09" y="1919.5" >s..</text>
</g>
<g >
<title>__asan::PoisonShadow (85 samples, 0.44%)</title><rect x="48.5" y="2021" width="5.3" height="15.0" fill="rgb(243,101,43)" rx="2" ry="2" />
<text  x="51.54" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (104 samples, 0.54%)</title><rect x="207.0" y="1733" width="6.4" height="15.0" fill="rgb(232,115,13)" rx="2" ry="2" />
<text  x="209.96" y="1743.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="727.4" y="1781" width="0.1" height="15.0" fill="rgb(208,34,10)" rx="2" ry="2" />
<text  x="730.37" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memmove (17 samples, 0.09%)</title><rect x="487.6" y="1925" width="1.1" height="15.0" fill="rgb(235,205,10)" rx="2" ry="2" />
<text  x="490.61" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (460 samples, 2.40%)</title><rect x="160.5" y="1877" width="28.4" height="15.0" fill="rgb(216,112,49)" rx="2" ry="2" />
<text  x="163.53" y="1887.5" >st..</text>
</g>
<g >
<title>clear_page_erms (7 samples, 0.04%)</title><rect x="498.7" y="1813" width="0.4" height="15.0" fill="rgb(217,108,16)" rx="2" ry="2" />
<text  x="501.65" y="1823.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.01%)</title><rect x="509.7" y="1845" width="0.1" height="15.0" fill="rgb(210,186,40)" rx="2" ry="2" />
<text  x="512.69" y="1855.5" ></text>
</g>
<g >
<title>memcmp@plt (4 samples, 0.02%)</title><rect x="1110.0" y="2053" width="0.3" height="15.0" fill="rgb(238,174,0)" rx="2" ry="2" />
<text  x="1113.02" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (69 samples, 0.36%)</title><rect x="161.9" y="1573" width="4.2" height="15.0" fill="rgb(240,37,40)" rx="2" ry="2" />
<text  x="164.89" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1093" width="0.3" height="15.0" fill="rgb(216,41,8)" rx="2" ry="2" />
<text  x="1189.98" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1061" width="0.1" height="15.0" fill="rgb(209,223,1)" rx="2" ry="2" />
<text  x="1190.72" y="1071.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (2 samples, 0.01%)</title><rect x="95.7" y="2021" width="0.1" height="15.0" fill="rgb(239,165,47)" rx="2" ry="2" />
<text  x="98.72" y="2031.5" ></text>
</g>
<g >
<title>Preprocess (2 samples, 0.01%)</title><rect x="43.7" y="2037" width="0.2" height="15.0" fill="rgb(217,115,28)" rx="2" ry="2" />
<text  x="46.73" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (588 samples, 3.07%)</title><rect x="56.1" y="1941" width="36.2" height="15.0" fill="rgb(210,219,42)" rx="2" ry="2" />
<text  x="59.07" y="1951.5" >[un..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="188.4" y="1813" width="0.2" height="15.0" fill="rgb(252,130,21)" rx="2" ry="2" />
<text  x="191.40" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="405" width="0.1" height="15.0" fill="rgb(228,50,42)" rx="2" ry="2" />
<text  x="1190.72" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (83 samples, 0.43%)</title><rect x="161.4" y="1637" width="5.1" height="15.0" fill="rgb(210,84,50)" rx="2" ry="2" />
<text  x="164.39" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (164 samples, 0.86%)</title><rect x="191.2" y="1765" width="10.2" height="15.0" fill="rgb(210,97,52)" rx="2" ry="2" />
<text  x="194.24" y="1775.5" ></text>
</g>
<g >
<title>smp_call_function_single (20 samples, 0.10%)</title><rect x="944.7" y="1829" width="1.2" height="15.0" fill="rgb(234,70,26)" rx="2" ry="2" />
<text  x="947.69" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1653" width="0.1" height="15.0" fill="rgb(231,27,33)" rx="2" ry="2" />
<text  x="192.51" y="1663.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_product_impl&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt;, Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::DenseShape, Eigen::DenseShape, 8&gt;::scaleAndAddTo&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; &gt; (133 samples, 0.70%)</title><rect x="499.7" y="1941" width="8.2" height="15.0" fill="rgb(240,106,54)" rx="2" ry="2" />
<text  x="502.70" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1605" width="0.4" height="15.0" fill="rgb(225,198,11)" rx="2" ry="2" />
<text  x="1189.92" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1125" width="0.1" height="15.0" fill="rgb(239,116,16)" rx="2" ry="2" />
<text  x="162.85" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt;,  (11 samples, 0.06%)</title><rect x="219.9" y="1957" width="0.6" height="15.0" fill="rgb(241,228,17)" rx="2" ry="2" />
<text  x="222.85" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1461" width="0.2" height="15.0" fill="rgb(206,179,7)" rx="2" ry="2" />
<text  x="223.04" y="1471.5" ></text>
</g>
<g >
<title>[unknown] (341 samples, 1.78%)</title><rect x="56.1" y="357" width="21.1" height="15.0" fill="rgb(231,223,31)" rx="2" ry="2" />
<text  x="59.13" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="220.4" y="1029" width="0.1" height="15.0" fill="rgb(241,115,34)" rx="2" ry="2" />
<text  x="223.41" y="1039.5" ></text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="88.1" y="1557" width="0.1" height="15.0" fill="rgb(242,79,50)" rx="2" ry="2" />
<text  x="91.07" y="1567.5" ></text>
</g>
<g >
<title>std::__basic_future&lt;boost::optional&lt;TDocument&gt; &gt;::_M_get_result (2 samples, 0.01%)</title><rect x="132.3" y="1973" width="0.1" height="15.0" fill="rgb(206,11,22)" rx="2" ry="2" />
<text  x="135.29" y="1983.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (46 samples, 0.24%)</title><rect x="1122.0" y="2053" width="2.9" height="15.0" fill="rgb(247,63,20)" rx="2" ry="2" />
<text  x="1125.04" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="661" width="0.1" height="15.0" fill="rgb(222,129,39)" rx="2" ry="2" />
<text  x="1190.72" y="671.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (2 samples, 0.01%)</title><rect x="1187.9" y="2053" width="0.1" height="15.0" fill="rgb(248,194,46)" rx="2" ry="2" />
<text  x="1190.90" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1125" width="0.1" height="15.0" fill="rgb(223,113,31)" rx="2" ry="2" />
<text  x="1190.72" y="1135.5" ></text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (305 samples, 1.59%)</title><rect x="225.8" y="1973" width="18.8" height="15.0" fill="rgb(232,167,53)" rx="2" ry="2" />
<text  x="228.83" y="1983.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="1022.1" y="1941" width="0.2" height="15.0" fill="rgb(207,39,4)" rx="2" ry="2" />
<text  x="1025.14" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (3 samples, 0.02%)</title><rect x="515.2" y="1989" width="0.2" height="15.0" fill="rgb(234,124,23)" rx="2" ry="2" />
<text  x="518.18" y="1999.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="78.3" y="1077" width="0.2" height="15.0" fill="rgb(237,14,40)" rx="2" ry="2" />
<text  x="81.33" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="949" width="0.1" height="15.0" fill="rgb(216,20,22)" rx="2" ry="2" />
<text  x="1190.72" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="201.2" y="1749" width="0.2" height="15.0" fill="rgb(225,120,5)" rx="2" ry="2" />
<text  x="204.17" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.02%)</title><rect x="157.4" y="1669" width="0.2" height="15.0" fill="rgb(254,158,7)" rx="2" ry="2" />
<text  x="160.45" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (454 samples, 2.37%)</title><rect x="56.1" y="1381" width="28.0" height="15.0" fill="rgb(249,87,51)" rx="2" ry="2" />
<text  x="59.07" y="1391.5" >[..</text>
</g>
<g >
<title>free_pages_and_swap_cache (9 samples, 0.05%)</title><rect x="520.0" y="1893" width="0.5" height="15.0" fill="rgb(214,155,30)" rx="2" ry="2" />
<text  x="522.99" y="1903.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (6 samples, 0.03%)</title><rect x="518.0" y="2037" width="0.4" height="15.0" fill="rgb(237,121,16)" rx="2" ry="2" />
<text  x="521.01" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="549" width="0.1" height="15.0" fill="rgb(254,14,25)" rx="2" ry="2" />
<text  x="162.85" y="559.5" ></text>
</g>
<g >
<title>Eigen::internal::gemv_dense_selector&lt;2, 1, true&gt;::run&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt; (324 samples, 1.69%)</title><rect x="384.9" y="1941" width="20.0" height="15.0" fill="rgb(212,216,48)" rx="2" ry="2" />
<text  x="387.94" y="1951.5" ></text>
</g>
<g >
<title>try_charge (3 samples, 0.02%)</title><rect x="499.4" y="1813" width="0.2" height="15.0" fill="rgb(251,63,44)" rx="2" ry="2" />
<text  x="502.39" y="1823.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_vector_product&lt;long, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 1&gt;, 1, false, float, Eigen::internal::const_blas_data_mapper&lt;float, long, 0&gt;, false, 0&gt;::run (285 samples, 1.49%)</title><rect x="226.8" y="1941" width="17.6" height="15.0" fill="rgb(221,168,43)" rx="2" ry="2" />
<text  x="229.82" y="1951.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (74 samples, 0.39%)</title><rect x="727.5" y="1877" width="4.6" height="15.0" fill="rgb(238,154,26)" rx="2" ry="2" />
<text  x="730.50" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (353 samples, 1.84%)</title><rect x="56.1" y="837" width="21.8" height="15.0" fill="rgb(209,156,25)" rx="2" ry="2" />
<text  x="59.13" y="847.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1173" width="0.2" height="15.0" fill="rgb(220,131,15)" rx="2" ry="2" />
<text  x="223.35" y="1183.5" ></text>
</g>
<g >
<title>TSlinkClustering::Cluster (2,840 samples, 14.84%)</title><rect x="339.4" y="2005" width="175.2" height="15.0" fill="rgb(211,5,14)" rx="2" ry="2" />
<text  x="342.43" y="2015.5" >TSlinkClustering::Clus..</text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.03%)</title><rect x="151.8" y="1637" width="0.3" height="15.0" fill="rgb(209,49,11)" rx="2" ry="2" />
<text  x="154.83" y="1647.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="138.0" y="1589" width="0.1" height="15.0" fill="rgb(242,3,51)" rx="2" ry="2" />
<text  x="140.96" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (10 samples, 0.05%)</title><rect x="205.8" y="1605" width="0.6" height="15.0" fill="rgb(225,228,24)" rx="2" ry="2" />
<text  x="208.79" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (13,587 samples, 71.01%)</title><rect x="43.1" y="2053" width="837.9" height="15.0" fill="rgb(213,143,40)" rx="2" ry="2" />
<text  x="46.12" y="2063.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="949" width="0.3" height="15.0" fill="rgb(243,49,51)" rx="2" ry="2" />
<text  x="1190.41" y="959.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::vector (4 samples, 0.02%)</title><rect x="516.5" y="1861" width="0.3" height="15.0" fill="rgb(254,207,20)" rx="2" ry="2" />
<text  x="519.53" y="1871.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (3 samples, 0.02%)</title><rect x="148.5" y="1605" width="0.2" height="15.0" fill="rgb(209,184,0)" rx="2" ry="2" />
<text  x="151.50" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1845" width="0.1" height="15.0" fill="rgb(221,223,22)" rx="2" ry="2" />
<text  x="1190.72" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1957" width="0.4" height="15.0" fill="rgb(247,59,14)" rx="2" ry="2" />
<text  x="1190.35" y="1967.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="80.8" y="1237" width="0.1" height="15.0" fill="rgb(210,170,5)" rx="2" ry="2" />
<text  x="83.79" y="1247.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="178.5" y="1637" width="0.2" height="15.0" fill="rgb(212,226,20)" rx="2" ry="2" />
<text  x="181.54" y="1647.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (5 samples, 0.03%)</title><rect x="94.9" y="2021" width="0.3" height="15.0" fill="rgb(228,37,53)" rx="2" ry="2" />
<text  x="97.92" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="877.7" y="2021" width="0.1" height="15.0" fill="rgb(234,7,30)" rx="2" ry="2" />
<text  x="880.72" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (58 samples, 0.30%)</title><rect x="139.9" y="1605" width="3.6" height="15.0" fill="rgb(254,67,54)" rx="2" ry="2" />
<text  x="142.93" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1589" width="0.4" height="15.0" fill="rgb(240,107,45)" rx="2" ry="2" />
<text  x="1190.35" y="1599.5" ></text>
</g>
<g >
<title>do_syscall_64 (19 samples, 0.10%)</title><rect x="519.6" y="2005" width="1.1" height="15.0" fill="rgb(239,110,29)" rx="2" ry="2" />
<text  x="522.56" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.9" y="1925" width="0.4" height="15.0" fill="rgb(241,6,37)" rx="2" ry="2" />
<text  x="1189.85" y="1935.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::__detail::_State&lt;char&gt; const*, std::__detail::_State&lt;char&gt;*&gt; (12 samples, 0.06%)</title><rect x="160.7" y="1637" width="0.7" height="15.0" fill="rgb(235,26,22)" rx="2" ry="2" />
<text  x="163.65" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="85" width="0.1" height="15.0" fill="rgb(211,214,30)" rx="2" ry="2" />
<text  x="1190.72" y="95.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (4 samples, 0.02%)</title><rect x="338.8" y="1989" width="0.3" height="15.0" fill="rgb(221,194,29)" rx="2" ry="2" />
<text  x="341.81" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (79 samples, 0.41%)</title><rect x="201.8" y="1637" width="4.9" height="15.0" fill="rgb(218,168,4)" rx="2" ry="2" />
<text  x="204.85" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (8 samples, 0.04%)</title><rect x="880.3" y="2005" width="0.5" height="15.0" fill="rgb(224,109,1)" rx="2" ry="2" />
<text  x="883.31" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1253" width="0.1" height="15.0" fill="rgb(250,35,15)" rx="2" ry="2" />
<text  x="162.85" y="1263.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (20 samples, 0.10%)</title><rect x="944.7" y="1877" width="1.2" height="15.0" fill="rgb(231,170,35)" rx="2" ry="2" />
<text  x="947.69" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (445 samples, 2.33%)</title><rect x="191.2" y="1861" width="27.5" height="15.0" fill="rgb(237,135,14)" rx="2" ry="2" />
<text  x="194.24" y="1871.5" >s..</text>
</g>
<g >
<title>__sanitizer_weak_hook_memcmp (12 samples, 0.06%)</title><rect x="1149.0" y="2037" width="0.7" height="15.0" fill="rgb(224,168,24)" rx="2" ry="2" />
<text  x="1151.99" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1397" width="0.1" height="15.0" fill="rgb(238,6,5)" rx="2" ry="2" />
<text  x="162.85" y="1407.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (6 samples, 0.03%)</title><rect x="55.3" y="1845" width="0.4" height="15.0" fill="rgb(219,154,6)" rx="2" ry="2" />
<text  x="58.33" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (2 samples, 0.01%)</title><rect x="217.5" y="1669" width="0.1" height="15.0" fill="rgb(249,103,2)" rx="2" ry="2" />
<text  x="220.51" y="1679.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="170.1" y="1573" width="0.2" height="15.0" fill="rgb(227,220,19)" rx="2" ry="2" />
<text  x="173.15" y="1583.5" ></text>
</g>
<g >
<title>alloc_pages_vma (7 samples, 0.04%)</title><rect x="54.6" y="1909" width="0.4" height="15.0" fill="rgb(242,98,33)" rx="2" ry="2" />
<text  x="57.59" y="1919.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (3 samples, 0.02%)</title><rect x="338.4" y="1989" width="0.2" height="15.0" fill="rgb(210,203,3)" rx="2" ry="2" />
<text  x="341.44" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1685" width="0.2" height="15.0" fill="rgb(230,77,29)" rx="2" ry="2" />
<text  x="162.97" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="469" width="0.3" height="15.0" fill="rgb(230,44,18)" rx="2" ry="2" />
<text  x="1190.04" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="195.2" y="1557" width="0.4" height="15.0" fill="rgb(225,19,18)" rx="2" ry="2" />
<text  x="198.19" y="1567.5" ></text>
</g>
<g >
<title>do_wp_page (20 samples, 0.10%)</title><rect x="54.5" y="1941" width="1.2" height="15.0" fill="rgb(222,174,47)" rx="2" ry="2" />
<text  x="57.46" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="160.0" y="1317" width="0.2" height="15.0" fill="rgb(217,55,37)" rx="2" ry="2" />
<text  x="163.04" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (2 samples, 0.01%)</title><rect x="188.8" y="1845" width="0.1" height="15.0" fill="rgb(223,226,29)" rx="2" ry="2" />
<text  x="191.77" y="1855.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (3 samples, 0.02%)</title><rect x="943.0" y="1893" width="0.1" height="15.0" fill="rgb(252,112,9)" rx="2" ry="2" />
<text  x="945.96" y="1903.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="878.1" y="2021" width="0.2" height="15.0" fill="rgb(219,228,10)" rx="2" ry="2" />
<text  x="881.15" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1653" width="0.1" height="15.0" fill="rgb(222,105,21)" rx="2" ry="2" />
<text  x="162.85" y="1663.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="88.2" y="1653" width="0.1" height="15.0" fill="rgb(207,188,5)" rx="2" ry="2" />
<text  x="91.19" y="1663.5" ></text>
</g>
<g >
<title>fasttext::QuantMatrix::addRowToVector (38 samples, 0.20%)</title><rect x="1104.7" y="2053" width="2.4" height="15.0" fill="rgb(242,25,35)" rx="2" ry="2" />
<text  x="1107.71" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="327.6" y="1941" width="0.2" height="15.0" fill="rgb(225,184,15)" rx="2" ry="2" />
<text  x="330.65" y="1951.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.02%)</title><rect x="1103.7" y="2021" width="0.2" height="15.0" fill="rgb(238,22,34)" rx="2" ry="2" />
<text  x="1106.73" y="2031.5" ></text>
</g>
<g >
<title>nlohmann::detail::serializer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::dump (6 samples, 0.03%)</title><rect x="515.4" y="1941" width="0.4" height="15.0" fill="rgb(217,85,28)" rx="2" ry="2" />
<text  x="518.42" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1861" width="0.1" height="15.0" fill="rgb(218,186,17)" rx="2" ry="2" />
<text  x="58.88" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="86.3" y="1509" width="0.2" height="15.0" fill="rgb(243,222,13)" rx="2" ry="2" />
<text  x="89.34" y="1519.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.01%)</title><rect x="91.9" y="1749" width="0.1" height="15.0" fill="rgb(207,1,31)" rx="2" ry="2" />
<text  x="94.89" y="1759.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="199.2" y="1589" width="0.1" height="15.0" fill="rgb(246,57,10)" rx="2" ry="2" />
<text  x="202.19" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.03%)</title><rect x="766.0" y="2021" width="0.3" height="15.0" fill="rgb(211,66,16)" rx="2" ry="2" />
<text  x="768.98" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1205" width="0.2" height="15.0" fill="rgb(221,92,51)" rx="2" ry="2" />
<text  x="223.04" y="1215.5" ></text>
</g>
<g >
<title>clear_page_erms (4 samples, 0.02%)</title><rect x="647.0" y="1749" width="0.3" height="15.0" fill="rgb(243,30,4)" rx="2" ry="2" />
<text  x="650.02" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.86%)</title><rect x="56.1" y="965" width="22.0" height="15.0" fill="rgb(213,206,7)" rx="2" ry="2" />
<text  x="59.13" y="975.5" >[..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (101 samples, 0.53%)</title><rect x="980.8" y="2053" width="6.3" height="15.0" fill="rgb(212,13,29)" rx="2" ry="2" />
<text  x="983.83" y="2063.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (4 samples, 0.02%)</title><rect x="519.7" y="1861" width="0.3" height="15.0" fill="rgb(252,161,50)" rx="2" ry="2" />
<text  x="522.74" y="1871.5" ></text>
</g>
<g >
<title>release_pages (9 samples, 0.05%)</title><rect x="520.0" y="1877" width="0.5" height="15.0" fill="rgb(234,215,40)" rx="2" ry="2" />
<text  x="522.99" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1541" width="0.1" height="15.0" fill="rgb(250,200,22)" rx="2" ry="2" />
<text  x="162.85" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1701" width="0.2" height="15.0" fill="rgb(234,184,25)" rx="2" ry="2" />
<text  x="162.97" y="1711.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::__cxx11::collate&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="206.5" y="1605" width="0.1" height="15.0" fill="rgb(205,116,22)" rx="2" ry="2" />
<text  x="209.47" y="1615.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (3 samples, 0.02%)</title><rect x="1188.0" y="2053" width="0.2" height="15.0" fill="rgb(217,49,24)" rx="2" ry="2" />
<text  x="1191.03" y="2063.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="85.6" y="1445" width="0.1" height="15.0" fill="rgb(238,61,54)" rx="2" ry="2" />
<text  x="88.60" y="1455.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.81%)</title><rect x="56.1" y="517" width="21.4" height="15.0" fill="rgb(214,210,13)" rx="2" ry="2" />
<text  x="59.13" y="527.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="469" width="0.1" height="15.0" fill="rgb(238,223,5)" rx="2" ry="2" />
<text  x="162.85" y="479.5" ></text>
</g>
<g >
<title>get_page_from_freelist (8 samples, 0.04%)</title><rect x="26.0" y="1925" width="0.5" height="15.0" fill="rgb(240,31,16)" rx="2" ry="2" />
<text  x="28.97" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="133" width="0.1" height="15.0" fill="rgb(245,188,32)" rx="2" ry="2" />
<text  x="1190.72" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="189.5" y="1621" width="0.1" height="15.0" fill="rgb(244,189,5)" rx="2" ry="2" />
<text  x="192.51" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1317" width="0.1" height="15.0" fill="rgb(245,205,31)" rx="2" ry="2" />
<text  x="1190.72" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1205" width="0.1" height="15.0" fill="rgb(231,79,10)" rx="2" ry="2" />
<text  x="1190.72" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.0" y="1397" width="0.2" height="15.0" fill="rgb(232,164,42)" rx="2" ry="2" />
<text  x="223.04" y="1407.5" ></text>
</g>
<g >
<title>Summarize (2,408 samples, 12.58%)</title><rect x="190.3" y="2005" width="148.5" height="15.0" fill="rgb(216,144,27)" rx="2" ry="2" />
<text  x="193.31" y="2015.5" >Summarize</text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1973" width="0.1" height="15.0" fill="rgb(237,220,49)" rx="2" ry="2" />
<text  x="58.88" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (21 samples, 0.11%)</title><rect x="819.6" y="2021" width="1.3" height="15.0" fill="rgb(222,229,40)" rx="2" ry="2" />
<text  x="822.57" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (3 samples, 0.02%)</title><rect x="1121.6" y="2053" width="0.2" height="15.0" fill="rgb(247,183,38)" rx="2" ry="2" />
<text  x="1124.61" y="2063.5" ></text>
</g>
<g >
<title>[unknown] (586 samples, 3.06%)</title><rect x="56.1" y="1925" width="36.1" height="15.0" fill="rgb(249,158,30)" rx="2" ry="2" />
<text  x="59.07" y="1935.5" >[un..</text>
</g>
<g >
<title>__asan::GetCurrentThread (4 samples, 0.02%)</title><rect x="156.6" y="1669" width="0.2" height="15.0" fill="rgb(219,82,8)" rx="2" ry="2" />
<text  x="159.58" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="789" width="0.3" height="15.0" fill="rgb(210,41,12)" rx="2" ry="2" />
<text  x="1190.41" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (70 samples, 0.37%)</title><rect x="154.4" y="1765" width="4.3" height="15.0" fill="rgb(228,218,23)" rx="2" ry="2" />
<text  x="157.36" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::StackTrace::GetCurrentPc (2 samples, 0.01%)</title><rect x="592.9" y="1877" width="0.1" height="15.0" fill="rgb(232,161,23)" rx="2" ry="2" />
<text  x="595.88" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (3 samples, 0.02%)</title><rect x="1017.8" y="2053" width="0.2" height="15.0" fill="rgb(231,172,6)" rx="2" ry="2" />
<text  x="1020.83" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="485" width="0.1" height="15.0" fill="rgb(208,48,10)" rx="2" ry="2" />
<text  x="162.85" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1685" width="0.2" height="15.0" fill="rgb(231,25,37)" rx="2" ry="2" />
<text  x="223.28" y="1695.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan (4 samples, 0.02%)</title><rect x="124.6" y="1941" width="0.3" height="15.0" fill="rgb(238,166,27)" rx="2" ry="2" />
<text  x="127.64" y="1951.5" ></text>
</g>
<g >
<title>__handle_mm_fault (6 samples, 0.03%)</title><rect x="1021.9" y="1973" width="0.4" height="15.0" fill="rgb(249,145,23)" rx="2" ry="2" />
<text  x="1024.90" y="1983.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (6 samples, 0.03%)</title><rect x="516.0" y="1989" width="0.3" height="15.0" fill="rgb(247,154,42)" rx="2" ry="2" />
<text  x="518.98" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.9" y="2021" width="0.4" height="15.0" fill="rgb(210,103,17)" rx="2" ry="2" />
<text  x="1189.85" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (335 samples, 1.75%)</title><rect x="56.1" y="133" width="20.7" height="15.0" fill="rgb(229,1,12)" rx="2" ry="2" />
<text  x="59.13" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="725" width="0.1" height="15.0" fill="rgb(212,135,19)" rx="2" ry="2" />
<text  x="1190.72" y="735.5" ></text>
</g>
<g >
<title>native_write_msr (2 samples, 0.01%)</title><rect x="519.9" y="1765" width="0.1" height="15.0" fill="rgb(220,112,17)" rx="2" ry="2" />
<text  x="522.86" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;::GetFromAllocator (14 samples, 0.07%)</title><rect x="762.2" y="2037" width="0.9" height="15.0" fill="rgb(228,196,43)" rx="2" ry="2" />
<text  x="765.22" y="2047.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (3,728 samples, 19.48%)</title><rect x="523.6" y="2021" width="229.9" height="15.0" fill="rgb(238,29,46)" rx="2" ry="2" />
<text  x="526.56" y="2031.5" >std::__future_base::_State_bas..</text>
</g>
<g >
<title>fasttext::Vector::addVector (4 samples, 0.02%)</title><rect x="336.5" y="1989" width="0.2" height="15.0" fill="rgb(247,141,40)" rx="2" ry="2" />
<text  x="339.47" y="1999.5" ></text>
</g>
<g >
<title>page_fault (4 samples, 0.02%)</title><rect x="107.9" y="2021" width="0.3" height="15.0" fill="rgb(250,88,2)" rx="2" ry="2" />
<text  x="110.93" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="53" width="0.3" height="15.0" fill="rgb(248,200,43)" rx="2" ry="2" />
<text  x="1190.04" y="63.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (2 samples, 0.01%)</title><rect x="1102.0" y="1845" width="0.1" height="15.0" fill="rgb(254,47,27)" rx="2" ry="2" />
<text  x="1105.00" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="277" width="0.3" height="15.0" fill="rgb(232,142,36)" rx="2" ry="2" />
<text  x="1190.41" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__detail::_State&lt;char&gt;, std::allocator&lt;std::__detail::_State&lt;char&gt; &gt; &gt;::_M_realloc_insert&lt;std::__detail::_State&lt;char&gt; &gt; (7 samples, 0.04%)</title><rect x="191.2" y="1669" width="0.5" height="15.0" fill="rgb(208,100,8)" rx="2" ry="2" />
<text  x="194.24" y="1679.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (24 samples, 0.13%)</title><rect x="811.7" y="2037" width="1.5" height="15.0" fill="rgb(214,114,39)" rx="2" ry="2" />
<text  x="814.73" y="2047.5" ></text>
</g>
<g >
<title>do_page_fault (6 samples, 0.03%)</title><rect x="1021.9" y="2021" width="0.4" height="15.0" fill="rgb(249,138,35)" rx="2" ry="2" />
<text  x="1024.90" y="2031.5" ></text>
</g>
<g >
<title>clear_page_erms (6 samples, 0.03%)</title><rect x="692.0" y="1733" width="0.4" height="15.0" fill="rgb(227,113,21)" rx="2" ry="2" />
<text  x="695.04" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (557 samples, 2.91%)</title><rect x="56.1" y="1813" width="34.3" height="15.0" fill="rgb(243,182,7)" rx="2" ry="2" />
<text  x="59.07" y="1823.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1541" width="0.4" height="15.0" fill="rgb(230,191,24)" rx="2" ry="2" />
<text  x="1190.35" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1285" width="0.1" height="15.0" fill="rgb(227,70,46)" rx="2" ry="2" />
<text  x="162.85" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="997" width="0.1" height="15.0" fill="rgb(208,229,3)" rx="2" ry="2" />
<text  x="162.85" y="1007.5" ></text>
</g>
<g >
<title>do_wp_page (69 samples, 0.36%)</title><rect x="941.7" y="1957" width="4.2" height="15.0" fill="rgb(244,40,42)" rx="2" ry="2" />
<text  x="944.67" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_BracketMatcher (2 samples, 0.01%)</title><rect x="191.5" y="1621" width="0.1" height="15.0" fill="rgb(214,11,45)" rx="2" ry="2" />
<text  x="194.49" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="220.4" y="885" width="0.1" height="15.0" fill="rgb(222,39,48)" rx="2" ry="2" />
<text  x="223.41" y="895.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1813" width="0.3" height="15.0" fill="rgb(215,105,44)" rx="2" ry="2" />
<text  x="519.53" y="1823.5" ></text>
</g>
<g >
<title>std::operator&gt;&gt;&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="338.7" y="1989" width="0.1" height="15.0" fill="rgb(247,48,31)" rx="2" ry="2" />
<text  x="341.69" y="1999.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="877.8" y="2021" width="0.2" height="15.0" fill="rgb(251,63,45)" rx="2" ry="2" />
<text  x="880.84" y="2031.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (14 samples, 0.07%)</title><rect x="27.3" y="1941" width="0.8" height="15.0" fill="rgb(215,111,33)" rx="2" ry="2" />
<text  x="30.27" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (75 samples, 0.39%)</title><rect x="133.6" y="1669" width="4.6" height="15.0" fill="rgb(207,226,15)" rx="2" ry="2" />
<text  x="136.58" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (53 samples, 0.28%)</title><rect x="611.5" y="1861" width="3.3" height="15.0" fill="rgb(239,107,31)" rx="2" ry="2" />
<text  x="614.50" y="1871.5" ></text>
</g>
<g >
<title>__asan::asan_delete (2 samples, 0.01%)</title><rect x="198.9" y="1589" width="0.2" height="15.0" fill="rgb(212,62,7)" rx="2" ry="2" />
<text  x="201.95" y="1599.5" ></text>
</g>
<g >
<title>fasttext::DenseMatrix::dotRow (3 samples, 0.02%)</title><rect x="1103.4" y="2053" width="0.2" height="15.0" fill="rgb(240,25,52)" rx="2" ry="2" />
<text  x="1106.42" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1253" width="0.2" height="15.0" fill="rgb(247,136,35)" rx="2" ry="2" />
<text  x="163.04" y="1263.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter@plt (3 samples, 0.02%)</title><rect x="732.8" y="1893" width="0.2" height="15.0" fill="rgb(229,7,13)" rx="2" ry="2" />
<text  x="735.80" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1525" width="0.2" height="15.0" fill="rgb(251,80,10)" rx="2" ry="2" />
<text  x="223.04" y="1535.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="209.4" y="1637" width="0.1" height="15.0" fill="rgb(231,85,11)" rx="2" ry="2" />
<text  x="212.37" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="501" width="0.3" height="15.0" fill="rgb(254,83,51)" rx="2" ry="2" />
<text  x="1190.04" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="573.6" y="1893" width="0.1" height="15.0" fill="rgb(245,161,6)" rx="2" ry="2" />
<text  x="576.58" y="1903.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="516.5" y="1829" width="0.3" height="15.0" fill="rgb(223,138,44)" rx="2" ry="2" />
<text  x="519.53" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (85 samples, 0.44%)</title><rect x="191.2" y="1733" width="5.3" height="15.0" fill="rgb(244,87,13)" rx="2" ry="2" />
<text  x="194.24" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (89 samples, 0.47%)</title><rect x="201.4" y="1685" width="5.4" height="15.0" fill="rgb(235,46,20)" rx="2" ry="2" />
<text  x="204.35" y="1695.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.02%)</title><rect x="1103.7" y="2005" width="0.2" height="15.0" fill="rgb(247,144,23)" rx="2" ry="2" />
<text  x="1106.73" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1477" width="0.3" height="15.0" fill="rgb(252,198,26)" rx="2" ry="2" />
<text  x="1189.98" y="1487.5" ></text>
</g>
<g >
<title>clear_page_erms (3 samples, 0.02%)</title><rect x="677.2" y="1733" width="0.2" height="15.0" fill="rgb(233,44,23)" rx="2" ry="2" />
<text  x="680.18" y="1743.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="179.3" y="1621" width="0.1" height="15.0" fill="rgb(224,224,12)" rx="2" ry="2" />
<text  x="182.28" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (8 samples, 0.04%)</title><rect x="159.0" y="1877" width="0.5" height="15.0" fill="rgb(251,192,19)" rx="2" ry="2" />
<text  x="161.99" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1605" width="0.1" height="15.0" fill="rgb(225,214,12)" rx="2" ry="2" />
<text  x="162.85" y="1615.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (422 samples, 2.21%)</title><rect x="539.5" y="1925" width="26.1" height="15.0" fill="rgb(205,94,39)" rx="2" ry="2" />
<text  x="542.54" y="1935.5" >f..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1813" width="0.4" height="15.0" fill="rgb(245,94,10)" rx="2" ry="2" />
<text  x="1190.35" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (188 samples, 0.98%)</title><rect x="160.6" y="1749" width="11.6" height="15.0" fill="rgb(213,3,3)" rx="2" ry="2" />
<text  x="163.59" y="1759.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.03%)</title><rect x="142.3" y="1589" width="0.4" height="15.0" fill="rgb(249,41,54)" rx="2" ry="2" />
<text  x="145.34" y="1599.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (7 samples, 0.04%)</title><rect x="43.3" y="2037" width="0.4" height="15.0" fill="rgb(236,19,12)" rx="2" ry="2" />
<text  x="46.30" y="2047.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (4 samples, 0.02%)</title><rect x="315.7" y="1957" width="0.2" height="15.0" fill="rgb(247,139,42)" rx="2" ry="2" />
<text  x="318.68" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1045" width="0.1" height="15.0" fill="rgb(235,94,3)" rx="2" ry="2" />
<text  x="1190.72" y="1055.5" ></text>
</g>
<g >
<title>[unknown] (60 samples, 0.31%)</title><rect x="807.9" y="2021" width="3.7" height="15.0" fill="rgb(216,190,50)" rx="2" ry="2" />
<text  x="810.91" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (74 samples, 0.39%)</title><rect x="133.6" y="1605" width="4.6" height="15.0" fill="rgb(229,145,1)" rx="2" ry="2" />
<text  x="136.64" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1717" width="0.1" height="15.0" fill="rgb(214,83,22)" rx="2" ry="2" />
<text  x="1190.72" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt;, __sanitizer::SizeClassAllocatorLocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;, __sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt; &gt;::Allocate (131 samples, 0.68%)</title><rect x="1009.7" y="2053" width="8.1" height="15.0" fill="rgb(246,52,0)" rx="2" ry="2" />
<text  x="1012.75" y="2063.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="153.8" y="1669" width="0.1" height="15.0" fill="rgb(223,211,8)" rx="2" ry="2" />
<text  x="156.81" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="581" width="0.1" height="15.0" fill="rgb(237,31,52)" rx="2" ry="2" />
<text  x="1190.72" y="591.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (10 samples, 0.05%)</title><rect x="587.0" y="1877" width="0.6" height="15.0" fill="rgb(252,142,12)" rx="2" ry="2" />
<text  x="589.96" y="1887.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="88.1" y="1509" width="0.1" height="15.0" fill="rgb(227,175,41)" rx="2" ry="2" />
<text  x="91.07" y="1519.5" ></text>
</g>
<g >
<title>page_fault (35 samples, 0.18%)</title><rect x="507.9" y="1957" width="2.2" height="15.0" fill="rgb(213,67,50)" rx="2" ry="2" />
<text  x="510.90" y="1967.5" ></text>
</g>
<g >
<title>zap_page_range (3 samples, 0.02%)</title><rect x="96.1" y="1957" width="0.2" height="15.0" fill="rgb(236,79,22)" rx="2" ry="2" />
<text  x="99.09" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (347 samples, 1.81%)</title><rect x="56.1" y="629" width="21.4" height="15.0" fill="rgb(252,85,52)" rx="2" ry="2" />
<text  x="59.13" y="639.5" >[..</text>
</g>
<g >
<title>handle_mm_fault (31 samples, 0.16%)</title><rect x="508.1" y="1909" width="2.0" height="15.0" fill="rgb(208,146,15)" rx="2" ry="2" />
<text  x="511.15" y="1919.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="149.6" y="1669" width="0.2" height="15.0" fill="rgb(240,149,53)" rx="2" ry="2" />
<text  x="152.55" y="1679.5" ></text>
</g>
<g >
<title>TAgencyRating::ScoreUrl (480 samples, 2.51%)</title><rect x="160.2" y="1973" width="29.6" height="15.0" fill="rgb(250,124,6)" rx="2" ry="2" />
<text  x="163.22" y="1983.5" >TA..</text>
</g>
<g >
<title>[unknown] (408 samples, 2.13%)</title><rect x="56.1" y="1253" width="25.2" height="15.0" fill="rgb(244,166,49)" rx="2" ry="2" />
<text  x="59.13" y="1263.5" >[..</text>
</g>
<g >
<title>[libc-2.27.so] (7 samples, 0.04%)</title><rect x="586.3" y="1877" width="0.5" height="15.0" fill="rgb(242,76,38)" rx="2" ry="2" />
<text  x="589.34" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (342 samples, 1.79%)</title><rect x="56.1" y="437" width="21.1" height="15.0" fill="rgb(232,217,54)" rx="2" ry="2" />
<text  x="59.13" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="309" width="0.3" height="15.0" fill="rgb(227,31,19)" rx="2" ry="2" />
<text  x="1190.04" y="319.5" ></text>
</g>
<g >
<title>unmap_region (5 samples, 0.03%)</title><rect x="763.9" y="1941" width="0.4" height="15.0" fill="rgb(214,192,46)" rx="2" ry="2" />
<text  x="766.94" y="1951.5" ></text>
</g>
<g >
<title>wp_page_copy (65 samples, 0.34%)</title><rect x="941.9" y="1941" width="4.0" height="15.0" fill="rgb(244,184,0)" rx="2" ry="2" />
<text  x="944.91" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (349 samples, 1.82%)</title><rect x="56.1" y="709" width="21.5" height="15.0" fill="rgb(250,119,30)" rx="2" ry="2" />
<text  x="59.13" y="719.5" >[..</text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_state (2 samples, 0.01%)</title><rect x="219.1" y="1765" width="0.1" height="15.0" fill="rgb(240,84,41)" rx="2" ry="2" />
<text  x="222.05" y="1775.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.03%)</title><rect x="591.2" y="1877" width="0.3" height="15.0" fill="rgb(209,73,18)" rx="2" ry="2" />
<text  x="594.21" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (351 samples, 1.83%)</title><rect x="56.1" y="789" width="21.7" height="15.0" fill="rgb(221,30,35)" rx="2" ry="2" />
<text  x="59.13" y="799.5" >[..</text>
</g>
<g >
<title>do_syscall_64 (15 samples, 0.08%)</title><rect x="1101.9" y="2021" width="0.9" height="15.0" fill="rgb(253,36,41)" rx="2" ry="2" />
<text  x="1104.88" y="2031.5" ></text>
</g>
<g >
<title>handle_mm_fault (8 samples, 0.04%)</title><rect x="761.0" y="1973" width="0.5" height="15.0" fill="rgb(212,43,2)" rx="2" ry="2" />
<text  x="763.98" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (416 samples, 2.17%)</title><rect x="133.1" y="1845" width="25.6" height="15.0" fill="rgb(224,49,45)" rx="2" ry="2" />
<text  x="136.09" y="1855.5" >s..</text>
</g>
<g >
<title>[unknown] (338 samples, 1.77%)</title><rect x="56.1" y="213" width="20.9" height="15.0" fill="rgb(212,7,21)" rx="2" ry="2" />
<text  x="59.13" y="223.5" ></text>
</g>
<g >
<title>call_rwsem_wake (2 samples, 0.01%)</title><rect x="946.0" y="1973" width="0.2" height="15.0" fill="rgb(233,198,46)" rx="2" ry="2" />
<text  x="949.04" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1829" width="0.1" height="15.0" fill="rgb(224,67,52)" rx="2" ry="2" />
<text  x="192.51" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1187.7" y="2053" width="0.1" height="15.0" fill="rgb(214,88,11)" rx="2" ry="2" />
<text  x="1190.66" y="2063.5" ></text>
</g>
<g >
<title>__x64_sys_read (3 samples, 0.02%)</title><rect x="1111.1" y="1989" width="0.2" height="15.0" fill="rgb(239,171,53)" rx="2" ry="2" />
<text  x="1114.13" y="1999.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (4 samples, 0.02%)</title><rect x="764.6" y="2005" width="0.3" height="15.0" fill="rgb(225,136,8)" rx="2" ry="2" />
<text  x="767.62" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1557" width="0.1" height="15.0" fill="rgb(238,51,27)" rx="2" ry="2" />
<text  x="162.85" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (354 samples, 1.85%)</title><rect x="56.1" y="885" width="21.9" height="15.0" fill="rgb(218,138,42)" rx="2" ry="2" />
<text  x="59.13" y="895.5" >[..</text>
</g>
<g >
<title>[unknown] (493 samples, 2.58%)</title><rect x="56.1" y="1525" width="30.4" height="15.0" fill="rgb(234,165,21)" rx="2" ry="2" />
<text  x="59.07" y="1535.5" >[u..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (17 samples, 0.09%)</title><rect x="588.7" y="1877" width="1.1" height="15.0" fill="rgb(225,133,28)" rx="2" ry="2" />
<text  x="591.75" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="1781" width="0.4" height="15.0" fill="rgb(210,158,49)" rx="2" ry="2" />
<text  x="1189.92" y="1791.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="184.1" y="1669" width="0.2" height="15.0" fill="rgb(229,146,15)" rx="2" ry="2" />
<text  x="187.15" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1077" width="0.3" height="15.0" fill="rgb(233,201,49)" rx="2" ry="2" />
<text  x="1190.41" y="1087.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (2 samples, 0.01%)</title><rect x="96.1" y="1893" width="0.2" height="15.0" fill="rgb(231,112,50)" rx="2" ry="2" />
<text  x="99.15" y="1903.5" ></text>
</g>
<g >
<title>GetHost (482 samples, 2.52%)</title><rect x="190.8" y="1973" width="29.7" height="15.0" fill="rgb(222,36,15)" rx="2" ry="2" />
<text  x="193.81" y="1983.5" >Ge..</text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="164.9" y="1541" width="0.3" height="15.0" fill="rgb(222,157,11)" rx="2" ry="2" />
<text  x="167.91" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (512 samples, 2.68%)</title><rect x="56.1" y="1621" width="31.5" height="15.0" fill="rgb(251,117,15)" rx="2" ry="2" />
<text  x="59.07" y="1631.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1525" width="0.2" height="15.0" fill="rgb(250,118,13)" rx="2" ry="2" />
<text  x="223.28" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="220.0" y="1237" width="0.2" height="15.0" fill="rgb(213,34,2)" rx="2" ry="2" />
<text  x="223.04" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="293" width="0.3" height="15.0" fill="rgb(228,223,20)" rx="2" ry="2" />
<text  x="1190.04" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1797" width="0.4" height="15.0" fill="rgb(217,34,3)" rx="2" ry="2" />
<text  x="1190.35" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1765" width="0.4" height="15.0" fill="rgb(232,36,38)" rx="2" ry="2" />
<text  x="1190.35" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1333" width="0.1" height="15.0" fill="rgb(234,146,18)" rx="2" ry="2" />
<text  x="162.85" y="1343.5" ></text>
</g>
<g >
<title>unmap_region (5 samples, 0.03%)</title><rect x="1102.0" y="1909" width="0.3" height="15.0" fill="rgb(240,141,15)" rx="2" ry="2" />
<text  x="1105.00" y="1919.5" ></text>
</g>
<g >
<title>smp_call_function_single (4 samples, 0.02%)</title><rect x="519.7" y="1829" width="0.3" height="15.0" fill="rgb(237,158,32)" rx="2" ry="2" />
<text  x="522.74" y="1839.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="84.4" y="1397" width="0.2" height="15.0" fill="rgb(246,222,21)" rx="2" ry="2" />
<text  x="87.37" y="1407.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.05%)</title><rect x="170.3" y="1573" width="0.5" height="15.0" fill="rgb(223,152,37)" rx="2" ry="2" />
<text  x="173.27" y="1583.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::computeSubwords (30 samples, 0.16%)</title><rect x="327.8" y="1941" width="1.8" height="15.0" fill="rgb(214,142,39)" rx="2" ry="2" />
<text  x="330.77" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="516.5" y="1893" width="0.3" height="15.0" fill="rgb(225,2,49)" rx="2" ry="2" />
<text  x="519.53" y="1903.5" ></text>
</g>
<g >
<title>do_page_fault (2 samples, 0.01%)</title><rect x="515.0" y="1925" width="0.1" height="15.0" fill="rgb(250,41,31)" rx="2" ry="2" />
<text  x="517.99" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (3 samples, 0.02%)</title><rect x="494.9" y="1941" width="0.2" height="15.0" fill="rgb(222,7,54)" rx="2" ry="2" />
<text  x="497.89" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (81 samples, 0.42%)</title><rect x="144.2" y="1717" width="5.0" height="15.0" fill="rgb(234,97,47)" rx="2" ry="2" />
<text  x="147.25" y="1727.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="80.5" y="1221" width="0.2" height="15.0" fill="rgb(211,136,45)" rx="2" ry="2" />
<text  x="83.55" y="1231.5" ></text>
</g>
<g >
<title>TFastTextEmbedder::GetSentenceEmbedding (1,905 samples, 9.96%)</title><rect x="377.7" y="1973" width="117.5" height="15.0" fill="rgb(224,18,52)" rx="2" ry="2" />
<text  x="380.72" y="1983.5" >TFastTextEmbed..</text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="187.9" y="1685" width="0.3" height="15.0" fill="rgb(218,41,18)" rx="2" ry="2" />
<text  x="190.91" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="773" width="0.3" height="15.0" fill="rgb(220,83,31)" rx="2" ry="2" />
<text  x="1190.41" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (94 samples, 0.49%)</title><rect x="138.4" y="1669" width="5.8" height="15.0" fill="rgb(228,133,28)" rx="2" ry="2" />
<text  x="141.39" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1125" width="0.3" height="15.0" fill="rgb(205,30,51)" rx="2" ry="2" />
<text  x="1189.98" y="1135.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::at (5 samples, 0.03%)</title><rect x="123.0" y="1957" width="0.3" height="15.0" fill="rgb(221,100,12)" rx="2" ry="2" />
<text  x="126.04" y="1967.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.01%)</title><rect x="761.3" y="1925" width="0.1" height="15.0" fill="rgb(239,219,11)" rx="2" ry="2" />
<text  x="764.29" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="901" width="0.3" height="15.0" fill="rgb(236,155,13)" rx="2" ry="2" />
<text  x="1190.41" y="911.5" ></text>
</g>
<g >
<title>[unknown] (506 samples, 2.64%)</title><rect x="56.1" y="1573" width="31.2" height="15.0" fill="rgb(228,212,25)" rx="2" ry="2" />
<text  x="59.07" y="1583.5" >[u..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (4 samples, 0.02%)</title><rect x="315.7" y="1941" width="0.2" height="15.0" fill="rgb(213,89,48)" rx="2" ry="2" />
<text  x="318.68" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (475 samples, 2.48%)</title><rect x="56.1" y="1461" width="29.3" height="15.0" fill="rgb(206,62,15)" rx="2" ry="2" />
<text  x="59.07" y="1471.5" >[u..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="88.1" y="1621" width="0.1" height="15.0" fill="rgb(231,11,0)" rx="2" ry="2" />
<text  x="91.07" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1797" width="0.1" height="15.0" fill="rgb(213,206,13)" rx="2" ry="2" />
<text  x="58.88" y="1807.5" ></text>
</g>
<g >
<title>unmap_page_range (4 samples, 0.02%)</title><rect x="764.0" y="1893" width="0.3" height="15.0" fill="rgb(208,139,30)" rx="2" ry="2" />
<text  x="767.00" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace@plt (2 samples, 0.01%)</title><rect x="752.3" y="1941" width="0.2" height="15.0" fill="rgb(220,25,18)" rx="2" ry="2" />
<text  x="755.35" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="220.0" y="1749" width="0.5" height="15.0" fill="rgb(217,140,26)" rx="2" ry="2" />
<text  x="222.98" y="1759.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="95.6" y="2021" width="0.1" height="15.0" fill="rgb(207,212,54)" rx="2" ry="2" />
<text  x="98.59" y="2031.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="80.2" y="1189" width="0.2" height="15.0" fill="rgb(231,227,36)" rx="2" ry="2" />
<text  x="83.24" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="220.4" y="1077" width="0.1" height="15.0" fill="rgb(251,44,4)" rx="2" ry="2" />
<text  x="223.41" y="1087.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (2 samples, 0.01%)</title><rect x="524.6" y="1925" width="0.1" height="15.0" fill="rgb(252,124,40)" rx="2" ry="2" />
<text  x="527.61" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1141" width="0.3" height="15.0" fill="rgb(211,20,9)" rx="2" ry="2" />
<text  x="1190.41" y="1151.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (3 samples, 0.02%)</title><rect x="198.8" y="1589" width="0.1" height="15.0" fill="rgb(254,158,11)" rx="2" ry="2" />
<text  x="201.76" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (4 samples, 0.02%)</title><rect x="189.0" y="1797" width="0.2" height="15.0" fill="rgb(210,63,34)" rx="2" ry="2" />
<text  x="191.96" y="1807.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (3,728 samples, 19.48%)</title><rect x="523.6" y="2005" width="229.9" height="15.0" fill="rgb(224,30,33)" rx="2" ry="2" />
<text  x="526.56" y="2015.5" >std::_Function_handler&lt;std::un..</text>
</g>
<g >
<title>__asan::CanPoisonMemory (8 samples, 0.04%)</title><rect x="966.6" y="2053" width="0.5" height="15.0" fill="rgb(207,120,37)" rx="2" ry="2" />
<text  x="969.58" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="837" width="0.3" height="15.0" fill="rgb(235,180,52)" rx="2" ry="2" />
<text  x="1190.41" y="847.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_equals_val&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&gt; &gt; (4 samples, 0.02%)</title><rect x="750.5" y="1893" width="0.2" height="15.0" fill="rgb(233,179,17)" rx="2" ry="2" />
<text  x="753.50" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="165" width="0.3" height="15.0" fill="rgb(243,132,8)" rx="2" ry="2" />
<text  x="1190.04" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="629" width="0.3" height="15.0" fill="rgb(222,144,50)" rx="2" ry="2" />
<text  x="1190.41" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1669" width="0.4" height="15.0" fill="rgb(240,186,8)" rx="2" ry="2" />
<text  x="1189.92" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (79 samples, 0.41%)</title><rect x="149.4" y="1749" width="4.8" height="15.0" fill="rgb(236,34,53)" rx="2" ry="2" />
<text  x="152.37" y="1759.5" ></text>
</g>
<g >
<title>unmap_region (2 samples, 0.01%)</title><rect x="763.7" y="1893" width="0.1" height="15.0" fill="rgb(222,130,31)" rx="2" ry="2" />
<text  x="766.70" y="1903.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::next_byte_in_range (26 samples, 0.14%)</title><rect x="130.2" y="1925" width="1.6" height="15.0" fill="rgb(211,3,19)" rx="2" ry="2" />
<text  x="133.19" y="1935.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="199.4" y="1589" width="0.1" height="15.0" fill="rgb(253,86,31)" rx="2" ry="2" />
<text  x="202.38" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (568 samples, 2.97%)</title><rect x="56.1" y="1861" width="35.0" height="15.0" fill="rgb(241,94,18)" rx="2" ry="2" />
<text  x="59.07" y="1871.5" >[u..</text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (90 samples, 0.47%)</title><rect x="108.2" y="2037" width="5.5" height="15.0" fill="rgb(221,9,52)" rx="2" ry="2" />
<text  x="111.17" y="2047.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="204.8" y="1605" width="0.1" height="15.0" fill="rgb(212,11,30)" rx="2" ry="2" />
<text  x="207.81" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="693" width="0.3" height="15.0" fill="rgb(225,134,24)" rx="2" ry="2" />
<text  x="1189.98" y="703.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (3 samples, 0.02%)</title><rect x="692.8" y="1733" width="0.2" height="15.0" fill="rgb(230,35,53)" rx="2" ry="2" />
<text  x="695.84" y="1743.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="145.5" y="1621" width="0.2" height="15.0" fill="rgb(222,156,27)" rx="2" ry="2" />
<text  x="148.48" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (86 samples, 0.45%)</title><rect x="172.2" y="1669" width="5.3" height="15.0" fill="rgb(232,203,42)" rx="2" ry="2" />
<text  x="175.25" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (70 samples, 0.37%)</title><rect x="154.4" y="1813" width="4.3" height="15.0" fill="rgb(242,9,45)" rx="2" ry="2" />
<text  x="157.36" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="901" width="0.1" height="15.0" fill="rgb(247,158,38)" rx="2" ry="2" />
<text  x="1190.72" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="981" width="0.3" height="15.0" fill="rgb(208,45,23)" rx="2" ry="2" />
<text  x="1189.98" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (576 samples, 3.01%)</title><rect x="1151.3" y="2053" width="35.5" height="15.0" fill="rgb(216,207,54)" rx="2" ry="2" />
<text  x="1154.27" y="2063.5" >std..</text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (3 samples, 0.02%)</title><rect x="136.9" y="1557" width="0.2" height="15.0" fill="rgb(216,161,31)" rx="2" ry="2" />
<text  x="139.91" y="1567.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (21 samples, 0.11%)</title><rect x="337.0" y="1989" width="1.3" height="15.0" fill="rgb(246,122,28)" rx="2" ry="2" />
<text  x="340.02" y="1999.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (2 samples, 0.01%)</title><rect x="157.6" y="1669" width="0.2" height="15.0" fill="rgb(233,31,45)" rx="2" ry="2" />
<text  x="160.63" y="1679.5" ></text>
</g>
<g >
<title>free_unref_page_list (6 samples, 0.03%)</title><rect x="520.2" y="1861" width="0.3" height="15.0" fill="rgb(238,50,26)" rx="2" ry="2" />
<text  x="523.17" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="741" width="0.1" height="15.0" fill="rgb(228,214,12)" rx="2" ry="2" />
<text  x="162.85" y="751.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="92.3" y="1941" width="0.3" height="15.0" fill="rgb(232,67,20)" rx="2" ry="2" />
<text  x="95.33" y="1951.5" ></text>
</g>
<g >
<title>GetHost (479 samples, 2.50%)</title><rect x="160.2" y="1957" width="29.6" height="15.0" fill="rgb(243,117,8)" rx="2" ry="2" />
<text  x="163.22" y="1967.5" >Ge..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="765.9" y="2021" width="0.1" height="15.0" fill="rgb(245,73,51)" rx="2" ry="2" />
<text  x="768.85" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1365" width="0.2" height="15.0" fill="rgb(237,147,17)" rx="2" ry="2" />
<text  x="223.04" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="389" width="0.3" height="15.0" fill="rgb(209,207,8)" rx="2" ry="2" />
<text  x="1190.04" y="399.5" ></text>
</g>
<g >
<title>[unknown] (345 samples, 1.80%)</title><rect x="56.1" y="485" width="21.3" height="15.0" fill="rgb(214,4,28)" rx="2" ry="2" />
<text  x="59.13" y="495.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1573" width="0.2" height="15.0" fill="rgb(247,83,18)" rx="2" ry="2" />
<text  x="223.28" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="837" width="0.3" height="15.0" fill="rgb(242,110,48)" rx="2" ry="2" />
<text  x="1189.98" y="847.5" ></text>
</g>
<g >
<title>[unknown] (527 samples, 2.75%)</title><rect x="56.1" y="1669" width="32.5" height="15.0" fill="rgb(209,26,16)" rx="2" ry="2" />
<text  x="59.07" y="1679.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="821" width="0.1" height="15.0" fill="rgb(224,32,17)" rx="2" ry="2" />
<text  x="1190.72" y="831.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 0.01%)</title><rect x="1102.0" y="1861" width="0.1" height="15.0" fill="rgb(235,180,16)" rx="2" ry="2" />
<text  x="1105.00" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (76 samples, 0.40%)</title><rect x="196.5" y="1685" width="4.7" height="15.0" fill="rgb(212,156,34)" rx="2" ry="2" />
<text  x="199.48" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (89 samples, 0.47%)</title><rect x="166.7" y="1717" width="5.5" height="15.0" fill="rgb(210,150,36)" rx="2" ry="2" />
<text  x="169.70" y="1727.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (42 samples, 0.22%)</title><rect x="135.2" y="1573" width="2.6" height="15.0" fill="rgb(210,15,18)" rx="2" ry="2" />
<text  x="138.25" y="1583.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.02%)</title><rect x="96.1" y="1989" width="0.2" height="15.0" fill="rgb(250,99,9)" rx="2" ry="2" />
<text  x="99.09" y="1999.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (50 samples, 0.26%)</title><rect x="145.7" y="1621" width="3.1" height="15.0" fill="rgb(253,48,18)" rx="2" ry="2" />
<text  x="148.73" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1893" width="0.1" height="15.0" fill="rgb(216,67,47)" rx="2" ry="2" />
<text  x="1190.72" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1221" width="0.1" height="15.0" fill="rgb(231,123,18)" rx="2" ry="2" />
<text  x="162.85" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1653" width="0.1" height="15.0" fill="rgb(212,4,10)" rx="2" ry="2" />
<text  x="1190.72" y="1663.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (14 samples, 0.07%)</title><rect x="1158.1" y="2037" width="0.9" height="15.0" fill="rgb(237,26,13)" rx="2" ry="2" />
<text  x="1161.12" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (419 samples, 2.19%)</title><rect x="133.1" y="1877" width="25.8" height="15.0" fill="rgb(209,210,43)" rx="2" ry="2" />
<text  x="136.09" y="1887.5" >s..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="182.4" y="1781" width="0.2" height="15.0" fill="rgb(233,149,43)" rx="2" ry="2" />
<text  x="185.42" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="485" width="0.1" height="15.0" fill="rgb(224,1,30)" rx="2" ry="2" />
<text  x="1190.72" y="495.5" ></text>
</g>
<g >
<title>TDocument::TDocument (9 samples, 0.05%)</title><rect x="338.8" y="2005" width="0.6" height="15.0" fill="rgb(234,15,20)" rx="2" ry="2" />
<text  x="341.81" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1413" width="0.3" height="15.0" fill="rgb(226,147,38)" rx="2" ry="2" />
<text  x="1189.98" y="1423.5" ></text>
</g>
<g >
<title>Preprocess (3,020 samples, 15.78%)</title><rect x="566.2" y="1957" width="186.3" height="15.0" fill="rgb(206,46,11)" rx="2" ry="2" />
<text  x="569.24" y="1967.5" >Preprocess</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (87 samples, 0.45%)</title><rect x="166.7" y="1637" width="5.4" height="15.0" fill="rgb(209,23,53)" rx="2" ry="2" />
<text  x="169.70" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (83 samples, 0.43%)</title><rect x="161.4" y="1653" width="5.1" height="15.0" fill="rgb(208,152,53)" rx="2" ry="2" />
<text  x="164.39" y="1663.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::create&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1957" width="0.3" height="15.0" fill="rgb(225,42,11)" rx="2" ry="2" />
<text  x="519.53" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="1829" width="0.4" height="15.0" fill="rgb(241,77,8)" rx="2" ry="2" />
<text  x="1189.92" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (346 samples, 1.81%)</title><rect x="56.1" y="533" width="21.4" height="15.0" fill="rgb(213,7,29)" rx="2" ry="2" />
<text  x="59.13" y="543.5" >[..</text>
</g>
<g >
<title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ifstream (27 samples, 0.14%)</title><rect x="875.1" y="2037" width="1.6" height="15.0" fill="rgb(218,112,13)" rx="2" ry="2" />
<text  x="878.07" y="2047.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.01%)</title><rect x="1102.0" y="1813" width="0.1" height="15.0" fill="rgb(215,88,7)" rx="2" ry="2" />
<text  x="1105.00" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1045" width="0.3" height="15.0" fill="rgb(249,159,54)" rx="2" ry="2" />
<text  x="1190.41" y="1055.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (60 samples, 0.31%)</title><rect x="807.9" y="2037" width="3.7" height="15.0" fill="rgb(242,213,50)" rx="2" ry="2" />
<text  x="810.91" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="581" width="0.1" height="15.0" fill="rgb(239,196,30)" rx="2" ry="2" />
<text  x="162.85" y="591.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="602.1" y="1861" width="0.1" height="15.0" fill="rgb(236,148,44)" rx="2" ry="2" />
<text  x="605.07" y="1871.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (59 samples, 0.31%)</title><rect x="804.1" y="2037" width="3.6" height="15.0" fill="rgb(209,148,33)" rx="2" ry="2" />
<text  x="807.09" y="2047.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.01%)</title><rect x="197.7" y="1605" width="0.1" height="15.0" fill="rgb(232,205,36)" rx="2" ry="2" />
<text  x="200.65" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (83 samples, 0.43%)</title><rect x="138.8" y="1621" width="5.1" height="15.0" fill="rgb(248,55,20)" rx="2" ry="2" />
<text  x="141.76" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (77 samples, 0.40%)</title><rect x="183.1" y="1685" width="4.7" height="15.0" fill="rgb(229,132,12)" rx="2" ry="2" />
<text  x="186.10" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (2 samples, 0.01%)</title><rect x="1189.6" y="2037" width="0.2" height="15.0" fill="rgb(243,198,12)" rx="2" ry="2" />
<text  x="1192.63" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (106 samples, 0.55%)</title><rect x="206.9" y="1765" width="6.5" height="15.0" fill="rgb(252,134,30)" rx="2" ry="2" />
<text  x="209.90" y="1775.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.01%)</title><rect x="54.6" y="1877" width="0.1" height="15.0" fill="rgb(241,226,3)" rx="2" ry="2" />
<text  x="57.59" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (44 samples, 0.23%)</title><rect x="1161.1" y="2037" width="2.8" height="15.0" fill="rgb(233,70,31)" rx="2" ry="2" />
<text  x="1164.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="917" width="0.3" height="15.0" fill="rgb(210,187,2)" rx="2" ry="2" />
<text  x="1190.41" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1269" width="0.1" height="15.0" fill="rgb(242,78,44)" rx="2" ry="2" />
<text  x="1190.72" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1685" width="0.4" height="15.0" fill="rgb(209,75,36)" rx="2" ry="2" />
<text  x="1190.35" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (733 samples, 3.83%)</title><rect x="56.0" y="2037" width="45.2" height="15.0" fill="rgb(221,175,35)" rx="2" ry="2" />
<text  x="59.00" y="2047.5" >[unk..</text>
</g>
<g >
<title>syscall (2 samples, 0.01%)</title><rect x="132.4" y="1973" width="0.1" height="15.0" fill="rgb(212,229,54)" rx="2" ry="2" />
<text  x="135.41" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="853" width="0.1" height="15.0" fill="rgb(229,86,1)" rx="2" ry="2" />
<text  x="1190.72" y="863.5" ></text>
</g>
<g >
<title>std::vector&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::allocator&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;::_M_realloc_insert&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; const&amp;&gt; (4 samples, 0.02%)</title><rect x="516.5" y="1989" width="0.3" height="15.0" fill="rgb(212,28,36)" rx="2" ry="2" />
<text  x="519.53" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1621" width="0.2" height="15.0" fill="rgb(210,168,45)" rx="2" ry="2" />
<text  x="223.04" y="1631.5" ></text>
</g>
<g >
<title>page_fault (6 samples, 0.03%)</title><rect x="1021.9" y="2037" width="0.4" height="15.0" fill="rgb(253,156,19)" rx="2" ry="2" />
<text  x="1024.90" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="341" width="0.3" height="15.0" fill="rgb(233,59,17)" rx="2" ry="2" />
<text  x="1190.04" y="351.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (9 samples, 0.05%)</title><rect x="498.7" y="1829" width="0.5" height="15.0" fill="rgb(222,180,51)" rx="2" ry="2" />
<text  x="501.65" y="1839.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append@plt (2 samples, 0.01%)</title><rect x="1121.1" y="2053" width="0.1" height="15.0" fill="rgb(207,140,47)" rx="2" ry="2" />
<text  x="1124.06" y="2063.5" ></text>
</g>
<g >
<title>onmt::unicode::cp_to_utf8[abi:cxx11] (3 samples, 0.02%)</title><rect x="593.2" y="1877" width="0.2" height="15.0" fill="rgb(232,166,17)" rx="2" ry="2" />
<text  x="596.19" y="1887.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="162.8" y="1557" width="0.1" height="15.0" fill="rgb(223,184,48)" rx="2" ry="2" />
<text  x="165.81" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (65 samples, 0.34%)</title><rect x="149.8" y="1669" width="4.0" height="15.0" fill="rgb(230,79,23)" rx="2" ry="2" />
<text  x="152.80" y="1679.5" ></text>
</g>
<g >
<title>find_vma (2 samples, 0.01%)</title><rect x="23.8" y="1989" width="0.1" height="15.0" fill="rgb(249,205,39)" rx="2" ry="2" />
<text  x="26.75" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1749" width="0.1" height="15.0" fill="rgb(228,73,2)" rx="2" ry="2" />
<text  x="58.88" y="1759.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (257 samples, 1.34%)</title><rect x="946.2" y="2053" width="15.8" height="15.0" fill="rgb(245,27,21)" rx="2" ry="2" />
<text  x="949.17" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="773" width="0.1" height="15.0" fill="rgb(218,89,42)" rx="2" ry="2" />
<text  x="162.85" y="783.5" ></text>
</g>
<g >
<title>__do_page_fault (12 samples, 0.06%)</title><rect x="760.8" y="1989" width="0.7" height="15.0" fill="rgb(219,5,9)" rx="2" ry="2" />
<text  x="763.80" y="1999.5" ></text>
</g>
<g >
<title>try_charge (10 samples, 0.05%)</title><rect x="27.5" y="1925" width="0.6" height="15.0" fill="rgb(224,156,51)" rx="2" ry="2" />
<text  x="30.51" y="1935.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.03%)</title><rect x="1126.0" y="2037" width="0.3" height="15.0" fill="rgb(242,64,45)" rx="2" ry="2" />
<text  x="1128.99" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="709" width="0.1" height="15.0" fill="rgb(227,44,31)" rx="2" ry="2" />
<text  x="162.85" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="629" width="0.1" height="15.0" fill="rgb(241,221,51)" rx="2" ry="2" />
<text  x="1190.72" y="639.5" ></text>
</g>
<g >
<title>all (19,135 samples, 100%)</title><rect x="10.0" y="2085" width="1180.0" height="15.0" fill="rgb(254,209,6)" rx="2" ry="2" />
<text  x="13.00" y="2095.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1301" width="0.2" height="15.0" fill="rgb(205,92,16)" rx="2" ry="2" />
<text  x="223.04" y="1311.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="764.4" y="2005" width="0.2" height="15.0" fill="rgb(224,1,14)" rx="2" ry="2" />
<text  x="767.44" y="2015.5" ></text>
</g>
<g >
<title>unmap_page_range (3 samples, 0.02%)</title><rect x="520.5" y="1941" width="0.2" height="15.0" fill="rgb(223,37,4)" rx="2" ry="2" />
<text  x="523.54" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (3 samples, 0.02%)</title><rect x="490.3" y="1909" width="0.1" height="15.0" fill="rgb(231,145,25)" rx="2" ry="2" />
<text  x="493.26" y="1919.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="199.1" y="1589" width="0.1" height="15.0" fill="rgb(243,15,44)" rx="2" ry="2" />
<text  x="202.07" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1461" width="0.1" height="15.0" fill="rgb(246,10,22)" rx="2" ry="2" />
<text  x="1190.72" y="1471.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="157.3" y="1669" width="0.1" height="15.0" fill="rgb(242,106,4)" rx="2" ry="2" />
<text  x="160.26" y="1679.5" ></text>
</g>
<g >
<title>__asan_memcpy (10 samples, 0.05%)</title><rect x="572.7" y="1877" width="0.6" height="15.0" fill="rgb(219,58,6)" rx="2" ry="2" />
<text  x="575.65" y="1887.5" ></text>
</g>
<g >
<title>fasttext::FastText::getWordVector (5 samples, 0.03%)</title><rect x="766.0" y="2037" width="0.3" height="15.0" fill="rgb(228,72,38)" rx="2" ry="2" />
<text  x="768.98" y="2047.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::Recycle (4 samples, 0.02%)</title><rect x="754.8" y="2037" width="0.2" height="15.0" fill="rgb(212,43,19)" rx="2" ry="2" />
<text  x="757.75" y="2047.5" ></text>
</g>
<g >
<title>unmap_single_vma (7 samples, 0.04%)</title><rect x="1103.0" y="1925" width="0.4" height="15.0" fill="rgb(214,65,30)" rx="2" ry="2" />
<text  x="1105.99" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (64 samples, 0.33%)</title><rect x="741.4" y="1877" width="4.0" height="15.0" fill="rgb(220,65,52)" rx="2" ry="2" />
<text  x="744.43" y="1887.5" ></text>
</g>
<g >
<title>fasttext::Vector::norm (25 samples, 0.13%)</title><rect x="512.3" y="1973" width="1.6" height="15.0" fill="rgb(213,123,35)" rx="2" ry="2" />
<text  x="515.34" y="1983.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="185.6" y="1653" width="0.1" height="15.0" fill="rgb(235,161,27)" rx="2" ry="2" />
<text  x="188.57" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1141" width="0.3" height="15.0" fill="rgb(230,223,1)" rx="2" ry="2" />
<text  x="1189.98" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1187.5" y="37" width="0.2" height="15.0" fill="rgb(240,117,29)" rx="2" ry="2" />
<text  x="1190.47" y="47.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (11 samples, 0.06%)</title><rect x="486.6" y="1925" width="0.7" height="15.0" fill="rgb(208,202,28)" rx="2" ry="2" />
<text  x="489.63" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="89.2" y="1717" width="0.2" height="15.0" fill="rgb(249,83,39)" rx="2" ry="2" />
<text  x="92.18" y="1727.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4 samples, 0.02%)</title><rect x="727.3" y="1813" width="0.2" height="15.0" fill="rgb(240,203,46)" rx="2" ry="2" />
<text  x="730.25" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (357 samples, 1.87%)</title><rect x="56.1" y="1029" width="22.0" height="15.0" fill="rgb(253,19,18)" rx="2" ry="2" />
<text  x="59.13" y="1039.5" >[..</text>
</g>
<g >
<title>[unknown] (340 samples, 1.78%)</title><rect x="56.1" y="341" width="21.0" height="15.0" fill="rgb(243,177,9)" rx="2" ry="2" />
<text  x="59.13" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1187.3" y="2021" width="0.4" height="15.0" fill="rgb(234,66,30)" rx="2" ry="2" />
<text  x="1190.29" y="2031.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (2 samples, 0.01%)</title><rect x="135.1" y="1573" width="0.1" height="15.0" fill="rgb(220,222,36)" rx="2" ry="2" />
<text  x="138.12" y="1583.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="139.8" y="1605" width="0.1" height="15.0" fill="rgb(220,73,44)" rx="2" ry="2" />
<text  x="142.81" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1187.5" y="165" width="0.2" height="15.0" fill="rgb(235,123,1)" rx="2" ry="2" />
<text  x="1190.47" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1573" width="0.1" height="15.0" fill="rgb(214,188,24)" rx="2" ry="2" />
<text  x="162.85" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="821" width="0.3" height="15.0" fill="rgb(212,178,24)" rx="2" ry="2" />
<text  x="1189.98" y="831.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (15 samples, 0.08%)</title><rect x="1101.9" y="2037" width="0.9" height="15.0" fill="rgb(211,86,15)" rx="2" ry="2" />
<text  x="1104.88" y="2047.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (4 samples, 0.02%)</title><rect x="95.2" y="2021" width="0.3" height="15.0" fill="rgb(241,97,10)" rx="2" ry="2" />
<text  x="98.22" y="2031.5" ></text>
</g>
<g >
<title>__asan_memmove (2 samples, 0.01%)</title><rect x="324.1" y="1941" width="0.2" height="15.0" fill="rgb(254,14,40)" rx="2" ry="2" />
<text  x="327.13" y="1951.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (2 samples, 0.01%)</title><rect x="96.0" y="2021" width="0.1" height="15.0" fill="rgb(254,215,42)" rx="2" ry="2" />
<text  x="98.96" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="645" width="0.3" height="15.0" fill="rgb(254,210,43)" rx="2" ry="2" />
<text  x="1190.04" y="655.5" ></text>
</g>
<g >
<title>do_page_fault (32 samples, 0.17%)</title><rect x="691.3" y="1829" width="2.0" height="15.0" fill="rgb(230,103,6)" rx="2" ry="2" />
<text  x="694.30" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (446 samples, 2.33%)</title><rect x="56.1" y="1365" width="27.5" height="15.0" fill="rgb(205,68,21)" rx="2" ry="2" />
<text  x="59.07" y="1375.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="189.5" y="1573" width="0.1" height="15.0" fill="rgb(218,20,23)" rx="2" ry="2" />
<text  x="192.51" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="220.3" y="1605" width="0.2" height="15.0" fill="rgb(212,186,27)" rx="2" ry="2" />
<text  x="223.28" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="885" width="0.1" height="15.0" fill="rgb(237,170,16)" rx="2" ry="2" />
<text  x="1190.72" y="895.5" ></text>
</g>
<g >
<title>[unknown] (863 samples, 4.51%)</title><rect x="820.9" y="2021" width="53.2" height="15.0" fill="rgb(244,84,29)" rx="2" ry="2" />
<text  x="823.92" y="2031.5" >[unkn..</text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (60 samples, 0.31%)</title><rect x="134.2" y="1589" width="3.7" height="15.0" fill="rgb(241,173,33)" rx="2" ry="2" />
<text  x="137.20" y="1599.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (2 samples, 0.01%)</title><rect x="807.8" y="2037" width="0.1" height="15.0" fill="rgb(239,200,41)" rx="2" ry="2" />
<text  x="810.79" y="2047.5" ></text>
</g>
<g >
<title>__pthread_getspecific (3 samples, 0.02%)</title><rect x="487.4" y="1925" width="0.2" height="15.0" fill="rgb(251,220,51)" rx="2" ry="2" />
<text  x="490.37" y="1935.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.01%)</title><rect x="946.0" y="1925" width="0.2" height="15.0" fill="rgb(246,190,37)" rx="2" ry="2" />
<text  x="949.04" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (264 samples, 1.38%)</title><rect x="133.1" y="1781" width="16.3" height="15.0" fill="rgb(206,200,50)" rx="2" ry="2" />
<text  x="136.09" y="1791.5" ></text>
</g>
<g >
<title>__dynamic_cast (8 samples, 0.04%)</title><rect x="136.4" y="1557" width="0.4" height="15.0" fill="rgb(233,64,7)" rx="2" ry="2" />
<text  x="139.36" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="309" width="0.3" height="15.0" fill="rgb(232,162,45)" rx="2" ry="2" />
<text  x="1190.41" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (445 samples, 2.33%)</title><rect x="191.2" y="1845" width="27.5" height="15.0" fill="rgb(210,116,36)" rx="2" ry="2" />
<text  x="194.24" y="1855.5" >s..</text>
</g>
<g >
<title>generic_exec_single (2 samples, 0.01%)</title><rect x="519.9" y="1813" width="0.1" height="15.0" fill="rgb(242,166,40)" rx="2" ry="2" />
<text  x="522.86" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="220.2" y="1717" width="0.3" height="15.0" fill="rgb(217,20,49)" rx="2" ry="2" />
<text  x="223.22" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1269" width="0.1" height="15.0" fill="rgb(238,165,53)" rx="2" ry="2" />
<text  x="162.85" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 0.05%)</title><rect x="819.6" y="1989" width="0.5" height="15.0" fill="rgb(227,1,13)" rx="2" ry="2" />
<text  x="822.57" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (4 samples, 0.02%)</title><rect x="159.0" y="1813" width="0.3" height="15.0" fill="rgb(234,35,32)" rx="2" ry="2" />
<text  x="162.05" y="1823.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="573.3" y="1845" width="0.2" height="15.0" fill="rgb(219,156,22)" rx="2" ry="2" />
<text  x="576.33" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (99 samples, 0.52%)</title><rect x="160.6" y="1717" width="6.1" height="15.0" fill="rgb(235,144,23)" rx="2" ry="2" />
<text  x="163.59" y="1727.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="1102.0" y="1893" width="0.1" height="15.0" fill="rgb(207,212,44)" rx="2" ry="2" />
<text  x="1105.00" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1861" width="0.1" height="15.0" fill="rgb(249,58,50)" rx="2" ry="2" />
<text  x="192.51" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1797" width="0.1" height="15.0" fill="rgb(221,226,23)" rx="2" ry="2" />
<text  x="192.51" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (5 samples, 0.03%)</title><rect x="766.0" y="2005" width="0.3" height="15.0" fill="rgb(227,166,13)" rx="2" ry="2" />
<text  x="768.98" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (93 samples, 0.49%)</title><rect x="138.5" y="1637" width="5.7" height="15.0" fill="rgb(206,153,11)" rx="2" ry="2" />
<text  x="141.45" y="1647.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.03%)</title><rect x="205.4" y="1605" width="0.4" height="15.0" fill="rgb(237,152,32)" rx="2" ry="2" />
<text  x="208.42" y="1615.5" ></text>
</g>
<g >
<title>do_page_fault (12 samples, 0.06%)</title><rect x="760.8" y="2005" width="0.7" height="15.0" fill="rgb(221,162,54)" rx="2" ry="2" />
<text  x="763.80" y="2015.5" ></text>
</g>
<g >
<title>__do_munmap (5 samples, 0.03%)</title><rect x="763.5" y="1909" width="0.3" height="15.0" fill="rgb(205,123,43)" rx="2" ry="2" />
<text  x="766.51" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1301" width="0.2" height="15.0" fill="rgb(241,95,5)" rx="2" ry="2" />
<text  x="223.35" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="597" width="0.1" height="15.0" fill="rgb(207,18,18)" rx="2" ry="2" />
<text  x="162.85" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1429" width="0.1" height="15.0" fill="rgb(218,87,35)" rx="2" ry="2" />
<text  x="162.85" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1573" width="0.2" height="15.0" fill="rgb(210,123,3)" rx="2" ry="2" />
<text  x="162.97" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1187.5" y="69" width="0.2" height="15.0" fill="rgb(252,70,3)" rx="2" ry="2" />
<text  x="1190.47" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="517" width="0.3" height="15.0" fill="rgb(253,31,30)" rx="2" ry="2" />
<text  x="1190.41" y="527.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (39 samples, 0.20%)</title><rect x="1116.2" y="2037" width="2.4" height="15.0" fill="rgb(216,51,28)" rx="2" ry="2" />
<text  x="1119.18" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="593.2" y="1861" width="0.2" height="15.0" fill="rgb(241,93,7)" rx="2" ry="2" />
<text  x="596.25" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="159.8" y="1829" width="0.4" height="15.0" fill="rgb(224,162,23)" rx="2" ry="2" />
<text  x="162.79" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="501" width="0.3" height="15.0" fill="rgb(241,61,2)" rx="2" ry="2" />
<text  x="1190.41" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (75 samples, 0.39%)</title><rect x="167.1" y="1605" width="4.7" height="15.0" fill="rgb(243,66,34)" rx="2" ry="2" />
<text  x="170.13" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (583 samples, 3.05%)</title><rect x="56.1" y="1909" width="35.9" height="15.0" fill="rgb(222,218,33)" rx="2" ry="2" />
<text  x="59.07" y="1919.5" >[un..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="885" width="0.3" height="15.0" fill="rgb(238,119,44)" rx="2" ry="2" />
<text  x="1189.98" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (7 samples, 0.04%)</title><rect x="1186.9" y="1973" width="0.4" height="15.0" fill="rgb(211,107,31)" rx="2" ry="2" />
<text  x="1189.85" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1541" width="0.1" height="15.0" fill="rgb(235,31,38)" rx="2" ry="2" />
<text  x="192.51" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (445 samples, 2.33%)</title><rect x="191.2" y="1877" width="27.5" height="15.0" fill="rgb(239,101,9)" rx="2" ry="2" />
<text  x="194.24" y="1887.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="613" width="0.3" height="15.0" fill="rgb(229,28,19)" rx="2" ry="2" />
<text  x="1190.41" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1429" width="0.3" height="15.0" fill="rgb(217,226,33)" rx="2" ry="2" />
<text  x="1190.41" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1589" width="0.1" height="15.0" fill="rgb(217,174,51)" rx="2" ry="2" />
<text  x="192.51" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (2 samples, 0.01%)</title><rect x="154.1" y="1733" width="0.1" height="15.0" fill="rgb(241,129,35)" rx="2" ry="2" />
<text  x="157.12" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (77 samples, 0.40%)</title><rect x="149.4" y="1733" width="4.7" height="15.0" fill="rgb(247,197,1)" rx="2" ry="2" />
<text  x="152.37" y="1743.5" ></text>
</g>
<g >
<title>clear_page_erms (3 samples, 0.02%)</title><rect x="942.2" y="1893" width="0.2" height="15.0" fill="rgb(237,14,26)" rx="2" ry="2" />
<text  x="945.22" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (3 samples, 0.02%)</title><rect x="219.0" y="1829" width="0.2" height="15.0" fill="rgb(214,111,24)" rx="2" ry="2" />
<text  x="221.99" y="1839.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (4 samples, 0.02%)</title><rect x="565.8" y="1909" width="0.3" height="15.0" fill="rgb(223,106,29)" rx="2" ry="2" />
<text  x="568.81" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1365" width="0.3" height="15.0" fill="rgb(241,95,16)" rx="2" ry="2" />
<text  x="1189.98" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (521 samples, 2.72%)</title><rect x="56.1" y="1653" width="32.1" height="15.0" fill="rgb(208,195,28)" rx="2" ry="2" />
<text  x="59.07" y="1663.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unique_ptr&lt;fasttext::FastText, std::default_delete&lt;fasttext::FastText&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.01%)</title><rect x="753.3" y="1973" width="0.2" height="15.0" fill="rgb(254,29,24)" rx="2" ry="2" />
<text  x="756.34" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1621" width="0.4" height="15.0" fill="rgb(253,218,4)" rx="2" ry="2" />
<text  x="1189.92" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (75 samples, 0.39%)</title><rect x="133.6" y="1701" width="4.6" height="15.0" fill="rgb(214,90,37)" rx="2" ry="2" />
<text  x="136.58" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1605" width="0.4" height="15.0" fill="rgb(211,211,30)" rx="2" ry="2" />
<text  x="1190.35" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1525" width="0.2" height="15.0" fill="rgb(224,69,38)" rx="2" ry="2" />
<text  x="162.97" y="1535.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (4 samples, 0.02%)</title><rect x="213.1" y="1669" width="0.2" height="15.0" fill="rgb(221,211,34)" rx="2" ry="2" />
<text  x="216.07" y="1679.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (4 samples, 0.02%)</title><rect x="499.3" y="1845" width="0.3" height="15.0" fill="rgb(236,73,5)" rx="2" ry="2" />
<text  x="502.33" y="1855.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (3 samples, 0.02%)</title><rect x="146.0" y="1605" width="0.2" height="15.0" fill="rgb(211,45,2)" rx="2" ry="2" />
<text  x="148.98" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1093" width="0.2" height="15.0" fill="rgb(216,110,11)" rx="2" ry="2" />
<text  x="223.35" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="220.0" y="1797" width="0.5" height="15.0" fill="rgb(220,114,50)" rx="2" ry="2" />
<text  x="222.98" y="1807.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="200.0" y="1589" width="0.2" height="15.0" fill="rgb(212,104,15)" rx="2" ry="2" />
<text  x="203.00" y="1599.5" ></text>
</g>
<g >
<title>__interceptor_memcpy (36 samples, 0.19%)</title><rect x="1118.6" y="2037" width="2.2" height="15.0" fill="rgb(242,178,32)" rx="2" ry="2" />
<text  x="1121.59" y="2047.5" ></text>
</g>
<g >
<title>__do_page_fault (96 samples, 0.50%)</title><rect x="22.5" y="2005" width="5.9" height="15.0" fill="rgb(254,228,36)" rx="2" ry="2" />
<text  x="25.46" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="83.8" y="1365" width="0.1" height="15.0" fill="rgb(252,211,40)" rx="2" ry="2" />
<text  x="86.82" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="197" width="0.1" height="15.0" fill="rgb(249,134,17)" rx="2" ry="2" />
<text  x="1190.72" y="207.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="163.9" y="1541" width="0.1" height="15.0" fill="rgb(207,40,52)" rx="2" ry="2" />
<text  x="166.92" y="1551.5" ></text>
</g>
<g >
<title>__vm_munmap (5 samples, 0.03%)</title><rect x="763.9" y="1973" width="0.4" height="15.0" fill="rgb(251,135,33)" rx="2" ry="2" />
<text  x="766.94" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (77 samples, 0.40%)</title><rect x="191.7" y="1621" width="4.7" height="15.0" fill="rgb(217,61,12)" rx="2" ry="2" />
<text  x="194.67" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (2 samples, 0.01%)</title><rect x="188.3" y="1733" width="0.1" height="15.0" fill="rgb(253,167,13)" rx="2" ry="2" />
<text  x="191.28" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="933" width="0.3" height="15.0" fill="rgb(214,111,40)" rx="2" ry="2" />
<text  x="1189.98" y="943.5" ></text>
</g>
<g >
<title>__do_page_fault (29 samples, 0.15%)</title><rect x="497.9" y="1893" width="1.8" height="15.0" fill="rgb(252,51,52)" rx="2" ry="2" />
<text  x="500.91" y="1903.5" ></text>
</g>
<g >
<title>unmap_page_range (7 samples, 0.04%)</title><rect x="1103.0" y="1909" width="0.4" height="15.0" fill="rgb(210,108,30)" rx="2" ry="2" />
<text  x="1105.99" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.4" y="965" width="0.1" height="15.0" fill="rgb(207,160,28)" rx="2" ry="2" />
<text  x="223.41" y="975.5" ></text>
</g>
<g >
<title>fasttext::Vector::zero (3 samples, 0.02%)</title><rect x="333.6" y="1973" width="0.2" height="15.0" fill="rgb(205,134,52)" rx="2" ry="2" />
<text  x="336.57" y="1983.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.02%)</title><rect x="147.9" y="1605" width="0.3" height="15.0" fill="rgb(235,128,18)" rx="2" ry="2" />
<text  x="150.95" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (2 samples, 0.01%)</title><rect x="693.3" y="1861" width="0.1" height="15.0" fill="rgb(205,227,31)" rx="2" ry="2" />
<text  x="696.27" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1349" width="0.3" height="15.0" fill="rgb(241,16,48)" rx="2" ry="2" />
<text  x="1190.41" y="1359.5" ></text>
</g>
<g >
<title>memcpy (11 samples, 0.06%)</title><rect x="651.0" y="1877" width="0.7" height="15.0" fill="rgb(254,47,8)" rx="2" ry="2" />
<text  x="654.03" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (32 samples, 0.17%)</title><rect x="814.4" y="2021" width="2.0" height="15.0" fill="rgb(238,10,34)" rx="2" ry="2" />
<text  x="817.45" y="2031.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (3 samples, 0.02%)</title><rect x="96.1" y="1941" width="0.2" height="15.0" fill="rgb(205,26,9)" rx="2" ry="2" />
<text  x="99.09" y="1951.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getLine (215 samples, 1.12%)</title><rect x="524.7" y="1925" width="13.3" height="15.0" fill="rgb(207,151,36)" rx="2" ry="2" />
<text  x="527.74" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::~collate (21 samples, 0.11%)</title><rect x="819.6" y="2037" width="1.3" height="15.0" fill="rgb(229,220,54)" rx="2" ry="2" />
<text  x="822.57" y="2047.5" ></text>
</g>
<g >
<title>[unknown] (533 samples, 2.79%)</title><rect x="56.1" y="1701" width="32.8" height="15.0" fill="rgb(252,110,43)" rx="2" ry="2" />
<text  x="59.07" y="1711.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.0" y="1589" width="0.2" height="15.0" fill="rgb(248,148,50)" rx="2" ry="2" />
<text  x="223.04" y="1599.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (8 samples, 0.04%)</title><rect x="1126.3" y="2037" width="0.5" height="15.0" fill="rgb(211,226,19)" rx="2" ry="2" />
<text  x="1129.30" y="2047.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (2 samples, 0.01%)</title><rect x="727.4" y="1765" width="0.1" height="15.0" fill="rgb(228,143,25)" rx="2" ry="2" />
<text  x="730.37" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="175.4" y="1589" width="0.1" height="15.0" fill="rgb(223,128,5)" rx="2" ry="2" />
<text  x="178.39" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1237" width="0.3" height="15.0" fill="rgb(233,18,15)" rx="2" ry="2" />
<text  x="1189.98" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (89 samples, 0.47%)</title><rect x="172.2" y="1749" width="5.5" height="15.0" fill="rgb(219,123,20)" rx="2" ry="2" />
<text  x="175.18" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (96 samples, 0.50%)</title><rect x="160.6" y="1701" width="5.9" height="15.0" fill="rgb(224,184,46)" rx="2" ry="2" />
<text  x="163.59" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="693" width="0.1" height="15.0" fill="rgb(207,113,0)" rx="2" ry="2" />
<text  x="162.85" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1733" width="0.4" height="15.0" fill="rgb(216,35,49)" rx="2" ry="2" />
<text  x="1190.35" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1125" width="0.2" height="15.0" fill="rgb(206,208,17)" rx="2" ry="2" />
<text  x="163.04" y="1135.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.04%)</title><rect x="763.4" y="2005" width="0.5" height="15.0" fill="rgb(209,106,45)" rx="2" ry="2" />
<text  x="766.45" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1877" width="0.1" height="15.0" fill="rgb(209,145,53)" rx="2" ry="2" />
<text  x="192.51" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (73 samples, 0.38%)</title><rect x="196.5" y="1637" width="4.5" height="15.0" fill="rgb(233,91,18)" rx="2" ry="2" />
<text  x="199.54" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (77 samples, 0.40%)</title><rect x="213.6" y="1781" width="4.8" height="15.0" fill="rgb(250,143,26)" rx="2" ry="2" />
<text  x="216.62" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (75 samples, 0.39%)</title><rect x="213.7" y="1717" width="4.6" height="15.0" fill="rgb(229,49,1)" rx="2" ry="2" />
<text  x="216.69" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (3 samples, 0.02%)</title><rect x="188.4" y="1797" width="0.2" height="15.0" fill="rgb(217,79,50)" rx="2" ry="2" />
<text  x="191.40" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (3 samples, 0.02%)</title><rect x="592.7" y="1877" width="0.2" height="15.0" fill="rgb(217,4,27)" rx="2" ry="2" />
<text  x="595.69" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="160.0" y="1605" width="0.2" height="15.0" fill="rgb(211,209,13)" rx="2" ry="2" />
<text  x="162.97" y="1615.5" ></text>
</g>
<g >
<title>__pthread_getspecific (2 samples, 0.01%)</title><rect x="650.8" y="1877" width="0.2" height="15.0" fill="rgb(227,205,44)" rx="2" ry="2" />
<text  x="653.84" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1237" width="0.2" height="15.0" fill="rgb(213,55,32)" rx="2" ry="2" />
<text  x="163.04" y="1247.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (9 samples, 0.05%)</title><rect x="943.1" y="1925" width="0.6" height="15.0" fill="rgb(211,95,10)" rx="2" ry="2" />
<text  x="946.15" y="1935.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (3 samples, 0.02%)</title><rect x="764.1" y="1861" width="0.2" height="15.0" fill="rgb(216,73,15)" rx="2" ry="2" />
<text  x="767.07" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="533" width="0.3" height="15.0" fill="rgb(223,95,16)" rx="2" ry="2" />
<text  x="1190.41" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1221" width="0.2" height="15.0" fill="rgb(245,34,49)" rx="2" ry="2" />
<text  x="223.35" y="1231.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="200.9" y="1621" width="0.1" height="15.0" fill="rgb(242,49,48)" rx="2" ry="2" />
<text  x="203.86" y="1631.5" ></text>
</g>
<g >
<title>page_fault (2 samples, 0.01%)</title><rect x="515.0" y="1941" width="0.1" height="15.0" fill="rgb(239,144,5)" rx="2" ry="2" />
<text  x="517.99" y="1951.5" ></text>
</g>
<g >
<title>Eigen::DenseCoeffsBase&lt;Eigen::Transpose&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;float, float&gt;, Eigen::Product&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0&gt; const, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const&gt; const&gt;, 0&gt;::coeff (2 samples, 0.01%)</title><rect x="43.2" y="2037" width="0.1" height="15.0" fill="rgb(209,33,11)" rx="2" ry="2" />
<text  x="46.18" y="2047.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (2 samples, 0.01%)</title><rect x="876.7" y="2037" width="0.2" height="15.0" fill="rgb(214,136,15)" rx="2" ry="2" />
<text  x="879.73" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="421" width="0.3" height="15.0" fill="rgb(215,155,18)" rx="2" ry="2" />
<text  x="1190.41" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (7 samples, 0.04%)</title><rect x="188.9" y="1861" width="0.4" height="15.0" fill="rgb(211,208,50)" rx="2" ry="2" />
<text  x="191.90" y="1871.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="681.3" y="1829" width="0.1" height="15.0" fill="rgb(222,104,42)" rx="2" ry="2" />
<text  x="684.31" y="1839.5" ></text>
</g>
<g >
<title>[libm-2.27.so] (4 samples, 0.02%)</title><rect x="28.4" y="2053" width="0.3" height="15.0" fill="rgb(253,215,41)" rx="2" ry="2" />
<text  x="31.44" y="2063.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::dump (6 samples, 0.03%)</title><rect x="515.4" y="2005" width="0.4" height="15.0" fill="rgb(241,28,3)" rx="2" ry="2" />
<text  x="518.42" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1717" width="0.4" height="15.0" fill="rgb(210,108,10)" rx="2" ry="2" />
<text  x="1190.35" y="1727.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8 (2 samples, 0.01%)</title><rect x="732.4" y="1893" width="0.1" height="15.0" fill="rgb(235,156,21)" rx="2" ry="2" />
<text  x="735.37" y="1903.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (3 samples, 0.02%)</title><rect x="1121.2" y="2037" width="0.2" height="15.0" fill="rgb(236,155,10)" rx="2" ry="2" />
<text  x="1124.24" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="917" width="0.1" height="15.0" fill="rgb(210,89,52)" rx="2" ry="2" />
<text  x="162.85" y="927.5" ></text>
</g>
<g >
<title>__pthread_getspecific (6 samples, 0.03%)</title><rect x="147.3" y="1605" width="0.3" height="15.0" fill="rgb(249,139,3)" rx="2" ry="2" />
<text  x="150.27" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1925" width="0.1" height="15.0" fill="rgb(217,120,51)" rx="2" ry="2" />
<text  x="1190.72" y="1935.5" ></text>
</g>
<g >
<title>__interceptor_strlen (23 samples, 0.12%)</title><rect x="1171.4" y="2037" width="1.4" height="15.0" fill="rgb(240,190,29)" rx="2" ry="2" />
<text  x="1174.38" y="2047.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (7 samples, 0.04%)</title><rect x="55.3" y="1893" width="0.4" height="15.0" fill="rgb(210,172,23)" rx="2" ry="2" />
<text  x="58.26" y="1903.5" ></text>
</g>
<g >
<title>operator delete[] (59 samples, 0.31%)</title><rect x="1180.1" y="2037" width="3.6" height="15.0" fill="rgb(219,121,7)" rx="2" ry="2" />
<text  x="1183.07" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; const&amp;&gt; (2 samples, 0.01%)</title><rect x="516.7" y="1765" width="0.1" height="15.0" fill="rgb(205,161,36)" rx="2" ry="2" />
<text  x="519.66" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="949" width="0.1" height="15.0" fill="rgb(246,226,35)" rx="2" ry="2" />
<text  x="162.85" y="959.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (2 samples, 0.01%)</title><rect x="151.2" y="1637" width="0.1" height="15.0" fill="rgb(236,82,12)" rx="2" ry="2" />
<text  x="154.16" y="1647.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="79.1" y="1157" width="0.3" height="15.0" fill="rgb(239,80,42)" rx="2" ry="2" />
<text  x="82.13" y="1167.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::do_transform (2 samples, 0.01%)</title><rect x="165.2" y="1541" width="0.1" height="15.0" fill="rgb(242,149,6)" rx="2" ry="2" />
<text  x="168.15" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="805" width="0.1" height="15.0" fill="rgb(234,216,14)" rx="2" ry="2" />
<text  x="1190.72" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="629" width="0.3" height="15.0" fill="rgb(238,91,17)" rx="2" ry="2" />
<text  x="1190.04" y="639.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;TThreadPool::TThreadPool (13 samples, 0.07%)</title><rect x="29.1" y="2037" width="0.8" height="15.0" fill="rgb(243,147,8)" rx="2" ry="2" />
<text  x="32.12" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="80.1" y="1189" width="0.1" height="15.0" fill="rgb(252,102,3)" rx="2" ry="2" />
<text  x="83.12" y="1199.5" ></text>
</g>
<g >
<title>[tgnews] (214 samples, 1.12%)</title><rect x="29.9" y="2053" width="13.2" height="15.0" fill="rgb(250,0,25)" rx="2" ry="2" />
<text  x="32.92" y="2063.5" ></text>
</g>
<g >
<title>__do_page_fault (33 samples, 0.17%)</title><rect x="53.8" y="1989" width="2.0" height="15.0" fill="rgb(230,168,24)" rx="2" ry="2" />
<text  x="56.78" y="1999.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (257 samples, 1.34%)</title><rect x="549.6" y="1877" width="15.8" height="15.0" fill="rgb(222,163,46)" rx="2" ry="2" />
<text  x="552.59" y="1887.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="89.7" y="1765" width="0.3" height="15.0" fill="rgb(209,101,24)" rx="2" ry="2" />
<text  x="92.74" y="1775.5" ></text>
</g>
<g >
<title>__interceptor_strlen (17 samples, 0.09%)</title><rect x="575.3" y="1893" width="1.1" height="15.0" fill="rgb(208,185,3)" rx="2" ry="2" />
<text  x="578.30" y="1903.5" ></text>
</g>
<g >
<title>__x64_sys_futex (2 samples, 0.01%)</title><rect x="132.4" y="1925" width="0.1" height="15.0" fill="rgb(244,106,4)" rx="2" ry="2" />
<text  x="135.41" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (347 samples, 1.81%)</title><rect x="56.1" y="613" width="21.4" height="15.0" fill="rgb(224,77,17)" rx="2" ry="2" />
<text  x="59.13" y="623.5" >[..</text>
</g>
<g >
<title>find_next_bit (2 samples, 0.01%)</title><rect x="944.6" y="1893" width="0.1" height="15.0" fill="rgb(246,197,26)" rx="2" ry="2" />
<text  x="947.56" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1557" width="0.4" height="15.0" fill="rgb(231,148,45)" rx="2" ry="2" />
<text  x="1190.35" y="1567.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="516.3" y="1989" width="0.2" height="15.0" fill="rgb(220,150,1)" rx="2" ry="2" />
<text  x="519.35" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (351 samples, 1.83%)</title><rect x="56.1" y="741" width="21.7" height="15.0" fill="rgb(214,128,21)" rx="2" ry="2" />
<text  x="59.13" y="751.5" >[..</text>
</g>
<g >
<title>zap_page_range (17 samples, 0.09%)</title><rect x="519.7" y="1973" width="1.0" height="15.0" fill="rgb(223,125,44)" rx="2" ry="2" />
<text  x="522.68" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="159.9" y="1797" width="0.3" height="15.0" fill="rgb(244,174,32)" rx="2" ry="2" />
<text  x="162.85" y="1807.5" ></text>
</g>
<g >
<title>strlen@plt (6 samples, 0.03%)</title><rect x="750.8" y="1893" width="0.4" height="15.0" fill="rgb(229,34,50)" rx="2" ry="2" />
<text  x="753.81" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="245" width="0.3" height="15.0" fill="rgb(235,121,20)" rx="2" ry="2" />
<text  x="1190.41" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1493" width="0.2" height="15.0" fill="rgb(254,141,33)" rx="2" ry="2" />
<text  x="223.35" y="1503.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="84.6" y="1397" width="0.1" height="15.0" fill="rgb(222,20,54)" rx="2" ry="2" />
<text  x="87.56" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1187.7" y="2021" width="0.1" height="15.0" fill="rgb(212,177,41)" rx="2" ry="2" />
<text  x="1190.66" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (6 samples, 0.03%)</title><rect x="1186.9" y="1749" width="0.4" height="15.0" fill="rgb(245,223,30)" rx="2" ry="2" />
<text  x="1189.92" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (344 samples, 1.80%)</title><rect x="133.1" y="1797" width="21.2" height="15.0" fill="rgb(244,19,2)" rx="2" ry="2" />
<text  x="136.09" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1237" width="0.3" height="15.0" fill="rgb(221,214,19)" rx="2" ry="2" />
<text  x="1190.41" y="1247.5" ></text>
</g>
<g >
<title>__pthread_getspecific (5 samples, 0.03%)</title><rect x="481.2" y="1941" width="0.3" height="15.0" fill="rgb(222,137,26)" rx="2" ry="2" />
<text  x="484.20" y="1951.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (5 samples, 0.03%)</title><rect x="591.5" y="1877" width="0.3" height="15.0" fill="rgb(207,189,0)" rx="2" ry="2" />
<text  x="594.52" y="1887.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.02%)</title><rect x="537.4" y="1893" width="0.2" height="15.0" fill="rgb(212,67,8)" rx="2" ry="2" />
<text  x="540.44" y="1903.5" ></text>
</g>
<g >
<title>operator new[] (50 samples, 0.26%)</title><rect x="1183.7" y="2037" width="3.1" height="15.0" fill="rgb(236,99,1)" rx="2" ry="2" />
<text  x="1186.71" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1189" width="0.3" height="15.0" fill="rgb(241,73,50)" rx="2" ry="2" />
<text  x="1190.41" y="1199.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="577.5" y="1877" width="0.1" height="15.0" fill="rgb(226,193,50)" rx="2" ry="2" />
<text  x="580.46" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="1637" width="0.4" height="15.0" fill="rgb(236,19,33)" rx="2" ry="2" />
<text  x="1189.92" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="613" width="0.3" height="15.0" fill="rgb(252,137,26)" rx="2" ry="2" />
<text  x="1190.04" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1285" width="0.2" height="15.0" fill="rgb(247,61,16)" rx="2" ry="2" />
<text  x="223.04" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1189" width="0.1" height="15.0" fill="rgb(218,129,31)" rx="2" ry="2" />
<text  x="1190.72" y="1199.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (19 samples, 0.10%)</title><rect x="1159.5" y="2037" width="1.2" height="15.0" fill="rgb(235,108,13)" rx="2" ry="2" />
<text  x="1162.54" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="88.6" y="1669" width="0.1" height="15.0" fill="rgb(233,92,27)" rx="2" ry="2" />
<text  x="91.56" y="1679.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::operator[] (4 samples, 0.02%)</title><rect x="131.8" y="1941" width="0.2" height="15.0" fill="rgb(245,127,31)" rx="2" ry="2" />
<text  x="134.79" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="197" width="0.3" height="15.0" fill="rgb(218,145,0)" rx="2" ry="2" />
<text  x="1190.04" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="158.7" y="1829" width="0.2" height="15.0" fill="rgb(227,1,34)" rx="2" ry="2" />
<text  x="161.74" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="853" width="0.3" height="15.0" fill="rgb(209,21,51)" rx="2" ry="2" />
<text  x="1189.98" y="863.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (5 samples, 0.03%)</title><rect x="123.8" y="1973" width="0.3" height="15.0" fill="rgb(205,65,28)" rx="2" ry="2" />
<text  x="126.78" y="1983.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="174.8" y="1589" width="0.2" height="15.0" fill="rgb(247,126,29)" rx="2" ry="2" />
<text  x="177.84" y="1599.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::json_value::destroy (6 samples, 0.03%)</title><rect x="123.7" y="1989" width="0.4" height="15.0" fill="rgb(241,43,19)" rx="2" ry="2" />
<text  x="126.71" y="1999.5" ></text>
</g>
<g >
<title>__lru_cache_add (4 samples, 0.02%)</title><rect x="26.6" y="1941" width="0.2" height="15.0" fill="rgb(211,161,14)" rx="2" ry="2" />
<text  x="29.59" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="837" width="0.1" height="15.0" fill="rgb(217,82,50)" rx="2" ry="2" />
<text  x="162.85" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1109" width="0.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1190.72" y="1119.5" ></text>
</g>
<g >
<title>clear_page_erms (2 samples, 0.01%)</title><rect x="727.3" y="1765" width="0.1" height="15.0" fill="rgb(220,31,24)" rx="2" ry="2" />
<text  x="730.25" y="1775.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="81.3" y="1253" width="0.1" height="15.0" fill="rgb(253,71,30)" rx="2" ry="2" />
<text  x="84.29" y="1263.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="88.1" y="1589" width="0.1" height="15.0" fill="rgb(221,209,35)" rx="2" ry="2" />
<text  x="91.07" y="1599.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.01%)</title><rect x="803.2" y="1989" width="0.1" height="15.0" fill="rgb(247,153,9)" rx="2" ry="2" />
<text  x="806.16" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (350 samples, 1.83%)</title><rect x="56.1" y="725" width="21.6" height="15.0" fill="rgb(238,174,36)" rx="2" ry="2" />
<text  x="59.13" y="735.5" >[..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (4 samples, 0.02%)</title><rect x="179.5" y="1621" width="0.2" height="15.0" fill="rgb(210,188,7)" rx="2" ry="2" />
<text  x="182.46" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="501" width="0.1" height="15.0" fill="rgb(227,229,40)" rx="2" ry="2" />
<text  x="162.85" y="511.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.02%)</title><rect x="174.3" y="1589" width="0.2" height="15.0" fill="rgb(214,136,25)" rx="2" ry="2" />
<text  x="177.34" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (94 samples, 0.49%)</title><rect x="138.4" y="1685" width="5.8" height="15.0" fill="rgb(243,72,23)" rx="2" ry="2" />
<text  x="141.39" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="2021" width="0.1" height="15.0" fill="rgb(253,127,43)" rx="2" ry="2" />
<text  x="58.88" y="2031.5" ></text>
</g>
<g >
<title>__madvise (3 samples, 0.02%)</title><rect x="91.8" y="1893" width="0.2" height="15.0" fill="rgb(244,116,8)" rx="2" ry="2" />
<text  x="94.83" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1493" width="0.4" height="15.0" fill="rgb(209,69,6)" rx="2" ry="2" />
<text  x="1190.35" y="1503.5" ></text>
</g>
<g >
<title>TDocument::TDocument (10 samples, 0.05%)</title><rect x="123.0" y="1989" width="0.7" height="15.0" fill="rgb(222,73,49)" rx="2" ry="2" />
<text  x="126.04" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1461" width="0.3" height="15.0" fill="rgb(250,209,1)" rx="2" ry="2" />
<text  x="1190.41" y="1471.5" ></text>
</g>
<g >
<title>[unknown] (347 samples, 1.81%)</title><rect x="56.1" y="597" width="21.4" height="15.0" fill="rgb(233,68,5)" rx="2" ry="2" />
<text  x="59.13" y="607.5" >[..</text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (8 samples, 0.04%)</title><rect x="692.8" y="1765" width="0.5" height="15.0" fill="rgb(251,181,38)" rx="2" ry="2" />
<text  x="695.78" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="188.5" y="1733" width="0.1" height="15.0" fill="rgb(207,163,21)" rx="2" ry="2" />
<text  x="191.46" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (6 samples, 0.03%)</title><rect x="1186.9" y="1685" width="0.4" height="15.0" fill="rgb(251,145,2)" rx="2" ry="2" />
<text  x="1189.92" y="1695.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (19 samples, 0.10%)</title><rect x="944.7" y="1781" width="1.2" height="15.0" fill="rgb(219,208,15)" rx="2" ry="2" />
<text  x="947.75" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (470 samples, 2.46%)</title><rect x="160.5" y="1893" width="29.0" height="15.0" fill="rgb(210,160,37)" rx="2" ry="2" />
<text  x="163.47" y="1903.5" >st..</text>
</g>
<g >
<title>operator delete (2 samples, 0.01%)</title><rect x="752.5" y="1957" width="0.1" height="15.0" fill="rgb(236,179,0)" rx="2" ry="2" />
<text  x="755.47" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1365" width="0.1" height="15.0" fill="rgb(244,12,23)" rx="2" ry="2" />
<text  x="162.85" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="220.3" y="1557" width="0.2" height="15.0" fill="rgb(248,180,46)" rx="2" ry="2" />
<text  x="223.28" y="1567.5" ></text>
</g>
<g >
<title>__split_vma (3 samples, 0.02%)</title><rect x="763.5" y="1893" width="0.2" height="15.0" fill="rgb(226,139,20)" rx="2" ry="2" />
<text  x="766.51" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (96 samples, 0.50%)</title><rect x="138.3" y="1733" width="5.9" height="15.0" fill="rgb(241,207,12)" rx="2" ry="2" />
<text  x="141.27" y="1743.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.01%)</title><rect x="189.9" y="1973" width="0.1" height="15.0" fill="rgb(228,134,54)" rx="2" ry="2" />
<text  x="192.88" y="1983.5" ></text>
</g>
<g >
<title>mmap_region (13 samples, 0.07%)</title><rect x="1101.9" y="1941" width="0.8" height="15.0" fill="rgb(240,105,51)" rx="2" ry="2" />
<text  x="1104.94" y="1951.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="192.8" y="1573" width="0.2" height="15.0" fill="rgb(227,21,27)" rx="2" ry="2" />
<text  x="195.78" y="1583.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (2 samples, 0.01%)</title><rect x="481.6" y="1941" width="0.1" height="15.0" fill="rgb(235,173,31)" rx="2" ry="2" />
<text  x="484.57" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="933" width="0.1" height="15.0" fill="rgb(253,109,39)" rx="2" ry="2" />
<text  x="1190.72" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1173" width="0.3" height="15.0" fill="rgb(218,216,17)" rx="2" ry="2" />
<text  x="1190.41" y="1183.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="91.4" y="1861" width="0.1" height="15.0" fill="rgb(252,18,52)" rx="2" ry="2" />
<text  x="94.40" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="693" width="0.3" height="15.0" fill="rgb(211,81,28)" rx="2" ry="2" />
<text  x="1190.41" y="703.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (8 samples, 0.04%)</title><rect x="813.4" y="2037" width="0.5" height="15.0" fill="rgb(248,174,22)" rx="2" ry="2" />
<text  x="816.40" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="709" width="0.3" height="15.0" fill="rgb(210,202,31)" rx="2" ry="2" />
<text  x="1189.98" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (75 samples, 0.39%)</title><rect x="177.8" y="1717" width="4.6" height="15.0" fill="rgb(251,119,6)" rx="2" ry="2" />
<text  x="180.80" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="453" width="0.3" height="15.0" fill="rgb(220,57,48)" rx="2" ry="2" />
<text  x="1190.41" y="463.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (5 samples, 0.03%)</title><rect x="158.4" y="1701" width="0.3" height="15.0" fill="rgb(212,66,51)" rx="2" ry="2" />
<text  x="161.37" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="949" width="0.3" height="15.0" fill="rgb(207,5,7)" rx="2" ry="2" />
<text  x="1189.98" y="959.5" ></text>
</g>
<g >
<title>page_fault (32 samples, 0.17%)</title><rect x="691.3" y="1845" width="2.0" height="15.0" fill="rgb(213,144,2)" rx="2" ry="2" />
<text  x="694.30" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (88 samples, 0.46%)</title><rect x="172.2" y="1717" width="5.4" height="15.0" fill="rgb(254,154,8)" rx="2" ry="2" />
<text  x="175.18" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (607 samples, 3.17%)</title><rect x="56.1" y="2005" width="37.4" height="15.0" fill="rgb(241,191,43)" rx="2" ry="2" />
<text  x="59.07" y="2015.5" >[un..</text>
</g>
<g >
<title>__asan::AsanTSDGet (3 samples, 0.02%)</title><rect x="151.3" y="1637" width="0.2" height="15.0" fill="rgb(230,108,0)" rx="2" ry="2" />
<text  x="154.28" y="1647.5" ></text>
</g>
<g >
<title>do_page_fault (4 samples, 0.02%)</title><rect x="107.9" y="2005" width="0.3" height="15.0" fill="rgb(234,188,19)" rx="2" ry="2" />
<text  x="110.93" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.3" y="1317" width="0.2" height="15.0" fill="rgb(251,87,36)" rx="2" ry="2" />
<text  x="223.35" y="1327.5" ></text>
</g>
<g >
<title>fasttext::Matrix::size (37 samples, 0.19%)</title><rect x="490.9" y="1957" width="2.3" height="15.0" fill="rgb(219,53,6)" rx="2" ry="2" />
<text  x="493.88" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (344 samples, 1.80%)</title><rect x="56.1" y="469" width="21.2" height="15.0" fill="rgb(206,185,33)" rx="2" ry="2" />
<text  x="59.13" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="469" width="0.1" height="15.0" fill="rgb(213,105,32)" rx="2" ry="2" />
<text  x="1190.72" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="189.5" y="1845" width="0.1" height="15.0" fill="rgb(247,108,6)" rx="2" ry="2" />
<text  x="192.51" y="1855.5" ></text>
</g>
<g >
<title>__x64_sys_futex (10 samples, 0.05%)</title><rect x="29.3" y="1957" width="0.6" height="15.0" fill="rgb(245,109,13)" rx="2" ry="2" />
<text  x="32.30" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1989" width="0.1" height="15.0" fill="rgb(234,73,24)" rx="2" ry="2" />
<text  x="1190.72" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (579 samples, 3.03%)</title><rect x="56.1" y="1893" width="35.7" height="15.0" fill="rgb(238,128,16)" rx="2" ry="2" />
<text  x="59.07" y="1903.5" >[un..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (70 samples, 0.37%)</title><rect x="154.4" y="1749" width="4.3" height="15.0" fill="rgb(233,36,19)" rx="2" ry="2" />
<text  x="157.36" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="181" width="0.3" height="15.0" fill="rgb(224,28,24)" rx="2" ry="2" />
<text  x="1190.04" y="191.5" ></text>
</g>
<g >
<title>Eigen::internal::general_matrix_matrix_product&lt;long, float, 0, false, float, 1, false, 0, 1&gt;::run (133 samples, 0.70%)</title><rect x="499.7" y="1925" width="8.2" height="15.0" fill="rgb(215,14,47)" rx="2" ry="2" />
<text  x="502.70" y="1935.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="83.6" y="1365" width="0.2" height="15.0" fill="rgb(229,92,7)" rx="2" ry="2" />
<text  x="86.57" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (106 samples, 0.55%)</title><rect x="206.9" y="1749" width="6.5" height="15.0" fill="rgb(238,170,36)" rx="2" ry="2" />
<text  x="209.90" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;char const*&amp;, unsigned int&amp;&gt; (2 samples, 0.01%)</title><rect x="732.1" y="1877" width="0.1" height="15.0" fill="rgb(240,61,25)" rx="2" ry="2" />
<text  x="735.06" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="357" width="0.3" height="15.0" fill="rgb(228,190,15)" rx="2" ry="2" />
<text  x="1190.04" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (12 samples, 0.06%)</title><rect x="218.8" y="1893" width="0.7" height="15.0" fill="rgb(214,203,15)" rx="2" ry="2" />
<text  x="221.80" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="613" width="0.1" height="15.0" fill="rgb(231,189,0)" rx="2" ry="2" />
<text  x="1190.72" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1269" width="0.3" height="15.0" fill="rgb(213,38,29)" rx="2" ry="2" />
<text  x="1189.98" y="1279.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::pushHash (5 samples, 0.03%)</title><rect x="329.3" y="1925" width="0.3" height="15.0" fill="rgb(231,151,5)" rx="2" ry="2" />
<text  x="332.31" y="1935.5" ></text>
</g>
<g >
<title>alloc_pages_vma (2 samples, 0.01%)</title><rect x="727.3" y="1797" width="0.1" height="15.0" fill="rgb(210,118,54)" rx="2" ry="2" />
<text  x="730.25" y="1807.5" ></text>
</g>
<g >
<title>unmap_vmas (4 samples, 0.02%)</title><rect x="764.0" y="1925" width="0.3" height="15.0" fill="rgb(234,160,30)" rx="2" ry="2" />
<text  x="767.00" y="1935.5" ></text>
</g>
<g >
<title>std::__cxx11::collate&lt;char&gt;::_M_transform (6 samples, 0.03%)</title><rect x="1150.7" y="2053" width="0.4" height="15.0" fill="rgb(235,55,21)" rx="2" ry="2" />
<text  x="1153.72" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (8 samples, 0.04%)</title><rect x="159.7" y="1909" width="0.5" height="15.0" fill="rgb(228,6,42)" rx="2" ry="2" />
<text  x="162.73" y="1919.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (26 samples, 0.14%)</title><rect x="1153.2" y="2037" width="1.6" height="15.0" fill="rgb(205,153,14)" rx="2" ry="2" />
<text  x="1156.18" y="2047.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="156.5" y="1669" width="0.1" height="15.0" fill="rgb(239,93,37)" rx="2" ry="2" />
<text  x="159.46" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (334 samples, 1.75%)</title><rect x="56.1" y="69" width="20.6" height="15.0" fill="rgb(252,5,13)" rx="2" ry="2" />
<text  x="59.13" y="79.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (11 samples, 0.06%)</title><rect x="152.7" y="1637" width="0.7" height="15.0" fill="rgb(228,204,20)" rx="2" ry="2" />
<text  x="155.70" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (77 samples, 0.40%)</title><rect x="191.7" y="1653" width="4.7" height="15.0" fill="rgb(253,130,6)" rx="2" ry="2" />
<text  x="194.67" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.4" y="917" width="0.1" height="15.0" fill="rgb(220,187,21)" rx="2" ry="2" />
<text  x="223.41" y="927.5" ></text>
</g>
<g >
<title>@plt (2 samples, 0.01%)</title><rect x="1166.4" y="2021" width="0.2" height="15.0" fill="rgb(222,189,14)" rx="2" ry="2" />
<text  x="1169.44" y="2031.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (2 samples, 0.01%)</title><rect x="601.9" y="1861" width="0.2" height="15.0" fill="rgb(205,18,24)" rx="2" ry="2" />
<text  x="604.94" y="1871.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::should_preserve (2 samples, 0.01%)</title><rect x="568.6" y="1909" width="0.2" height="15.0" fill="rgb(241,90,51)" rx="2" ry="2" />
<text  x="571.64" y="1919.5" ></text>
</g>
<g >
<title>fasttext::FastText::createLoss (9 samples, 0.05%)</title><rect x="514.6" y="1973" width="0.5" height="15.0" fill="rgb(233,111,16)" rx="2" ry="2" />
<text  x="517.56" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (6 samples, 0.03%)</title><rect x="219.0" y="1861" width="0.4" height="15.0" fill="rgb(252,48,44)" rx="2" ry="2" />
<text  x="221.99" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (76 samples, 0.40%)</title><rect x="149.4" y="1685" width="4.7" height="15.0" fill="rgb(249,174,54)" rx="2" ry="2" />
<text  x="152.43" y="1695.5" ></text>
</g>
<g >
<title>__handle_mm_fault (67 samples, 0.35%)</title><rect x="24.1" y="1973" width="4.1" height="15.0" fill="rgb(221,6,29)" rx="2" ry="2" />
<text  x="27.06" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="933" width="0.1" height="15.0" fill="rgb(226,141,6)" rx="2" ry="2" />
<text  x="162.85" y="943.5" ></text>
</g>
<g >
<title>__interceptor_strlen (78 samples, 0.41%)</title><rect x="745.4" y="1877" width="4.8" height="15.0" fill="rgb(227,211,6)" rx="2" ry="2" />
<text  x="748.38" y="1887.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.02%)</title><rect x="175.9" y="1589" width="0.2" height="15.0" fill="rgb(212,172,23)" rx="2" ry="2" />
<text  x="178.88" y="1599.5" ></text>
</g>
<g >
<title>page_fault (11 samples, 0.06%)</title><rect x="676.9" y="1845" width="0.6" height="15.0" fill="rgb(242,140,2)" rx="2" ry="2" />
<text  x="679.87" y="1855.5" ></text>
</g>
<g >
<title>__pthread_getspecific (43 samples, 0.22%)</title><rect x="520.7" y="2037" width="2.7" height="15.0" fill="rgb(236,225,46)" rx="2" ry="2" />
<text  x="523.73" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (345 samples, 1.80%)</title><rect x="133.1" y="1813" width="21.3" height="15.0" fill="rgb(226,181,42)" rx="2" ry="2" />
<text  x="136.09" y="1823.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10 samples, 0.05%)</title><rect x="219.9" y="1877" width="0.6" height="15.0" fill="rgb(225,229,4)" rx="2" ry="2" />
<text  x="222.91" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="629" width="0.1" height="15.0" fill="rgb(227,171,26)" rx="2" ry="2" />
<text  x="162.85" y="639.5" ></text>
</g>
<g >
<title>__asan_memcpy (2 samples, 0.01%)</title><rect x="136.2" y="1557" width="0.2" height="15.0" fill="rgb(225,27,42)" rx="2" ry="2" />
<text  x="139.23" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1701" width="0.2" height="15.0" fill="rgb(251,224,2)" rx="2" ry="2" />
<text  x="223.04" y="1711.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (2 samples, 0.01%)</title><rect x="87.1" y="1509" width="0.2" height="15.0" fill="rgb(240,159,35)" rx="2" ry="2" />
<text  x="90.15" y="1519.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (299 samples, 1.56%)</title><rect x="10.0" y="2053" width="18.4" height="15.0" fill="rgb(238,179,24)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="78.8" y="1125" width="0.1" height="15.0" fill="rgb(218,157,8)" rx="2" ry="2" />
<text  x="81.76" y="1135.5" ></text>
</g>
<g >
<title>std::istream::get@plt (2 samples, 0.01%)</title><rect x="876.6" y="1989" width="0.1" height="15.0" fill="rgb(209,69,13)" rx="2" ry="2" />
<text  x="879.61" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1509" width="0.1" height="15.0" fill="rgb(226,189,47)" rx="2" ry="2" />
<text  x="162.85" y="1519.5" ></text>
</g>
<g >
<title>Eigen::internal::gemv_dense_selector&lt;2, 1, true&gt;::run&lt;Eigen::Transpose&lt;Eigen::Matrix&lt;float, -1, -1, 0, -1, -1&gt; const&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt; (292 samples, 1.53%)</title><rect x="226.4" y="1957" width="18.0" height="15.0" fill="rgb(211,10,49)" rx="2" ry="2" />
<text  x="229.39" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="581" width="0.3" height="15.0" fill="rgb(233,90,17)" rx="2" ry="2" />
<text  x="1190.41" y="591.5" ></text>
</g>
<g >
<title>[unknown] (496 samples, 2.59%)</title><rect x="56.1" y="1541" width="30.6" height="15.0" fill="rgb(250,19,40)" rx="2" ry="2" />
<text  x="59.07" y="1551.5" >[u..</text>
</g>
<g >
<title>[unknown] (7 samples, 0.04%)</title><rect x="43.3" y="2021" width="0.4" height="15.0" fill="rgb(217,212,36)" rx="2" ry="2" />
<text  x="46.30" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1941" width="0.4" height="15.0" fill="rgb(215,136,37)" rx="2" ry="2" />
<text  x="1190.35" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (510 samples, 2.67%)</title><rect x="56.1" y="1605" width="31.4" height="15.0" fill="rgb(221,212,25)" rx="2" ry="2" />
<text  x="59.07" y="1615.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (431 samples, 2.25%)</title><rect x="133.0" y="1941" width="26.5" height="15.0" fill="rgb(232,180,48)" rx="2" ry="2" />
<text  x="135.96" y="1951.5" >s..</text>
</g>
<g >
<title>handle_mm_fault (6 samples, 0.03%)</title><rect x="677.2" y="1797" width="0.3" height="15.0" fill="rgb(252,162,17)" rx="2" ry="2" />
<text  x="680.18" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.02%)</title><rect x="877.3" y="2021" width="0.2" height="15.0" fill="rgb(246,106,4)" rx="2" ry="2" />
<text  x="880.35" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="437" width="0.3" height="15.0" fill="rgb(241,166,44)" rx="2" ry="2" />
<text  x="1190.41" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1653" width="0.2" height="15.0" fill="rgb(214,188,31)" rx="2" ry="2" />
<text  x="223.28" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (341 samples, 1.78%)</title><rect x="56.1" y="373" width="21.1" height="15.0" fill="rgb(247,47,43)" rx="2" ry="2" />
<text  x="59.13" y="383.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (2 samples, 0.01%)</title><rect x="123.3" y="1973" width="0.2" height="15.0" fill="rgb(252,212,23)" rx="2" ry="2" />
<text  x="126.34" y="1983.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (6 samples, 0.03%)</title><rect x="1103.0" y="1877" width="0.4" height="15.0" fill="rgb(247,56,20)" rx="2" ry="2" />
<text  x="1106.05" y="1887.5" ></text>
</g>
<g >
<title>onmt::AnnotatedToken::set (29 samples, 0.15%)</title><rect x="576.8" y="1893" width="1.8" height="15.0" fill="rgb(237,13,42)" rx="2" ry="2" />
<text  x="579.84" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (9 samples, 0.05%)</title><rect x="220.0" y="1845" width="0.5" height="15.0" fill="rgb(205,185,18)" rx="2" ry="2" />
<text  x="222.98" y="1855.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (2 samples, 0.01%)</title><rect x="943.8" y="1909" width="0.1" height="15.0" fill="rgb(242,195,4)" rx="2" ry="2" />
<text  x="946.76" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (3 samples, 0.02%)</title><rect x="159.1" y="1797" width="0.2" height="15.0" fill="rgb(216,43,31)" rx="2" ry="2" />
<text  x="162.11" y="1807.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_manager (4 samples, 0.02%)</title><rect x="161.1" y="1621" width="0.3" height="15.0" fill="rgb(251,24,1)" rx="2" ry="2" />
<text  x="164.15" y="1631.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="811.6" y="2005" width="0.1" height="15.0" fill="rgb(238,176,6)" rx="2" ry="2" />
<text  x="814.61" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1189" width="0.2" height="15.0" fill="rgb(237,128,14)" rx="2" ry="2" />
<text  x="223.35" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="997" width="0.1" height="15.0" fill="rgb(249,88,42)" rx="2" ry="2" />
<text  x="1190.72" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="789" width="0.1" height="15.0" fill="rgb(231,213,12)" rx="2" ry="2" />
<text  x="162.85" y="799.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (5 samples, 0.03%)</title><rect x="1103.6" y="2037" width="0.3" height="15.0" fill="rgb(227,57,36)" rx="2" ry="2" />
<text  x="1106.60" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.0" y="1349" width="0.2" height="15.0" fill="rgb(230,200,43)" rx="2" ry="2" />
<text  x="223.04" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (2 samples, 0.01%)</title><rect x="219.2" y="1813" width="0.1" height="15.0" fill="rgb(215,9,13)" rx="2" ry="2" />
<text  x="222.17" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1,259 samples, 6.58%)</title><rect x="1022.4" y="2053" width="77.6" height="15.0" fill="rgb(215,118,28)" rx="2" ry="2" />
<text  x="1025.39" y="2063.5" >__saniti..</text>
</g>
<g >
<title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex&lt;char const*&gt; (432 samples, 2.26%)</title><rect x="133.0" y="1957" width="26.6" height="15.0" fill="rgb(252,36,26)" rx="2" ry="2" />
<text  x="135.96" y="1967.5" >s..</text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.01%)</title><rect x="194.1" y="1557" width="0.2" height="15.0" fill="rgb(219,25,8)" rx="2" ry="2" />
<text  x="197.14" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (451 samples, 2.36%)</title><rect x="160.6" y="1813" width="27.8" height="15.0" fill="rgb(254,220,18)" rx="2" ry="2" />
<text  x="163.59" y="1823.5" >s..</text>
</g>
<g >
<title>fasttext::Model::predict (9 samples, 0.05%)</title><rect x="767.2" y="2037" width="0.6" height="15.0" fill="rgb(254,142,20)" rx="2" ry="2" />
<text  x="770.21" y="2047.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (2 samples, 0.01%)</title><rect x="677.4" y="1765" width="0.1" height="15.0" fill="rgb(206,213,4)" rx="2" ry="2" />
<text  x="680.42" y="1775.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="175.0" y="1589" width="0.3" height="15.0" fill="rgb(254,125,37)" rx="2" ry="2" />
<text  x="178.02" y="1599.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (3 samples, 0.02%)</title><rect x="96.1" y="1925" width="0.2" height="15.0" fill="rgb(242,85,21)" rx="2" ry="2" />
<text  x="99.09" y="1935.5" ></text>
</g>
<g >
<title>[unknown] (602 samples, 3.15%)</title><rect x="56.1" y="1989" width="37.1" height="15.0" fill="rgb(217,100,26)" rx="2" ry="2" />
<text  x="59.07" y="1999.5" >[un..</text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.01%)</title><rect x="1017.9" y="1973" width="0.1" height="15.0" fill="rgb(241,52,40)" rx="2" ry="2" />
<text  x="1020.89" y="1983.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (2 samples, 0.01%)</title><rect x="180.7" y="1621" width="0.1" height="15.0" fill="rgb(233,47,11)" rx="2" ry="2" />
<text  x="183.69" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="1669" width="0.1" height="15.0" fill="rgb(224,101,11)" rx="2" ry="2" />
<text  x="1190.72" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="1187.5" y="117" width="0.2" height="15.0" fill="rgb(245,152,43)" rx="2" ry="2" />
<text  x="1190.47" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1013" width="0.1" height="15.0" fill="rgb(206,44,14)" rx="2" ry="2" />
<text  x="1190.72" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (76 samples, 0.40%)</title><rect x="196.5" y="1717" width="4.7" height="15.0" fill="rgb(239,141,37)" rx="2" ry="2" />
<text  x="199.48" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1189" width="0.2" height="15.0" fill="rgb(218,192,0)" rx="2" ry="2" />
<text  x="163.04" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (86 samples, 0.45%)</title><rect x="201.5" y="1653" width="5.3" height="15.0" fill="rgb(225,16,36)" rx="2" ry="2" />
<text  x="204.48" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (360 samples, 1.88%)</title><rect x="56.1" y="1077" width="22.2" height="15.0" fill="rgb(234,105,33)" rx="2" ry="2" />
<text  x="59.13" y="1087.5" >[..</text>
</g>
<g >
<title>__asan_memcpy (11 samples, 0.06%)</title><rect x="577.9" y="1877" width="0.7" height="15.0" fill="rgb(208,97,27)" rx="2" ry="2" />
<text  x="580.89" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (3 samples, 0.02%)</title><rect x="137.5" y="1557" width="0.2" height="15.0" fill="rgb(228,168,11)" rx="2" ry="2" />
<text  x="140.53" y="1567.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (3 samples, 0.02%)</title><rect x="613.3" y="1845" width="0.2" height="15.0" fill="rgb(243,148,18)" rx="2" ry="2" />
<text  x="616.29" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="88.9" y="1701" width="0.2" height="15.0" fill="rgb(221,148,27)" rx="2" ry="2" />
<text  x="91.93" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1429" width="0.2" height="15.0" fill="rgb(223,13,34)" rx="2" ry="2" />
<text  x="162.97" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1941" width="0.1" height="15.0" fill="rgb(254,207,17)" rx="2" ry="2" />
<text  x="1190.72" y="1951.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 0.02%)</title><rect x="761.0" y="1925" width="0.2" height="15.0" fill="rgb(206,171,2)" rx="2" ry="2" />
<text  x="763.98" y="1935.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (2 samples, 0.01%)</title><rect x="384.8" y="1941" width="0.1" height="15.0" fill="rgb(223,113,14)" rx="2" ry="2" />
<text  x="387.81" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="159.8" y="1845" width="0.4" height="15.0" fill="rgb(250,223,8)" rx="2" ry="2" />
<text  x="162.79" y="1855.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (19 samples, 0.10%)</title><rect x="485.3" y="1925" width="1.1" height="15.0" fill="rgb(228,133,14)" rx="2" ry="2" />
<text  x="488.27" y="1935.5" ></text>
</g>
<g >
<title>__asan_memcpy (16 samples, 0.08%)</title><rect x="648.7" y="1877" width="1.0" height="15.0" fill="rgb(216,107,22)" rx="2" ry="2" />
<text  x="651.75" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1893" width="0.1" height="15.0" fill="rgb(211,211,24)" rx="2" ry="2" />
<text  x="58.88" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="517" width="0.1" height="15.0" fill="rgb(212,64,7)" rx="2" ry="2" />
<text  x="1190.72" y="527.5" ></text>
</g>
<g >
<title>handle_mm_fault (10 samples, 0.05%)</title><rect x="646.9" y="1813" width="0.6" height="15.0" fill="rgb(245,31,43)" rx="2" ry="2" />
<text  x="649.90" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="160.0" y="1301" width="0.2" height="15.0" fill="rgb(233,197,43)" rx="2" ry="2" />
<text  x="163.04" y="1311.5" ></text>
</g>
<g >
<title>generic_exec_single (3 samples, 0.02%)</title><rect x="55.5" y="1797" width="0.2" height="15.0" fill="rgb(241,7,40)" rx="2" ry="2" />
<text  x="58.51" y="1807.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.03%)</title><rect x="201.5" y="1637" width="0.3" height="15.0" fill="rgb(220,99,0)" rx="2" ry="2" />
<text  x="204.54" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1509" width="0.2" height="15.0" fill="rgb(234,96,38)" rx="2" ry="2" />
<text  x="223.04" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="869" width="0.1" height="15.0" fill="rgb(222,113,52)" rx="2" ry="2" />
<text  x="1190.72" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="189.2" y="1781" width="0.1" height="15.0" fill="rgb(205,107,28)" rx="2" ry="2" />
<text  x="192.20" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1701" width="0.4" height="15.0" fill="rgb(235,174,48)" rx="2" ry="2" />
<text  x="1190.35" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="86.5" y="1525" width="0.2" height="15.0" fill="rgb(212,99,11)" rx="2" ry="2" />
<text  x="89.47" y="1535.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (8 samples, 0.04%)</title><rect x="535.8" y="1909" width="0.5" height="15.0" fill="rgb(238,214,0)" rx="2" ry="2" />
<text  x="538.84" y="1919.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2 samples, 0.01%)</title><rect x="133.3" y="1637" width="0.1" height="15.0" fill="rgb(254,9,7)" rx="2" ry="2" />
<text  x="136.27" y="1647.5" ></text>
</g>
<g >
<title>rwsem_wake (2 samples, 0.01%)</title><rect x="946.0" y="1957" width="0.2" height="15.0" fill="rgb(233,95,11)" rx="2" ry="2" />
<text  x="949.04" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (27 samples, 0.14%)</title><rect x="875.1" y="2021" width="1.6" height="15.0" fill="rgb(248,215,30)" rx="2" ry="2" />
<text  x="878.07" y="2031.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (2 samples, 0.01%)</title><rect x="140.9" y="1589" width="0.1" height="15.0" fill="rgb(243,128,41)" rx="2" ry="2" />
<text  x="143.92" y="1599.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.02%)</title><rect x="186.4" y="1653" width="0.2" height="15.0" fill="rgb(216,67,6)" rx="2" ry="2" />
<text  x="189.37" y="1663.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (40 samples, 0.21%)</title><rect x="215.2" y="1685" width="2.5" height="15.0" fill="rgb(237,70,40)" rx="2" ry="2" />
<text  x="218.23" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="220.4" y="1061" width="0.1" height="15.0" fill="rgb(211,166,7)" rx="2" ry="2" />
<text  x="223.41" y="1071.5" ></text>
</g>
<g >
<title>__do_page_fault (2 samples, 0.01%)</title><rect x="515.0" y="1909" width="0.1" height="15.0" fill="rgb(254,82,15)" rx="2" ry="2" />
<text  x="517.99" y="1919.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (188 samples, 0.98%)</title><rect x="615.3" y="1877" width="11.6" height="15.0" fill="rgb(216,195,39)" rx="2" ry="2" />
<text  x="618.26" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1797" width="0.1" height="15.0" fill="rgb(251,42,1)" rx="2" ry="2" />
<text  x="1190.72" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1397" width="0.2" height="15.0" fill="rgb(245,134,23)" rx="2" ry="2" />
<text  x="223.35" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1157" width="0.2" height="15.0" fill="rgb(251,228,38)" rx="2" ry="2" />
<text  x="223.35" y="1167.5" ></text>
</g>
<g >
<title>[unknown] (335 samples, 1.75%)</title><rect x="56.1" y="117" width="20.7" height="15.0" fill="rgb(217,172,31)" rx="2" ry="2" />
<text  x="59.13" y="127.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.02%)</title><rect x="588.3" y="1877" width="0.1" height="15.0" fill="rgb(250,30,8)" rx="2" ry="2" />
<text  x="591.25" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (83 samples, 0.43%)</title><rect x="161.4" y="1589" width="5.1" height="15.0" fill="rgb(246,217,50)" rx="2" ry="2" />
<text  x="164.39" y="1599.5" ></text>
</g>
<g >
<title>__pthread_getspecific (4 samples, 0.02%)</title><rect x="613.0" y="1845" width="0.2" height="15.0" fill="rgb(219,17,2)" rx="2" ry="2" />
<text  x="615.98" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="709" width="0.3" height="15.0" fill="rgb(216,112,50)" rx="2" ry="2" />
<text  x="1190.41" y="719.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (60 samples, 0.31%)</title><rect x="807.9" y="2005" width="3.7" height="15.0" fill="rgb(232,167,26)" rx="2" ry="2" />
<text  x="810.91" y="2015.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="87.1" y="1541" width="0.2" height="15.0" fill="rgb(247,167,10)" rx="2" ry="2" />
<text  x="90.15" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="805" width="0.1" height="15.0" fill="rgb(248,204,15)" rx="2" ry="2" />
<text  x="162.85" y="815.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (20 samples, 0.10%)</title><rect x="944.7" y="1893" width="1.2" height="15.0" fill="rgb(213,170,14)" rx="2" ry="2" />
<text  x="947.69" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (89 samples, 0.47%)</title><rect x="201.4" y="1669" width="5.4" height="15.0" fill="rgb(215,68,42)" rx="2" ry="2" />
<text  x="204.35" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (30 samples, 0.16%)</title><rect x="878.4" y="2005" width="1.8" height="15.0" fill="rgb(237,45,12)" rx="2" ry="2" />
<text  x="881.40" y="2015.5" ></text>
</g>
<g >
<title>handle_mm_fault (18 samples, 0.09%)</title><rect x="498.5" y="1877" width="1.1" height="15.0" fill="rgb(231,222,31)" rx="2" ry="2" />
<text  x="501.53" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (389 samples, 2.03%)</title><rect x="56.1" y="1189" width="24.0" height="15.0" fill="rgb(210,158,30)" rx="2" ry="2" />
<text  x="59.13" y="1199.5" >[..</text>
</g>
<g >
<title>[unknown] (380 samples, 1.99%)</title><rect x="56.1" y="1173" width="23.5" height="15.0" fill="rgb(254,227,44)" rx="2" ry="2" />
<text  x="59.13" y="1183.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1413" width="0.1" height="15.0" fill="rgb(254,172,5)" rx="2" ry="2" />
<text  x="1190.72" y="1423.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (2 samples, 0.01%)</title><rect x="519.9" y="1781" width="0.1" height="15.0" fill="rgb(235,98,46)" rx="2" ry="2" />
<text  x="522.86" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.86%)</title><rect x="56.1" y="981" width="22.0" height="15.0" fill="rgb(241,223,28)" rx="2" ry="2" />
<text  x="59.13" y="991.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="1029" width="0.3" height="15.0" fill="rgb(218,17,33)" rx="2" ry="2" />
<text  x="1190.41" y="1039.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (2 samples, 0.01%)</title><rect x="807.8" y="2005" width="0.1" height="15.0" fill="rgb(248,11,1)" rx="2" ry="2" />
<text  x="810.79" y="2015.5" ></text>
</g>
<g >
<title>__strxfrm_l (37 samples, 0.19%)</title><rect x="1169.1" y="2021" width="2.3" height="15.0" fill="rgb(253,195,44)" rx="2" ry="2" />
<text  x="1172.09" y="2031.5" ></text>
</g>
<g >
<title>onmt::unicode::explode_utf8_with_marks (599 samples, 3.13%)</title><rect x="656.5" y="1877" width="36.9" height="15.0" fill="rgb(222,153,33)" rx="2" ry="2" />
<text  x="659.46" y="1887.5" >onm..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1221" width="0.2" height="15.0" fill="rgb(250,76,45)" rx="2" ry="2" />
<text  x="163.04" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_char_matcher&lt;false, false&gt; (2 samples, 0.01%)</title><rect x="219.2" y="1829" width="0.1" height="15.0" fill="rgb(206,111,42)" rx="2" ry="2" />
<text  x="222.17" y="1839.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (14 samples, 0.07%)</title><rect x="1101.9" y="1973" width="0.9" height="15.0" fill="rgb(245,135,53)" rx="2" ry="2" />
<text  x="1104.94" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="1093" width="0.3" height="15.0" fill="rgb(211,77,20)" rx="2" ry="2" />
<text  x="1190.41" y="1103.5" ></text>
</g>
<g >
<title>smp_call_function_single (6 samples, 0.03%)</title><rect x="55.3" y="1813" width="0.4" height="15.0" fill="rgb(218,14,38)" rx="2" ry="2" />
<text  x="58.33" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="437" width="0.3" height="15.0" fill="rgb(218,185,22)" rx="2" ry="2" />
<text  x="1190.04" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="681.3" y="1845" width="0.1" height="15.0" fill="rgb(233,214,36)" rx="2" ry="2" />
<text  x="684.31" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="2005" width="0.1" height="15.0" fill="rgb(207,57,11)" rx="2" ry="2" />
<text  x="58.88" y="2015.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (4 samples, 0.02%)</title><rect x="519.7" y="1893" width="0.3" height="15.0" fill="rgb(208,89,0)" rx="2" ry="2" />
<text  x="522.74" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1621" width="0.4" height="15.0" fill="rgb(236,189,9)" rx="2" ry="2" />
<text  x="1190.35" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;TDocument, std::allocator&lt;TDocument&gt; &gt;::_M_realloc_insert&lt;TDocument const&amp;&gt; (2 samples, 0.01%)</title><rect x="517.4" y="2005" width="0.1" height="15.0" fill="rgb(237,138,25)" rx="2" ry="2" />
<text  x="520.40" y="2015.5" ></text>
</g>
<g >
<title>Eigen::PlainObjectBase&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; &gt;::resize (4 samples, 0.02%)</title><rect x="226.1" y="1957" width="0.3" height="15.0" fill="rgb(246,10,1)" rx="2" ry="2" />
<text  x="229.14" y="1967.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="153.7" y="1653" width="0.1" height="15.0" fill="rgb(240,184,49)" rx="2" ry="2" />
<text  x="156.68" y="1663.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (53 samples, 0.28%)</title><rect x="203.4" y="1621" width="3.3" height="15.0" fill="rgb(214,41,25)" rx="2" ry="2" />
<text  x="206.39" y="1631.5" ></text>
</g>
<g >
<title>futex_wake (9 samples, 0.05%)</title><rect x="29.4" y="1925" width="0.5" height="15.0" fill="rgb(213,15,25)" rx="2" ry="2" />
<text  x="32.36" y="1935.5" ></text>
</g>
<g >
<title>__asan_memcpy (16 samples, 0.08%)</title><rect x="690.2" y="1845" width="1.0" height="15.0" fill="rgb(234,169,36)" rx="2" ry="2" />
<text  x="693.25" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="160.0" y="1413" width="0.2" height="15.0" fill="rgb(210,184,34)" rx="2" ry="2" />
<text  x="162.97" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="189.5" y="1525" width="0.1" height="15.0" fill="rgb(206,217,53)" rx="2" ry="2" />
<text  x="192.51" y="1535.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1957" width="0.1" height="15.0" fill="rgb(221,97,5)" rx="2" ry="2" />
<text  x="58.88" y="1967.5" ></text>
</g>
<g >
<title>page_fault (3 samples, 0.02%)</title><rect x="1189.4" y="2021" width="0.2" height="15.0" fill="rgb(240,142,26)" rx="2" ry="2" />
<text  x="1192.44" y="2031.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (2 samples, 0.01%)</title><rect x="90.2" y="1781" width="0.1" height="15.0" fill="rgb(206,207,54)" rx="2" ry="2" />
<text  x="93.17" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1429" width="0.3" height="15.0" fill="rgb(228,101,11)" rx="2" ry="2" />
<text  x="1189.98" y="1439.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.02%)</title><rect x="1017.8" y="2021" width="0.2" height="15.0" fill="rgb(229,163,32)" rx="2" ry="2" />
<text  x="1020.83" y="2031.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (3 samples, 0.02%)</title><rect x="91.8" y="1781" width="0.2" height="15.0" fill="rgb(254,107,41)" rx="2" ry="2" />
<text  x="94.83" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="160.0" y="1509" width="0.2" height="15.0" fill="rgb(233,85,52)" rx="2" ry="2" />
<text  x="162.97" y="1519.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (17 samples, 0.09%)</title><rect x="1115.1" y="2037" width="1.1" height="15.0" fill="rgb(215,184,29)" rx="2" ry="2" />
<text  x="1118.14" y="2047.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (19 samples, 0.10%)</title><rect x="118.0" y="2037" width="1.2" height="15.0" fill="rgb(245,20,47)" rx="2" ry="2" />
<text  x="121.04" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (3 samples, 0.02%)</title><rect x="764.4" y="2037" width="0.2" height="15.0" fill="rgb(206,161,43)" rx="2" ry="2" />
<text  x="767.44" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="325" width="0.3" height="15.0" fill="rgb(229,107,17)" rx="2" ry="2" />
<text  x="1190.41" y="335.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (2 samples, 0.01%)</title><rect x="193.8" y="1557" width="0.1" height="15.0" fill="rgb(242,81,14)" rx="2" ry="2" />
<text  x="196.77" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (76 samples, 0.40%)</title><rect x="149.4" y="1701" width="4.7" height="15.0" fill="rgb(234,52,49)" rx="2" ry="2" />
<text  x="152.43" y="1711.5" ></text>
</g>
<g >
<title>__dynamic_cast (6 samples, 0.03%)</title><rect x="161.5" y="1573" width="0.4" height="15.0" fill="rgb(244,48,7)" rx="2" ry="2" />
<text  x="164.52" y="1583.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::MergeBatches (11 samples, 0.06%)</title><rect x="761.5" y="2037" width="0.7" height="15.0" fill="rgb(240,120,54)" rx="2" ry="2" />
<text  x="764.54" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="469" width="0.3" height="15.0" fill="rgb(205,195,7)" rx="2" ry="2" />
<text  x="1190.41" y="479.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::scan_string (111 samples, 0.58%)</title><rect x="124.9" y="1941" width="6.9" height="15.0" fill="rgb(250,220,54)" rx="2" ry="2" />
<text  x="127.95" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="220.2" y="1733" width="0.3" height="15.0" fill="rgb(226,66,16)" rx="2" ry="2" />
<text  x="223.22" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1605" width="0.2" height="15.0" fill="rgb(240,208,7)" rx="2" ry="2" />
<text  x="223.04" y="1615.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (4 samples, 0.02%)</title><rect x="322.8" y="1941" width="0.2" height="15.0" fill="rgb(232,137,54)" rx="2" ry="2" />
<text  x="325.78" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (576 samples, 3.01%)</title><rect x="56.1" y="1877" width="35.5" height="15.0" fill="rgb(213,70,27)" rx="2" ry="2" />
<text  x="59.07" y="1887.5" >[un..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.01%)</title><rect x="88.1" y="1605" width="0.1" height="15.0" fill="rgb(248,23,20)" rx="2" ry="2" />
<text  x="91.07" y="1615.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2 samples, 0.01%)</title><rect x="176.9" y="1605" width="0.1" height="15.0" fill="rgb(246,161,41)" rx="2" ry="2" />
<text  x="179.87" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (77 samples, 0.40%)</title><rect x="213.6" y="1765" width="4.8" height="15.0" fill="rgb(249,209,32)" rx="2" ry="2" />
<text  x="216.62" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_quantifier (3 samples, 0.02%)</title><rect x="188.2" y="1749" width="0.2" height="15.0" fill="rgb(241,18,0)" rx="2" ry="2" />
<text  x="191.22" y="1759.5" ></text>
</g>
<g >
<title>__handle_mm_fault (6 samples, 0.03%)</title><rect x="677.2" y="1781" width="0.3" height="15.0" fill="rgb(219,3,41)" rx="2" ry="2" />
<text  x="680.18" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="229" width="0.3" height="15.0" fill="rgb(221,203,32)" rx="2" ry="2" />
<text  x="1190.41" y="239.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (9 samples, 0.05%)</title><rect x="1175.9" y="2037" width="0.5" height="15.0" fill="rgb(226,59,25)" rx="2" ry="2" />
<text  x="1178.88" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.3" y="1573" width="0.4" height="15.0" fill="rgb(234,83,43)" rx="2" ry="2" />
<text  x="1190.35" y="1583.5" ></text>
</g>
<g >
<title>__handle_mm_fault (18 samples, 0.09%)</title><rect x="498.5" y="1861" width="1.1" height="15.0" fill="rgb(206,57,34)" rx="2" ry="2" />
<text  x="501.53" y="1871.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (6 samples, 0.03%)</title><rect x="143.1" y="1589" width="0.4" height="15.0" fill="rgb(210,202,13)" rx="2" ry="2" />
<text  x="146.14" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1445" width="0.1" height="15.0" fill="rgb(247,200,26)" rx="2" ry="2" />
<text  x="162.85" y="1455.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (4 samples, 0.02%)</title><rect x="85.4" y="1461" width="0.2" height="15.0" fill="rgb(217,102,42)" rx="2" ry="2" />
<text  x="88.36" y="1471.5" ></text>
</g>
<g >
<title>do_page_fault (3 samples, 0.02%)</title><rect x="1189.4" y="2005" width="0.2" height="15.0" fill="rgb(225,218,33)" rx="2" ry="2" />
<text  x="1192.44" y="2015.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (3 samples, 0.02%)</title><rect x="96.1" y="1973" width="0.2" height="15.0" fill="rgb(232,71,40)" rx="2" ry="2" />
<text  x="99.09" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_matcher (3 samples, 0.02%)</title><rect x="182.4" y="1749" width="0.2" height="15.0" fill="rgb(252,24,5)" rx="2" ry="2" />
<text  x="185.42" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="874.1" y="2021" width="0.2" height="15.0" fill="rgb(229,97,32)" rx="2" ry="2" />
<text  x="877.14" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1781" width="0.1" height="15.0" fill="rgb(247,10,45)" rx="2" ry="2" />
<text  x="1190.72" y="1791.5" ></text>
</g>
<g >
<title>alloc_pages_vma (3 samples, 0.02%)</title><rect x="1022.0" y="1957" width="0.1" height="15.0" fill="rgb(224,206,50)" rx="2" ry="2" />
<text  x="1024.96" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="160.0" y="1461" width="0.2" height="15.0" fill="rgb(235,185,31)" rx="2" ry="2" />
<text  x="162.97" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.0" y="1109" width="0.3" height="15.0" fill="rgb(225,91,35)" rx="2" ry="2" />
<text  x="1189.98" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="373" width="0.3" height="15.0" fill="rgb(250,127,44)" rx="2" ry="2" />
<text  x="1190.41" y="383.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (2 samples, 0.01%)</title><rect x="1103.8" y="1941" width="0.1" height="15.0" fill="rgb(224,18,47)" rx="2" ry="2" />
<text  x="1106.79" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="613" width="0.1" height="15.0" fill="rgb(220,175,2)" rx="2" ry="2" />
<text  x="162.85" y="623.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (1,057 samples, 5.52%)</title><rect x="881.0" y="2053" width="65.2" height="15.0" fill="rgb(245,113,32)" rx="2" ry="2" />
<text  x="883.99" y="2063.5" >__asan:..</text>
</g>
<g >
<title>handle_mm_fault (6 samples, 0.03%)</title><rect x="1021.9" y="1989" width="0.4" height="15.0" fill="rgb(221,134,51)" rx="2" ry="2" />
<text  x="1024.90" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="565" width="0.3" height="15.0" fill="rgb(207,196,9)" rx="2" ry="2" />
<text  x="1190.04" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1717" width="0.2" height="15.0" fill="rgb(249,103,6)" rx="2" ry="2" />
<text  x="223.04" y="1727.5" ></text>
</g>
<g >
<title>__asan::asan_delete (5 samples, 0.03%)</title><rect x="1163.9" y="2037" width="0.3" height="15.0" fill="rgb(242,163,34)" rx="2" ry="2" />
<text  x="1166.85" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (3 samples, 0.02%)</title><rect x="92.9" y="1973" width="0.2" height="15.0" fill="rgb(229,128,47)" rx="2" ry="2" />
<text  x="95.94" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="565" width="0.3" height="15.0" fill="rgb(233,37,53)" rx="2" ry="2" />
<text  x="1190.41" y="575.5" ></text>
</g>
<g >
<title>[unknown] (356 samples, 1.86%)</title><rect x="56.1" y="949" width="22.0" height="15.0" fill="rgb(212,228,34)" rx="2" ry="2" />
<text  x="59.13" y="959.5" >[..</text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.01%)</title><rect x="1102.0" y="1877" width="0.1" height="15.0" fill="rgb(254,100,22)" rx="2" ry="2" />
<text  x="1105.00" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (75 samples, 0.39%)</title><rect x="133.6" y="1621" width="4.6" height="15.0" fill="rgb(235,193,32)" rx="2" ry="2" />
<text  x="136.58" y="1631.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.01%)</title><rect x="86.9" y="1525" width="0.1" height="15.0" fill="rgb(229,69,2)" rx="2" ry="2" />
<text  x="89.90" y="1535.5" ></text>
</g>
<g >
<title>vfs_read (3 samples, 0.02%)</title><rect x="1111.1" y="1957" width="0.2" height="15.0" fill="rgb(229,114,6)" rx="2" ry="2" />
<text  x="1114.13" y="1967.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.05%)</title><rect x="629.3" y="1877" width="0.6" height="15.0" fill="rgb(230,133,1)" rx="2" ry="2" />
<text  x="632.26" y="1887.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::addSubwords (374 samples, 1.95%)</title><rect x="542.4" y="1909" width="23.1" height="15.0" fill="rgb(228,179,53)" rx="2" ry="2" />
<text  x="545.43" y="1919.5" >f..</text>
</g>
<g >
<title>fasttext::Matrix::size (33 samples, 0.17%)</title><rect x="330.0" y="1973" width="2.0" height="15.0" fill="rgb(235,110,38)" rx="2" ry="2" />
<text  x="332.99" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;TWeightedNewsCluster, std::allocator&lt;TWeightedNewsCluster&gt; &gt;::push_back (2 samples, 0.01%)</title><rect x="190.2" y="1989" width="0.1" height="15.0" fill="rgb(235,37,32)" rx="2" ry="2" />
<text  x="193.19" y="1999.5" ></text>
</g>
<g >
<title>do_page_fault (35 samples, 0.18%)</title><rect x="507.9" y="1941" width="2.2" height="15.0" fill="rgb(235,105,53)" rx="2" ry="2" />
<text  x="510.90" y="1951.5" ></text>
</g>
<g >
<title>nlohmann::detail::lexer&lt;nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;::get (3 samples, 0.02%)</title><rect x="124.7" y="1925" width="0.2" height="15.0" fill="rgb(232,196,18)" rx="2" ry="2" />
<text  x="127.70" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="160.0" y="1653" width="0.2" height="15.0" fill="rgb(218,73,4)" rx="2" ry="2" />
<text  x="162.97" y="1663.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (8 samples, 0.04%)</title><rect x="688.6" y="1845" width="0.5" height="15.0" fill="rgb(213,81,25)" rx="2" ry="2" />
<text  x="691.65" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (357 samples, 1.87%)</title><rect x="160.6" y="1797" width="22.0" height="15.0" fill="rgb(215,110,39)" rx="2" ry="2" />
<text  x="163.59" y="1807.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.9" y="1941" width="0.4" height="15.0" fill="rgb(240,65,29)" rx="2" ry="2" />
<text  x="1189.85" y="1951.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.02%)</title><rect x="651.3" y="1797" width="0.2" height="15.0" fill="rgb(240,195,44)" rx="2" ry="2" />
<text  x="654.34" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (94 samples, 0.49%)</title><rect x="138.4" y="1653" width="5.8" height="15.0" fill="rgb(241,183,18)" rx="2" ry="2" />
<text  x="141.39" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="1187.5" y="149" width="0.2" height="15.0" fill="rgb(252,130,39)" rx="2" ry="2" />
<text  x="1190.47" y="159.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (8 samples, 0.04%)</title><rect x="181.9" y="1653" width="0.5" height="15.0" fill="rgb(226,81,41)" rx="2" ry="2" />
<text  x="184.87" y="1663.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (3 samples, 0.02%)</title><rect x="513.9" y="1973" width="0.2" height="15.0" fill="rgb(250,41,10)" rx="2" ry="2" />
<text  x="516.94" y="1983.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.03%)</title><rect x="210.7" y="1637" width="0.3" height="15.0" fill="rgb(233,17,18)" rx="2" ry="2" />
<text  x="213.66" y="1647.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 0.01%)</title><rect x="1111.2" y="1861" width="0.1" height="15.0" fill="rgb(254,36,22)" rx="2" ry="2" />
<text  x="1114.19" y="1871.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 0.03%)</title><rect x="54.6" y="1893" width="0.3" height="15.0" fill="rgb(250,151,46)" rx="2" ry="2" />
<text  x="57.59" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="220.3" y="1701" width="0.2" height="15.0" fill="rgb(222,220,14)" rx="2" ry="2" />
<text  x="223.28" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1493" width="0.1" height="15.0" fill="rgb(231,177,49)" rx="2" ry="2" />
<text  x="1190.72" y="1503.5" ></text>
</g>
<g >
<title>fasttext::FastText::loadModel (9 samples, 0.05%)</title><rect x="514.6" y="2005" width="0.5" height="15.0" fill="rgb(238,13,44)" rx="2" ry="2" />
<text  x="517.56" y="2015.5" ></text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::predict (6 samples, 0.03%)</title><rect x="565.7" y="1925" width="0.4" height="15.0" fill="rgb(241,87,14)" rx="2" ry="2" />
<text  x="568.68" y="1935.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (4 samples, 0.02%)</title><rect x="494.6" y="1941" width="0.3" height="15.0" fill="rgb(249,99,39)" rx="2" ry="2" />
<text  x="497.64" y="1951.5" ></text>
</g>
<g >
<title>[libc-2.27.so] (6 samples, 0.03%)</title><rect x="609.2" y="1845" width="0.4" height="15.0" fill="rgb(239,28,5)" rx="2" ry="2" />
<text  x="612.22" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1541" width="0.1" height="15.0" fill="rgb(246,215,14)" rx="2" ry="2" />
<text  x="1190.72" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="245" width="0.1" height="15.0" fill="rgb(249,200,51)" rx="2" ry="2" />
<text  x="1190.72" y="255.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (6 samples, 0.03%)</title><rect x="26.9" y="1941" width="0.4" height="15.0" fill="rgb(237,58,48)" rx="2" ry="2" />
<text  x="29.90" y="1951.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.02%)</title><rect x="141.5" y="1589" width="0.2" height="15.0" fill="rgb(233,21,33)" rx="2" ry="2" />
<text  x="144.47" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (86 samples, 0.45%)</title><rect x="172.2" y="1653" width="5.3" height="15.0" fill="rgb(247,169,27)" rx="2" ry="2" />
<text  x="175.25" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="757" width="0.3" height="15.0" fill="rgb(225,147,5)" rx="2" ry="2" />
<text  x="1189.98" y="767.5" ></text>
</g>
<g >
<title>wake_up_q (2 samples, 0.01%)</title><rect x="946.0" y="1941" width="0.2" height="15.0" fill="rgb(245,201,20)" rx="2" ry="2" />
<text  x="949.04" y="1951.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (41 samples, 0.21%)</title><rect x="113.7" y="2037" width="2.6" height="15.0" fill="rgb(234,102,0)" rx="2" ry="2" />
<text  x="116.72" y="2047.5" ></text>
</g>
<g >
<title>alloc_pages_vma (9 samples, 0.05%)</title><rect x="498.7" y="1845" width="0.5" height="15.0" fill="rgb(252,112,51)" rx="2" ry="2" />
<text  x="501.65" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1285" width="0.2" height="15.0" fill="rgb(231,136,2)" rx="2" ry="2" />
<text  x="223.35" y="1295.5" ></text>
</g>
<g >
<title>__lsan::CollectIgnoredCb (4 samples, 0.02%)</title><rect x="517.5" y="2037" width="0.3" height="15.0" fill="rgb(242,25,5)" rx="2" ry="2" />
<text  x="520.52" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (49 samples, 0.26%)</title><rect x="197.8" y="1605" width="3.0" height="15.0" fill="rgb(232,143,30)" rx="2" ry="2" />
<text  x="200.78" y="1615.5" ></text>
</g>
<g >
<title>strcmp@plt (9 samples, 0.05%)</title><rect x="42.6" y="2037" width="0.5" height="15.0" fill="rgb(231,139,7)" rx="2" ry="2" />
<text  x="45.56" y="2047.5" ></text>
</g>
<g >
<title>fasttext::Dictionary::getSubwords (16 samples, 0.08%)</title><rect x="764.9" y="2037" width="1.0" height="15.0" fill="rgb(206,120,18)" rx="2" ry="2" />
<text  x="767.87" y="2047.5" ></text>
</g>
<g >
<title>do_page_fault (29 samples, 0.15%)</title><rect x="497.9" y="1909" width="1.8" height="15.0" fill="rgb(214,210,31)" rx="2" ry="2" />
<text  x="500.91" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="997" width="0.3" height="15.0" fill="rgb(211,173,11)" rx="2" ry="2" />
<text  x="1190.41" y="1007.5" ></text>
</g>
<g >
<title>__lsan::ResetTagsCb (6 samples, 0.03%)</title><rect x="519.2" y="2037" width="0.4" height="15.0" fill="rgb(227,106,53)" rx="2" ry="2" />
<text  x="522.19" y="2047.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform&lt;char*&gt; (7 samples, 0.04%)</title><rect x="176.2" y="1589" width="0.4" height="15.0" fill="rgb(254,182,24)" rx="2" ry="2" />
<text  x="179.19" y="1599.5" ></text>
</g>
<g >
<title>do_exit (7 samples, 0.04%)</title><rect x="1103.0" y="1989" width="0.4" height="15.0" fill="rgb(230,130,41)" rx="2" ry="2" />
<text  x="1105.99" y="1999.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (12 samples, 0.06%)</title><rect x="1123.0" y="2037" width="0.8" height="15.0" fill="rgb(225,38,50)" rx="2" ry="2" />
<text  x="1126.03" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="789" width="0.1" height="15.0" fill="rgb(239,227,31)" rx="2" ry="2" />
<text  x="1190.72" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.9" y="1909" width="0.4" height="15.0" fill="rgb(243,101,22)" rx="2" ry="2" />
<text  x="1189.85" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (87 samples, 0.45%)</title><rect x="166.7" y="1653" width="5.4" height="15.0" fill="rgb(245,95,27)" rx="2" ry="2" />
<text  x="169.70" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="325" width="0.1" height="15.0" fill="rgb(229,151,26)" rx="2" ry="2" />
<text  x="1190.72" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_last_of (2 samples, 0.01%)</title><rect x="1150.6" y="2053" width="0.1" height="15.0" fill="rgb(224,171,16)" rx="2" ry="2" />
<text  x="1153.59" y="2063.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::FastUnwindStack (3 samples, 0.02%)</title><rect x="877.3" y="2005" width="0.2" height="15.0" fill="rgb(239,35,36)" rx="2" ry="2" />
<text  x="880.35" y="2015.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.02%)</title><rect x="204.6" y="1605" width="0.2" height="15.0" fill="rgb(215,94,42)" rx="2" ry="2" />
<text  x="207.56" y="1615.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (50 samples, 0.26%)</title><rect x="967.1" y="2053" width="3.1" height="15.0" fill="rgb(249,95,35)" rx="2" ry="2" />
<text  x="970.07" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="160.0" y="1285" width="0.2" height="15.0" fill="rgb(216,101,47)" rx="2" ry="2" />
<text  x="163.04" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (5 samples, 0.03%)</title><rect x="1187.3" y="1845" width="0.4" height="15.0" fill="rgb(242,34,28)" rx="2" ry="2" />
<text  x="1190.35" y="1855.5" ></text>
</g>
<g >
<title>perf_event_mmap (2 samples, 0.01%)</title><rect x="1102.4" y="1925" width="0.2" height="15.0" fill="rgb(217,22,54)" rx="2" ry="2" />
<text  x="1105.43" y="1935.5" ></text>
</g>
<g >
<title>nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt;::basic_json (4 samples, 0.02%)</title><rect x="515.1" y="2005" width="0.3" height="15.0" fill="rgb(206,69,47)" rx="2" ry="2" />
<text  x="518.12" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.0" y="1685" width="0.2" height="15.0" fill="rgb(233,203,5)" rx="2" ry="2" />
<text  x="223.04" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (94 samples, 0.49%)</title><rect x="138.4" y="1717" width="5.8" height="15.0" fill="rgb(223,163,7)" rx="2" ry="2" />
<text  x="141.39" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (542 samples, 2.83%)</title><rect x="56.1" y="1733" width="33.4" height="15.0" fill="rgb(220,8,7)" rx="2" ry="2" />
<text  x="59.07" y="1743.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1221" width="0.3" height="15.0" fill="rgb(207,10,39)" rx="2" ry="2" />
<text  x="1189.98" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_apply (62 samples, 0.32%)</title><rect x="154.5" y="1701" width="3.9" height="15.0" fill="rgb(243,108,32)" rx="2" ry="2" />
<text  x="157.55" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="309" width="0.1" height="15.0" fill="rgb(209,190,39)" rx="2" ry="2" />
<text  x="1190.72" y="319.5" ></text>
</g>
<g >
<title>page_fault (12 samples, 0.06%)</title><rect x="646.8" y="1861" width="0.7" height="15.0" fill="rgb(241,18,9)" rx="2" ry="2" />
<text  x="649.77" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.0" y="133" width="0.3" height="15.0" fill="rgb(230,117,35)" rx="2" ry="2" />
<text  x="1190.04" y="143.5" ></text>
</g>
<g >
<title>wake_up_q (7 samples, 0.04%)</title><rect x="29.5" y="1909" width="0.4" height="15.0" fill="rgb(234,227,30)" rx="2" ry="2" />
<text  x="32.49" y="1919.5" ></text>
</g>
<g >
<title>handle_mm_fault (71 samples, 0.37%)</title><rect x="23.9" y="1989" width="4.4" height="15.0" fill="rgb(231,59,3)" rx="2" ry="2" />
<text  x="26.88" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="453" width="0.1" height="15.0" fill="rgb(238,43,48)" rx="2" ry="2" />
<text  x="1190.72" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1525" width="0.3" height="15.0" fill="rgb(219,225,36)" rx="2" ry="2" />
<text  x="1189.98" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="181" width="0.3" height="15.0" fill="rgb(210,225,27)" rx="2" ry="2" />
<text  x="1190.41" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (31 samples, 0.16%)</title><rect x="508.1" y="1893" width="2.0" height="15.0" fill="rgb(254,215,32)" rx="2" ry="2" />
<text  x="511.15" y="1903.5" ></text>
</g>
<g >
<title>__vm_munmap (2 samples, 0.01%)</title><rect x="86.9" y="1477" width="0.1" height="15.0" fill="rgb(249,4,29)" rx="2" ry="2" />
<text  x="89.90" y="1487.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.02%)</title><rect x="876.9" y="2021" width="0.2" height="15.0" fill="rgb(228,65,51)" rx="2" ry="2" />
<text  x="879.85" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.01%)</title><rect x="55.9" y="1941" width="0.1" height="15.0" fill="rgb(224,141,46)" rx="2" ry="2" />
<text  x="58.88" y="1951.5" ></text>
</g>
<g >
<title>__asan_memcpy (3 samples, 0.02%)</title><rect x="157.0" y="1669" width="0.1" height="15.0" fill="rgb(248,14,31)" rx="2" ry="2" />
<text  x="159.95" y="1679.5" ></text>
</g>
<g >
<title>zap_page_range (3 samples, 0.02%)</title><rect x="91.8" y="1829" width="0.2" height="15.0" fill="rgb(235,35,9)" rx="2" ry="2" />
<text  x="94.83" y="1839.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (5 samples, 0.03%)</title><rect x="518.6" y="2037" width="0.3" height="15.0" fill="rgb(252,72,25)" rx="2" ry="2" />
<text  x="521.57" y="2047.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.01%)</title><rect x="520.0" y="1861" width="0.2" height="15.0" fill="rgb(250,73,51)" rx="2" ry="2" />
<text  x="523.05" y="1871.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (9 samples, 0.05%)</title><rect x="1159.0" y="2037" width="0.5" height="15.0" fill="rgb(217,208,43)" rx="2" ry="2" />
<text  x="1161.98" y="2047.5" ></text>
</g>
<g >
<title>__asan_memcpy (11 samples, 0.06%)</title><rect x="589.9" y="1877" width="0.6" height="15.0" fill="rgb(248,202,18)" rx="2" ry="2" />
<text  x="592.86" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="533" width="0.3" height="15.0" fill="rgb(219,111,41)" rx="2" ry="2" />
<text  x="1190.04" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (30 samples, 0.16%)</title><rect x="878.4" y="2037" width="1.8" height="15.0" fill="rgb(234,83,42)" rx="2" ry="2" />
<text  x="881.40" y="2047.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.01%)</title><rect x="516.7" y="1781" width="0.1" height="15.0" fill="rgb(253,152,37)" rx="2" ry="2" />
<text  x="519.66" y="1791.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (2 samples, 0.01%)</title><rect x="1022.1" y="1957" width="0.2" height="15.0" fill="rgb(245,118,36)" rx="2" ry="2" />
<text  x="1025.14" y="1967.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="803.2" y="2005" width="0.1" height="15.0" fill="rgb(219,201,32)" rx="2" ry="2" />
<text  x="806.16" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (418 samples, 2.18%)</title><rect x="133.1" y="1861" width="25.8" height="15.0" fill="rgb(233,74,37)" rx="2" ry="2" />
<text  x="136.09" y="1871.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="677" width="0.1" height="15.0" fill="rgb(205,115,6)" rx="2" ry="2" />
<text  x="1190.72" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.0" y="581" width="0.3" height="15.0" fill="rgb(254,4,5)" rx="2" ry="2" />
<text  x="1190.04" y="591.5" ></text>
</g>
<g >
<title>[unknown] (42 samples, 0.22%)</title><rect x="817.0" y="2021" width="2.6" height="15.0" fill="rgb(235,224,31)" rx="2" ry="2" />
<text  x="819.98" y="2031.5" ></text>
</g>
<g >
<title>onmt::CaseModifier::extract_case_type (838 samples, 4.38%)</title><rect x="578.6" y="1893" width="51.7" height="15.0" fill="rgb(216,122,35)" rx="2" ry="2" />
<text  x="581.63" y="1903.5" >onmt:..</text>
</g>
<g >
<title>__asan_memset (10 samples, 0.05%)</title><rect x="590.5" y="1877" width="0.7" height="15.0" fill="rgb(245,188,2)" rx="2" ry="2" />
<text  x="593.53" y="1887.5" ></text>
</g>
<g >
<title>ComputeClusterWeight (931 samples, 4.87%)</title><rect x="132.7" y="1989" width="57.4" height="15.0" fill="rgb(205,31,43)" rx="2" ry="2" />
<text  x="135.66" y="1999.5" >Comput..</text>
</g>
<g >
<title>__do_munmap (2 samples, 0.01%)</title><rect x="86.9" y="1461" width="0.1" height="15.0" fill="rgb(217,101,15)" rx="2" ry="2" />
<text  x="89.90" y="1471.5" ></text>
</g>
<g >
<title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (68 samples, 0.36%)</title><rect x="208.6" y="1653" width="4.2" height="15.0" fill="rgb(213,2,23)" rx="2" ry="2" />
<text  x="211.63" y="1663.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&gt; &gt;::Deallocate (2 samples, 0.01%)</title><rect x="88.4" y="1653" width="0.1" height="15.0" fill="rgb(207,149,25)" rx="2" ry="2" />
<text  x="91.38" y="1663.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (3 samples, 0.02%)</title><rect x="764.1" y="1877" width="0.2" height="15.0" fill="rgb(221,213,18)" rx="2" ry="2" />
<text  x="767.07" y="1887.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (2 samples, 0.01%)</title><rect x="186.2" y="1653" width="0.2" height="15.0" fill="rgb(217,67,9)" rx="2" ry="2" />
<text  x="189.24" y="1663.5" ></text>
</g>
<g >
<title>TDocument::PreprocessTextFields (3,022 samples, 15.79%)</title><rect x="566.2" y="1973" width="186.4" height="15.0" fill="rgb(212,200,30)" rx="2" ry="2" />
<text  x="569.24" y="1983.5" >TDocument::PreprocessTex..</text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (3 samples, 0.02%)</title><rect x="79.4" y="1157" width="0.2" height="15.0" fill="rgb(227,10,22)" rx="2" ry="2" />
<text  x="82.38" y="1167.5" ></text>
</g>
<g >
<title>Rank (935 samples, 4.89%)</title><rect x="132.7" y="2005" width="57.6" height="15.0" fill="rgb(223,104,29)" rx="2" ry="2" />
<text  x="135.66" y="2015.5" >Rank</text>
</g>
<g >
<title>fasttext::HierarchicalSoftmaxLoss::dfs (2 samples, 0.01%)</title><rect x="565.9" y="1893" width="0.2" height="15.0" fill="rgb(244,213,34)" rx="2" ry="2" />
<text  x="568.93" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (19 samples, 0.10%)</title><rect x="734.0" y="1893" width="1.1" height="15.0" fill="rgb(216,127,33)" rx="2" ry="2" />
<text  x="736.97" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="981" width="0.1" height="15.0" fill="rgb(231,130,41)" rx="2" ry="2" />
<text  x="162.85" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1733" width="0.1" height="15.0" fill="rgb(239,113,39)" rx="2" ry="2" />
<text  x="1190.72" y="1743.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="87.3" y="1589" width="0.2" height="15.0" fill="rgb(238,6,8)" rx="2" ry="2" />
<text  x="90.33" y="1599.5" ></text>
</g>
<g >
<title>alloc_pages_vma (6 samples, 0.03%)</title><rect x="647.0" y="1781" width="0.4" height="15.0" fill="rgb(242,121,46)" rx="2" ry="2" />
<text  x="650.02" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (5 samples, 0.03%)</title><rect x="1187.0" y="1173" width="0.3" height="15.0" fill="rgb(208,156,37)" rx="2" ry="2" />
<text  x="1189.98" y="1183.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.02%)</title><rect x="164.7" y="1541" width="0.2" height="15.0" fill="rgb(226,138,1)" rx="2" ry="2" />
<text  x="167.72" y="1551.5" ></text>
</g>
<g >
<title>__clock_gettime (8 samples, 0.04%)</title><rect x="122.4" y="2037" width="0.5" height="15.0" fill="rgb(206,121,20)" rx="2" ry="2" />
<text  x="125.36" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="220.4" y="933" width="0.1" height="15.0" fill="rgb(234,221,54)" rx="2" ry="2" />
<text  x="223.41" y="943.5" ></text>
</g>
<g >
<title>[unknown] (4 samples, 0.02%)</title><rect x="764.6" y="2021" width="0.3" height="15.0" fill="rgb(252,63,31)" rx="2" ry="2" />
<text  x="767.62" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1205" width="0.1" height="15.0" fill="rgb(213,29,39)" rx="2" ry="2" />
<text  x="162.85" y="1215.5" ></text>
</g>
<g >
<title>[unknown] (413 samples, 2.16%)</title><rect x="56.1" y="1269" width="25.5" height="15.0" fill="rgb(212,109,23)" rx="2" ry="2" />
<text  x="59.13" y="1279.5" >[..</text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (5 samples, 0.03%)</title><rect x="82.3" y="1317" width="0.3" height="15.0" fill="rgb(246,69,27)" rx="2" ry="2" />
<text  x="85.34" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="405" width="0.3" height="15.0" fill="rgb(246,221,52)" rx="2" ry="2" />
<text  x="1190.41" y="415.5" ></text>
</g>
<g >
<title>fasttext::Vector::mul (5 samples, 0.03%)</title><rect x="336.7" y="1989" width="0.3" height="15.0" fill="rgb(208,70,12)" rx="2" ry="2" />
<text  x="339.71" y="1999.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (4 samples, 0.02%)</title><rect x="519.7" y="1877" width="0.3" height="15.0" fill="rgb(216,174,44)" rx="2" ry="2" />
<text  x="522.74" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (357 samples, 1.87%)</title><rect x="56.1" y="1045" width="22.0" height="15.0" fill="rgb(252,34,26)" rx="2" ry="2" />
<text  x="59.13" y="1055.5" >[..</text>
</g>
<g >
<title>page_fault (12 samples, 0.06%)</title><rect x="760.8" y="2021" width="0.7" height="15.0" fill="rgb(221,148,37)" rx="2" ry="2" />
<text  x="763.80" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.01%)</title><rect x="188.5" y="1749" width="0.1" height="15.0" fill="rgb(236,201,22)" rx="2" ry="2" />
<text  x="191.46" y="1759.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.06%)</title><rect x="29.2" y="1989" width="0.7" height="15.0" fill="rgb(219,10,29)" rx="2" ry="2" />
<text  x="32.24" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.0" y="1637" width="0.2" height="15.0" fill="rgb(206,6,24)" rx="2" ry="2" />
<text  x="223.04" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (490 samples, 2.56%)</title><rect x="56.1" y="1509" width="30.2" height="15.0" fill="rgb(238,64,2)" rx="2" ry="2" />
<text  x="59.07" y="1519.5" >[u..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="1187.7" y="373" width="0.1" height="15.0" fill="rgb(210,193,22)" rx="2" ry="2" />
<text  x="1190.72" y="383.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (10 samples, 0.05%)</title><rect x="1154.8" y="2037" width="0.6" height="15.0" fill="rgb(242,169,13)" rx="2" ry="2" />
<text  x="1157.79" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1413" width="0.2" height="15.0" fill="rgb(221,104,33)" rx="2" ry="2" />
<text  x="223.04" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (75 samples, 0.39%)</title><rect x="133.6" y="1685" width="4.6" height="15.0" fill="rgb(228,159,10)" rx="2" ry="2" />
<text  x="136.58" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="1187.7" y="1173" width="0.1" height="15.0" fill="rgb(207,158,29)" rx="2" ry="2" />
<text  x="1190.72" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1109" width="0.1" height="15.0" fill="rgb(242,207,41)" rx="2" ry="2" />
<text  x="162.85" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (7 samples, 0.04%)</title><rect x="1186.9" y="1989" width="0.4" height="15.0" fill="rgb(219,38,10)" rx="2" ry="2" />
<text  x="1189.85" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="160.0" y="1173" width="0.2" height="15.0" fill="rgb(249,113,1)" rx="2" ry="2" />
<text  x="163.04" y="1183.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.01%)</title><rect x="88.1" y="1525" width="0.1" height="15.0" fill="rgb(244,171,11)" rx="2" ry="2" />
<text  x="91.07" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2 samples, 0.01%)</title><rect x="159.9" y="1621" width="0.1" height="15.0" fill="rgb(254,159,3)" rx="2" ry="2" />
<text  x="162.85" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.01%)</title><rect x="218.5" y="1797" width="0.1" height="15.0" fill="rgb(232,57,34)" rx="2" ry="2" />
<text  x="221.50" y="1807.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (2 samples, 0.01%)</title><rect x="727.4" y="1797" width="0.1" height="15.0" fill="rgb(244,227,12)" rx="2" ry="2" />
<text  x="730.37" y="1807.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (4 samples, 0.02%)</title><rect x="184.7" y="1653" width="0.2" height="15.0" fill="rgb(247,221,15)" rx="2" ry="2" />
<text  x="187.70" y="1663.5" ></text>
</g>
<g >
<title>onmt::unicode::is_letter (204 samples, 1.07%)</title><rect x="707.8" y="1877" width="12.6" height="15.0" fill="rgb(221,225,42)" rx="2" ry="2" />
<text  x="710.82" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.3" y="1253" width="0.2" height="15.0" fill="rgb(229,208,15)" rx="2" ry="2" />
<text  x="223.35" y="1263.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.04%)</title><rect x="763.4" y="2021" width="0.5" height="15.0" fill="rgb(246,38,9)" rx="2" ry="2" />
<text  x="766.45" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (4 samples, 0.02%)</title><rect x="1187.4" y="885" width="0.3" height="15.0" fill="rgb(247,32,11)" rx="2" ry="2" />
<text  x="1190.41" y="895.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (2 samples, 0.01%)</title><rect x="216.3" y="1669" width="0.2" height="15.0" fill="rgb(250,178,28)" rx="2" ry="2" />
<text  x="219.34" y="1679.5" ></text>
</g>
<g >
<title>__asan::QuarantineCallback::Recycle (5 samples, 0.03%)</title><rect x="79.6" y="1173" width="0.3" height="15.0" fill="rgb(239,46,11)" rx="2" ry="2" />
<text  x="82.56" y="1183.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (3 samples, 0.02%)</title><rect x="185.1" y="1653" width="0.2" height="15.0" fill="rgb(252,213,48)" rx="2" ry="2" />
<text  x="188.07" y="1663.5" ></text>
</g>
<g >
<title>release_pages (5 samples, 0.03%)</title><rect x="1103.1" y="1861" width="0.3" height="15.0" fill="rgb(252,92,26)" rx="2" ry="2" />
<text  x="1106.11" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_NFA&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_subexpr_begin (2 samples, 0.01%)</title><rect x="189.3" y="1861" width="0.2" height="15.0" fill="rgb(242,27,22)" rx="2" ry="2" />
<text  x="192.33" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (3 samples, 0.02%)</title><rect x="220.0" y="1445" width="0.2" height="15.0" fill="rgb(246,186,17)" rx="2" ry="2" />
<text  x="223.04" y="1455.5" ></text>
</g>
<g >
<title>__vfs_read (3 samples, 0.02%)</title><rect x="1111.1" y="1941" width="0.2" height="15.0" fill="rgb(227,78,29)" rx="2" ry="2" />
<text  x="1114.13" y="1951.5" ></text>
</g>
<g >
<title>Annotate (158 samples, 0.83%)</title><rect x="122.9" y="2005" width="9.8" height="15.0" fill="rgb(221,9,38)" rx="2" ry="2" />
<text  x="125.91" y="2015.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (40 samples, 0.21%)</title><rect x="964.1" y="2053" width="2.5" height="15.0" fill="rgb(247,122,41)" rx="2" ry="2" />
<text  x="967.11" y="2063.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.02%)</title><rect x="1103.7" y="1989" width="0.2" height="15.0" fill="rgb(205,152,0)" rx="2" ry="2" />
<text  x="1106.73" y="1999.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Unlock (11 samples, 0.06%)</title><rect x="71.9" y="37" width="0.7" height="15.0" fill="rgb(234,178,3)" rx="2" ry="2" />
<text  x="74.91" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3 samples, 0.02%)</title><rect x="220.0" y="1429" width="0.2" height="15.0" fill="rgb(250,23,36)" rx="2" ry="2" />
<text  x="223.04" y="1439.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (16 samples, 0.08%)</title><rect x="877.3" y="2037" width="1.0" height="15.0" fill="rgb(218,115,28)" rx="2" ry="2" />
<text  x="880.29" y="2047.5" ></text>
</g>
<g >
<title>run_rebalance_domains (2 samples, 0.01%)</title><rect x="315.8" y="1893" width="0.1" height="15.0" fill="rgb(252,142,44)" rx="2" ry="2" />
<text  x="318.81" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_try_char (2 samples, 0.01%)</title><rect x="189.1" y="1765" width="0.1" height="15.0" fill="rgb(224,149,23)" rx="2" ry="2" />
<text  x="192.08" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (2 samples, 0.01%)</title><rect x="89.1" y="1701" width="0.1" height="15.0" fill="rgb(207,220,47)" rx="2" ry="2" />
<text  x="92.06" y="1711.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (30 samples, 0.16%)</title><rect x="24.6" y="1941" width="1.9" height="15.0" fill="rgb(232,49,26)" rx="2" ry="2" />
<text  x="27.62" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (91 samples, 0.48%)</title><rect x="182.6" y="1733" width="5.6" height="15.0" fill="rgb(219,22,28)" rx="2" ry="2" />
<text  x="185.61" y="1743.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (3 samples, 0.02%)</title><rect x="1111.1" y="1909" width="0.2" height="15.0" fill="rgb(209,146,53)" rx="2" ry="2" />
<text  x="1114.13" y="1919.5" ></text>
</g>
<g >
<title>zap_page_range (2 samples, 0.01%)</title><rect x="85.6" y="1397" width="0.1" height="15.0" fill="rgb(207,155,42)" rx="2" ry="2" />
<text  x="88.60" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (454 samples, 2.37%)</title><rect x="160.6" y="1829" width="28.0" height="15.0" fill="rgb(235,190,13)" rx="2" ry="2" />
<text  x="163.59" y="1839.5" >s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4 samples, 0.02%)</title><rect x="1187.4" y="661" width="0.3" height="15.0" fill="rgb(249,13,48)" rx="2" ry="2" />
<text  x="1190.41" y="671.5" ></text>
</g>
<g >
<title>fasttext::FastText::getDimension (40 samples, 0.21%)</title><rect x="334.0" y="1989" width="2.5" height="15.0" fill="rgb(216,158,44)" rx="2" ry="2" />
<text  x="337.00" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_handle_repeat (2 samples, 0.01%)</title><rect x="159.9" y="1685" width="0.1" height="15.0" fill="rgb(226,157,25)" rx="2" ry="2" />
<text  x="162.85" y="1695.5" ></text>
</g>
</g>
</svg>
